{"version":3,"sources":["Versions.ts"],"names":["versionsAsync","api","ApiV2Client","versionCache","Cacher","getAsync","path","join","__dirname","sdkVersionsAsync","sdkVersions","setVersionsAsync","value","user","UserManager","getCurrentUserAsync","clientForUser","secret","process","env","EXPO_VERSIONS_SECRET","Error","postAsync","releasedSdkVersionsAsync","data","_sdkVersionString","releaseNoteUrl","gteSdkVersion","expJson","sdkVersion","semver","gte","e","XDLError","lteSdkVersion","lte","parseSdkVersionFromTag","tag","startsWith","substring","newestReleasedSdkVersionAsync","betaOptInEnabled","getenv","boolish","result","highestMajorVersion","version","Object","entries","hasReleaseNotes","isBeta","beta","major","newestSdkVersionAsync","oldestSupportedMajorVersionAsync","supportedVersions","v","isDeprecated","versionNumbers","keys","map","Math","min","facebookReactNativeVersionsAsync","facebookReactNativeVersions","Set","values","facebookReactNativeVersion","filter","Array","from","facebookReactNativeVersionToExpoVersionAsync","outerFacebookReactNativeVersion","valid","currentSdkVersion","minor","gt","canTurtleBuildSdkVersion","platform","getSdkVersionsSupportedByTurtle","supportedVersionsForPlatform","indexOf"],"mappings":"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","sourcesContent":["import { ExpoConfig } from '@expo/config';\nimport { JSONObject } from '@expo/json-file';\nimport getenv from 'getenv';\nimport pickBy from 'lodash/pickBy';\nimport path from 'path';\nimport semver from 'semver';\n\nimport ApiV2Client from './ApiV2';\nimport UserManager from './User';\nimport XDLError from './XDLError';\nimport { Cacher } from './tools/FsCache';\n\nexport type SDKVersion = {\n  androidExpoViewUrl?: string;\n  expoReactNativeTag: string;\n  /* deprecated */ exponentReactNativeTag?: string;\n  expokitNpmPackage?: string;\n  facebookReactNativeVersion: string;\n  facebookReactVersion?: string;\n  iosExpoViewUrl?: string;\n  /* deprecated */ iosExponentViewUrl?: string;\n  iosVersion?: string;\n  isDeprecated?: boolean;\n  packagesToInstallWhenEjecting?: { [name: string]: string };\n  releaseNoteUrl?: string;\n  iosClientUrl?: string;\n  iosClientVersion?: string;\n  androidClientUrl?: string;\n  androidClientVersion?: string;\n  relatedPackages?: { [name: string]: string };\n  beta?: boolean;\n};\n\nexport type SDKVersions = { [version: string]: SDKVersion };\ntype TurtleSDKVersions = { android: string[]; ios: string[] };\ntype TurtleSDKVersionsOld = { android: string; ios: string };\n\ntype Versions = {\n  androidUrl: string;\n  androidVersion: string;\n  iosUrl: string;\n  iosVersion: string;\n  sdkVersions: SDKVersions;\n  /* deprecated */ starterApps: unknown;\n  /* deprecated */ templates: unknown[];\n  /* deprecated */ templatesv2: unknown[];\n  turtleSdkVersions: TurtleSDKVersionsOld;\n};\n\nexport async function versionsAsync(): Promise<Versions> {\n  const api = new ApiV2Client();\n  const versionCache = new Cacher(\n    () => api.getAsync('versions/latest'),\n    'versions.json',\n    0,\n    path.join(__dirname, '../caches/versions.json')\n  );\n  return await versionCache.getAsync();\n}\n\nexport async function sdkVersionsAsync(): Promise<SDKVersions> {\n  const { sdkVersions } = await versionsAsync();\n  return sdkVersions;\n}\n\nexport async function setVersionsAsync(value: any) {\n  const user = await UserManager.getCurrentUserAsync();\n  const api = ApiV2Client.clientForUser(user);\n  const secret = process.env.EXPO_VERSIONS_SECRET;\n  if (!secret)\n    throw new Error(\n      'Versions.setVersionsAsync: EXPO_VERSIONS_SECRET environment variable is required'\n    );\n  await api.postAsync('versions/update', {\n    value: value as JSONObject,\n    secret,\n  });\n}\n\n// NOTE(brentvatne): it is possible for an unreleased version to be published to\n// the versions endpoint, but in some cases we only want to list out released\n// versions\nexport async function releasedSdkVersionsAsync(): Promise<SDKVersions> {\n  const sdkVersions = await sdkVersionsAsync();\n  return pickBy(sdkVersions, (data, _sdkVersionString) => !!data.releaseNoteUrl);\n}\n\nexport function gteSdkVersion(\n  expJson: Pick<ExpoConfig, 'sdkVersion'>,\n  sdkVersion: string\n): boolean {\n  if (!expJson.sdkVersion) {\n    return false;\n  }\n\n  if (expJson.sdkVersion === 'UNVERSIONED') {\n    return true;\n  }\n\n  try {\n    return semver.gte(expJson.sdkVersion, sdkVersion);\n  } catch (e) {\n    throw new XDLError(\n      'INVALID_VERSION',\n      `${expJson.sdkVersion} is not a valid version. Must be in the form of x.y.z`\n    );\n  }\n}\n\nexport function lteSdkVersion(\n  expJson: Pick<ExpoConfig, 'sdkVersion'>,\n  sdkVersion: string\n): boolean {\n  if (!expJson.sdkVersion) {\n    return false;\n  }\n\n  if (expJson.sdkVersion === 'UNVERSIONED') {\n    return false;\n  }\n\n  try {\n    return semver.lte(expJson.sdkVersion, sdkVersion);\n  } catch (e) {\n    throw new XDLError(\n      'INVALID_VERSION',\n      `${expJson.sdkVersion} is not a valid version. Must be in the form of x.y.z`\n    );\n  }\n}\n\nexport function parseSdkVersionFromTag(tag: string): string {\n  if (tag.startsWith('sdk-')) {\n    return tag.substring(4);\n  }\n\n  return tag;\n}\n\n// NOTE(brentvatne): it is possible for an unreleased version to be published to\n// the versions endpoint, but in some cases we need to get the latest *released*\n// version, not just the latest version.\nexport async function newestReleasedSdkVersionAsync(): Promise<{\n  version: string;\n  data: SDKVersion | null;\n}> {\n  const betaOptInEnabled = getenv.boolish('EXPO_BETA', false);\n  const sdkVersions = await sdkVersionsAsync();\n\n  let result = null;\n  let highestMajorVersion = '0.0.0';\n\n  for (const [version, data] of Object.entries(sdkVersions)) {\n    const hasReleaseNotes = !!data.releaseNoteUrl;\n    const isBeta = !!data.beta;\n\n    if (\n      semver.major(version) > semver.major(highestMajorVersion) &&\n      (hasReleaseNotes || (isBeta && betaOptInEnabled))\n    ) {\n      highestMajorVersion = version;\n      result = data;\n    }\n  }\n  return {\n    version: highestMajorVersion,\n    data: result,\n  };\n}\n\n/**\n * Be careful when using this! It can include unreleased and beta SDK versions.\n */\nexport async function newestSdkVersionAsync(): Promise<{\n  version: string;\n  data: SDKVersion | null;\n}> {\n  const sdkVersions = await sdkVersionsAsync();\n  let result = null;\n  let highestMajorVersion = '0.0.0';\n  for (const [version, data] of Object.entries(sdkVersions)) {\n    if (semver.major(version) > semver.major(highestMajorVersion)) {\n      highestMajorVersion = version;\n      result = data;\n    }\n  }\n  return {\n    version: highestMajorVersion,\n    data: result,\n  };\n}\n\nexport async function oldestSupportedMajorVersionAsync(): Promise<number> {\n  const sdkVersions = await sdkVersionsAsync();\n  const supportedVersions = pickBy(sdkVersions, v => !v.isDeprecated);\n  const versionNumbers = Object.keys(supportedVersions).map(version => semver.major(version));\n  return Math.min(...versionNumbers);\n}\n\nexport async function facebookReactNativeVersionsAsync(): Promise<string[]> {\n  const sdkVersions = await sdkVersionsAsync();\n  const facebookReactNativeVersions = new Set(\n    Object.values(sdkVersions)\n      .map(data => data.facebookReactNativeVersion)\n      .filter(version => version)\n  );\n  return Array.from(facebookReactNativeVersions);\n}\n\nexport async function facebookReactNativeVersionToExpoVersionAsync(\n  outerFacebookReactNativeVersion: string\n): Promise<string | null> {\n  if (!semver.valid(outerFacebookReactNativeVersion)) {\n    throw new XDLError(\n      'INVALID_VERSION',\n      `${outerFacebookReactNativeVersion} is not a valid version. Must be in the form of x.y.z`\n    );\n  }\n\n  const sdkVersions = await sdkVersionsAsync();\n  let currentSdkVersion: string | null = null;\n\n  for (const [version, { facebookReactNativeVersion }] of Object.entries(sdkVersions)) {\n    if (\n      semver.major(outerFacebookReactNativeVersion) === semver.major(facebookReactNativeVersion) &&\n      semver.minor(outerFacebookReactNativeVersion) === semver.minor(facebookReactNativeVersion) &&\n      (!currentSdkVersion || semver.gt(version, currentSdkVersion))\n    ) {\n      currentSdkVersion = version;\n    }\n  }\n\n  return currentSdkVersion;\n}\n\nexport async function canTurtleBuildSdkVersion(\n  sdkVersion: string,\n  platform: keyof TurtleSDKVersions\n): Promise<boolean> {\n  if (sdkVersion === 'UNVERSIONED') {\n    return true;\n  }\n\n  if (semver.valid(sdkVersion) == null) {\n    throw new XDLError(\n      'INVALID_VERSION',\n      `\"${sdkVersion}\" is not a valid version. Must be in the form of x.y.z`\n    );\n  }\n\n  const supportedVersions = await getSdkVersionsSupportedByTurtle();\n  const supportedVersionsForPlatform: string[] = supportedVersions[platform] ?? [];\n  return supportedVersionsForPlatform.indexOf(sdkVersion) !== -1;\n}\n\nasync function getSdkVersionsSupportedByTurtle(): Promise<TurtleSDKVersions> {\n  const api = new ApiV2Client();\n  return await api.getAsync('standalone-build/supportedSDKVersions');\n}\n"],"file":"../Versions.js","sourceRoot":"/@expo/xdl@58.0.20/src"}