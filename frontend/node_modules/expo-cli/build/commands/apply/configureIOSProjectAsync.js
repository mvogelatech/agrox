"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = configureIOSProjectAsync;

function _config() {
  const data = require("@expo/config");

  _config = function () {
    return data;
  };

  return data;
}

function _expoPlugins() {
  const data = require("@expo/config/build/plugins/expo-plugins");

  _expoPlugins = function () {
    return data;
  };

  return data;
}

function _modCompiler() {
  const data = require("@expo/config/build/plugins/mod-compiler");

  _modCompiler = function () {
    return data;
  };

  return data;
}

function _xdl() {
  const data = require("@expo/xdl");

  _xdl = function () {
    return data;
  };

  return data;
}

function _ConfigValidation() {
  const data = require("../eject/ConfigValidation");

  _ConfigValidation = function () {
    return data;
  };

  return data;
}

async function configureIOSProjectAsync(projectRoot) {
  // Check bundle ID before reading the config because it may mutate the config if the user is prompted to define it.
  const bundleIdentifier = await (0, _ConfigValidation().getOrPromptForBundleIdentifier)(projectRoot);
  const expoUsername = process.env.EAS_BUILD_USERNAME || (await _xdl().UserManager.getCurrentUsernameAsync());
  let {
    exp: config
  } = (0, _config().getConfigWithMods)(projectRoot, {
    skipSDKVersionRequirement: true
  }); // Add all built-in plugins

  config = (0, _expoPlugins().withExpoIOSPlugins)(config, {
    bundleIdentifier,
    expoUsername
  }); // compile all plugins and mods

  await (0, _modCompiler().compileModsAsync)(config, projectRoot);
}
//# sourceMappingURL=configureIOSProjectAsync.js.map