{"version":3,"sources":["../../../../../src/commands/eas-build/utils/expoUpdates/ios.ts"],"names":["configureUpdatesAsync","projectDir","exp","username","UserManager","getCurrentUsernameAsync","xcodeProject","IOSConfig","XcodeUtils","getPbxproj","Updates","isShellScriptBuildPhaseConfigured","ensureBundleReactNativePhaseContainsConfigurationScript","fs","writeFile","Paths","getPBXProjectPath","writeSync","expoPlist","readExpoPlistAsync","isPlistConfigurationSynced","setUpdatesConfig","writeExpoPlistAsync","syncUpdatesConfigurationAsync","ensureUpdatesConfiguredAsync","error","log","isPlistVersionConfigurationSynced","setVersionsConfig","warn","script","buildPhase","Error","isPlistConfigurationSet","expoPlistPath","getExpoPlistPath","pathExists","expoPlistContent","readFile","plist","parse","build","mkdirp","path","dirname","intentToAdd"],"mappings":"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","sourcesContent":["import { ExpoConfig, IOSConfig } from '@expo/config';\nimport plist from '@expo/plist';\nimport { UserManager } from '@expo/xdl';\nimport fs from 'fs-extra';\nimport path from 'path';\n\nimport { gitAddAsync } from '../../../../git';\nimport log from '../../../../log';\nimport { ensureValidVersions } from './common';\n\nexport async function configureUpdatesAsync(projectDir: string, exp: ExpoConfig): Promise<void> {\n  ensureValidVersions(exp);\n  const username = await UserManager.getCurrentUsernameAsync();\n  let xcodeProject = IOSConfig.XcodeUtils.getPbxproj(projectDir);\n\n  if (!IOSConfig.Updates.isShellScriptBuildPhaseConfigured(projectDir, exp, xcodeProject)) {\n    xcodeProject = IOSConfig.Updates.ensureBundleReactNativePhaseContainsConfigurationScript(\n      projectDir,\n      exp,\n      xcodeProject\n    );\n    await fs.writeFile(IOSConfig.Paths.getPBXProjectPath(projectDir), xcodeProject.writeSync());\n  }\n\n  let expoPlist = await readExpoPlistAsync(projectDir);\n  if (!IOSConfig.Updates.isPlistConfigurationSynced(exp, expoPlist, username)) {\n    expoPlist = IOSConfig.Updates.setUpdatesConfig(exp, expoPlist, username);\n    await writeExpoPlistAsync(projectDir, expoPlist);\n  }\n  // TODO: ensure ExpoPlist in pbxproj\n}\n\nexport async function syncUpdatesConfigurationAsync(\n  projectDir: string,\n  exp: ExpoConfig\n): Promise<void> {\n  ensureValidVersions(exp);\n  const username = await UserManager.getCurrentUsernameAsync();\n  try {\n    await ensureUpdatesConfiguredAsync(projectDir, exp);\n  } catch (error) {\n    log.error(\n      'expo-updates module is not configured. Please run \"expo eas:build:init\" first to configure the project'\n    );\n    throw error;\n  }\n\n  let expoPlist = await readExpoPlistAsync(projectDir);\n  if (!IOSConfig.Updates.isPlistVersionConfigurationSynced(exp, expoPlist)) {\n    expoPlist = IOSConfig.Updates.setVersionsConfig(exp, expoPlist);\n    await writeExpoPlistAsync(projectDir, expoPlist);\n  }\n\n  if (!IOSConfig.Updates.isPlistConfigurationSynced(exp, expoPlist, username)) {\n    log.warn(\n      'Native project configuration is not synced with values present in you app.json, run expo eas:build:init to make sure all values are applied in antive project'\n    );\n  }\n}\n\nexport async function ensureUpdatesConfiguredAsync(\n  projectDir: string,\n  exp: ExpoConfig\n): Promise<void> {\n  const xcodeProject = IOSConfig.XcodeUtils.getPbxproj(projectDir);\n\n  if (!IOSConfig.Updates.isShellScriptBuildPhaseConfigured(projectDir, exp, xcodeProject)) {\n    const script = 'expo-updates/scripts/create-manifest-ios.sh';\n    const buildPhase = '\"Bundle React Native code and images\"';\n    throw new Error(`Path to ${script} is missing in a ${buildPhase} build phase.`);\n  }\n\n  const expoPlist = await readExpoPlistAsync(projectDir);\n  if (!IOSConfig.Updates.isPlistConfigurationSet(expoPlist)) {\n    throw new Error('Missing values in Expo.plist');\n  }\n}\n\nasync function readExpoPlistAsync(projectDir: string): Promise<IOSConfig.ExpoPlist> {\n  const expoPlistPath = IOSConfig.Paths.getExpoPlistPath(projectDir);\n\n  let expoPlist = {};\n  if (await fs.pathExists(expoPlistPath)) {\n    const expoPlistContent = await fs.readFile(expoPlistPath, 'utf8');\n    expoPlist = plist.parse(expoPlistContent);\n  }\n  return expoPlist;\n}\n\nasync function writeExpoPlistAsync(\n  projectDir: string,\n  expoPlist: IOSConfig.ExpoPlist\n): Promise<void> {\n  const expoPlistPath = IOSConfig.Paths.getExpoPlistPath(projectDir);\n  const expoPlistContent = plist.build(expoPlist);\n\n  await fs.mkdirp(path.dirname(expoPlistPath));\n  await fs.writeFile(expoPlistPath, expoPlistContent);\n  await gitAddAsync(expoPlistPath, { intentToAdd: true });\n}\n"],"file":"ios.js"}