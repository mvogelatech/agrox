{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _jsxFileName = \"/home/jmgoncalves/git/agro-x/frontend/components/02-general/map/better-map.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useRef, useEffect } from 'react';\nimport MapView, { PROVIDER_GOOGLE } from 'react-native-maps';\n\nfunction requireNonemptyArrayAsFirstArg(f, name) {\n  return function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    if (args.length === 0 || !Array.isArray(args[0]) || args[0].length === 0) {\n      throw new Error(\"Expected first argument of '\" + name + \"' to be a nonempty array, got \" + (args[0] ? JSON.stringify(args[0]) : typeof args[0]) + \".\");\n    }\n\n    return f.apply(this, args);\n  };\n}\n\nvar alreadyPatchedMaps = new Set();\n\nfunction monkeyPatchMapViewMethods(map) {\n  if (alreadyPatchedMaps.has(map)) return map;\n  alreadyPatchedMaps.add(map);\n  var originalFitToSuppliedMarkers = map.fitToSuppliedMarkers.bind(map);\n  var originalFitToCoordinates = map.fitToCoordinates.bind(map);\n  map.fitToSuppliedMarkers = requireNonemptyArrayAsFirstArg(originalFitToSuppliedMarkers, 'fitToSuppliedMarkers');\n  map.fitToCoordinates = requireNonemptyArrayAsFirstArg(originalFitToCoordinates, 'fitToCoordinates');\n  return map;\n}\n\nfunction prepareToCallback(map) {\n  var patchedMap = monkeyPatchMapViewMethods(map);\n\n  var dim = _objectSpread({}, map.lastKnownDimensions);\n\n  return [patchedMap, dim];\n}\n\nexport function BetterMap(props) {\n  var mapRef = useRef(null);\n\n  function callOnRender() {\n    if (!props.onRender) return;\n    props.onRender.apply(props, _toConsumableArray(prepareToCallback(mapRef.current)));\n  }\n\n  useEffect(function () {\n    var _mapRef$current;\n\n    if ((_mapRef$current = mapRef.current) != null && _mapRef$current.isReady) {\n      callOnRender();\n    }\n  });\n  var mapJustGotReady = false;\n  return React.createElement(MapView, {\n    ref: mapRef,\n    collapsable: false,\n    provider: PROVIDER_GOOGLE,\n    mapType: \"satellite\",\n    style: {\n      flex: 1\n    },\n    initialRegion: props.initialRegion,\n    pitchEnabled: false,\n    rotateEnabled: false,\n    toolbarEnabled: false,\n    scrollEnabled: props.isScrollEnabled,\n    zoomEnabled: props.isZoomEnabled,\n    onPress: function onPress() {\n      return props.onPress == null ? void 0 : props.onPress.apply(props, _toConsumableArray(prepareToCallback(mapRef.current)));\n    },\n    onRegionChangeComplete: function onRegionChangeComplete() {\n      return props.onRegionChangeComplete == null ? void 0 : props.onRegionChangeComplete.apply(props, _toConsumableArray(prepareToCallback(mapRef.current)));\n    },\n    onMapReady: function onMapReady() {\n      mapRef.current.isReady = true;\n      mapJustGotReady = true;\n    },\n    onLayout: function onLayout(_ref) {\n      var nativeEvent = _ref.nativeEvent;\n      mapRef.current.lastKnownDimensions = {\n        widthPx: nativeEvent.layout.width,\n        heightPx: nativeEvent.layout.height\n      };\n\n      if (mapJustGotReady) {\n        callOnRender();\n      } else {\n        props.onResize == null ? void 0 : props.onResize.apply(props, _toConsumableArray(prepareToCallback(mapRef.current)));\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 3\n    }\n  }, props.children);\n}","map":{"version":3,"sources":["/home/jmgoncalves/git/agro-x/frontend/components/02-general/map/better-map.tsx"],"names":["React","useRef","useEffect","MapView","PROVIDER_GOOGLE","requireNonemptyArrayAsFirstArg","f","name","args","length","Array","isArray","Error","JSON","stringify","apply","alreadyPatchedMaps","Set","monkeyPatchMapViewMethods","map","has","add","originalFitToSuppliedMarkers","fitToSuppliedMarkers","bind","originalFitToCoordinates","fitToCoordinates","prepareToCallback","patchedMap","dim","lastKnownDimensions","BetterMap","props","mapRef","callOnRender","onRender","current","isReady","mapJustGotReady","flex","initialRegion","isScrollEnabled","isZoomEnabled","onPress","onRegionChangeComplete","nativeEvent","widthPx","layout","width","heightPx","height","onResize","children"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport MapView, { PROVIDER_GOOGLE } from 'react-native-maps';\nimport { Region, MapViewDimensions } from './map-utils';\n\ntype MapViewRef = MapView & {\n\tisReady: boolean;\n\tlastKnownDimensions: MapViewDimensions;\n};\n\ntype FunctionFromTypes<ThisType, ArgumentsType extends unknown[], ReturnType> = (this: ThisType, ...args: ArgumentsType) => ReturnType;\n\nfunction requireNonemptyArrayAsFirstArg<T, A extends unknown[], R>(f: FunctionFromTypes<T, A, R>, name: string): FunctionFromTypes<T, A, R> {\n\treturn function (this: T, ...args: A) {\n\t\tif (args.length === 0 || !Array.isArray(args[0]) || args[0].length === 0) {\n\t\t\tthrow new Error(`Expected first argument of '${name}' to be a nonempty array, got ${args[0] ? JSON.stringify(args[0]) : typeof args[0]}.`);\n\t\t}\n\n\t\treturn f.apply(this, args);\n\t};\n}\n\nconst alreadyPatchedMaps = new Set<MapView>();\n\nfunction monkeyPatchMapViewMethods(map: MapView): MapView {\n\tif (alreadyPatchedMaps.has(map)) return map;\n\talreadyPatchedMaps.add(map);\n\n\tconst originalFitToSuppliedMarkers = map.fitToSuppliedMarkers.bind(map);\n\tconst originalFitToCoordinates = map.fitToCoordinates.bind(map);\n\tmap.fitToSuppliedMarkers = requireNonemptyArrayAsFirstArg(originalFitToSuppliedMarkers, 'fitToSuppliedMarkers');\n\tmap.fitToCoordinates = requireNonemptyArrayAsFirstArg(originalFitToCoordinates, 'fitToCoordinates');\n\treturn map;\n}\n\nfunction prepareToCallback(map: MapViewRef): [MapView, MapViewDimensions] {\n\tconst patchedMap = monkeyPatchMapViewMethods(map);\n\tconst dim = { ...map.lastKnownDimensions };\n\treturn [patchedMap, dim];\n}\n\ntype BetterMapProps = {\n\tchildren?: React.ReactNode;\n\tisScrollEnabled: boolean;\n\tisZoomEnabled: boolean;\n\tinitialRegion?: Region;\n\tonRender?: (map: MapView, dimensions: MapViewDimensions) => void;\n\tonResize?: (map: MapView, newDimensions: MapViewDimensions) => void;\n\tonPress?: (map: MapView, dimensions: MapViewDimensions) => void;\n\tonRegionChangeComplete?: (map: MapView, dimensions: MapViewDimensions) => void;\n};\n\nexport function BetterMap(props: BetterMapProps) {\n\t// const rerenderStartTime = new Date().getTime();\n\t// const elapsed = () => new Date().getTime() - rerenderStartTime;\n\n\tconst mapRef = useRef<MapViewRef>(null);\n\n\tfunction callOnRender() {\n\t\tif (!props.onRender) return;\n\t\t// console.log(`Info: BetterMap#onRender() being called ${elapsed()}ms after rerendering began.`);\n\t\tprops.onRender(...prepareToCallback(mapRef.current!));\n\t}\n\n\tuseEffect(() => {\n\t\t// `useEffect` executes before `onMapReady` which in turn executes before `onLayout`.\n\t\tif (mapRef.current?.isReady) {\n\t\t\tcallOnRender();\n\t\t}\n\t});\n\n\tlet mapJustGotReady = false;\n\n\treturn (\n\t\t<MapView\n\t\t\tref={mapRef}\n\t\t\tcollapsable={false}\n\t\t\tprovider={PROVIDER_GOOGLE}\n\t\t\tmapType=\"satellite\"\n\t\t\tstyle={{ flex: 1 }}\n\t\t\tinitialRegion={props.initialRegion}\n\t\t\tpitchEnabled={false}\n\t\t\trotateEnabled={false}\n\t\t\ttoolbarEnabled={false}\n\t\t\tscrollEnabled={props.isScrollEnabled}\n\t\t\tzoomEnabled={props.isZoomEnabled}\n\t\t\tonPress={() => props.onPress?.(...prepareToCallback(mapRef.current!))}\n\t\t\tonRegionChangeComplete={() => props.onRegionChangeComplete?.(...prepareToCallback(mapRef.current!))}\n\t\t\tonMapReady={() => {\n\t\t\t\tmapRef.current!.isReady = true;\n\t\t\t\tmapJustGotReady = true;\n\t\t\t}}\n\t\t\tonLayout={({ nativeEvent }) => {\n\t\t\t\tmapRef.current!.lastKnownDimensions = {\n\t\t\t\t\twidthPx: nativeEvent.layout.width,\n\t\t\t\t\theightPx: nativeEvent.layout.height,\n\t\t\t\t};\n\n\t\t\t\tif (mapJustGotReady) {\n\t\t\t\t\tcallOnRender();\n\t\t\t\t} else {\n\t\t\t\t\tprops.onResize?.(...prepareToCallback(mapRef.current!));\n\t\t\t\t}\n\t\t\t}}\n\t\t>\n\t\t\t{props.children}\n\t\t</MapView>\n\t);\n}\n"]},"metadata":{},"sourceType":"module"}