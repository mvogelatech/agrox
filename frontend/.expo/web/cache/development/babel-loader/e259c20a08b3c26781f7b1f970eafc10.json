{"ast":null,"code":"var _jsxFileName = \"/home/jmgoncalves/git/agro-x/frontend/components/02-general/index.tsx\",\n    _this = this;\n\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport { Divider } from 'react-native-paper';\nimport { createTStyleSheet } from \"../../src/utils/style\";\nimport { useBackButton } from \"../../src/custom-hooks/use-back-button\";\nimport { dispatch, useMainSelector } from \"../../redux-things\";\nimport { TabButton } from \"../00-common/tab-button\";\nimport { Map } from \"./map/map\";\nimport { AllFields, DiagnosisFieldProfile, DiagnosisDetails, OverviewFieldProfile, OverviewDetails } from \"./bottom-cards\";\nimport { DrawerActions } from '@react-navigation/native';\nimport { DefaultHeader } from \"../00-common\";\nimport { getLatestDiagnosis } from \"../../src/utils\";\nimport { fieldHiredUnavailable, displayAlert, pulverizationQuoteNotAllowed } from \"../../src/utils/alert-messages\";\nimport { asFocusedOnlyComponent } from \"../../src/utils/smart-lifecycle-components\";\nimport { RoleTypeFarmManager } from \"../../models\";\nimport { IndicesSelection } from \"./bottom-cards/indices-overview/indices-selection\";\nimport { IndicesSelectionArea } from \"./bottom-cards/indices-overview/indices-selection-area\";\n\nfunction Tabs() {\n  var field = useMainSelector(function (state) {\n    return state.interactionData.general.currentField;\n  });\n  var tab = useMainSelector(function (state) {\n    return state.interactionData.general.currentTab;\n  });\n  return React.createElement(View, {\n    style: styles.default,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 3\n    }\n  }, React.createElement(TabButton, {\n    isSelected: tab === 'Overview',\n    icon: \"gradient\",\n    text: \"VIS\\xC3O GERAL\",\n    onPress: function onPress() {\n      dispatch({\n        type: 'CHANGE_GENERAL_TAB',\n        tab: 'Overview'\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 4\n    }\n  }), React.createElement(Divider, {\n    style: styles.divider,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 4\n    }\n  }), React.createElement(TabButton, {\n    isSelected: tab === 'Diagnosis',\n    icon: \"equalizer\",\n    text: \"DIAGN\\xD3STICOS\",\n    onPress: function onPress() {\n      if (field && !getLatestDiagnosis(field)) displayAlert(fieldHiredUnavailable);else {\n        dispatch({\n          type: 'CHANGE_GENERAL_TAB',\n          tab: 'Diagnosis'\n        });\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 4\n    }\n  }), React.createElement(Divider, {\n    style: styles.divider,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 4\n    }\n  }), React.createElement(TabButton, {\n    isSelected: tab === 'Indices',\n    icon: \"wifi-tethering\",\n    text: \"\\xCDNDICES\",\n    onPress: function onPress() {\n      dispatch({\n        type: 'CHANGE_GENERAL_TAB',\n        tab: 'Indices'\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 4\n    }\n  }));\n}\n\nfunction getGeneralBottomComponent(card, tab, user, navigation) {\n  var role = user.user_role.find(function (obj) {\n    return obj.role.name === RoleTypeFarmManager;\n  });\n\n  if (card === 'Fields') {\n    return React.createElement(AllFields, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 10\n      }\n    });\n  }\n\n  var BottomComponent;\n\n  if (card === 'Details') {\n    switch (tab) {\n      case 'Diagnosis':\n        BottomComponent = DiagnosisDetails;\n        break;\n\n      case 'Indices':\n        BottomComponent = IndicesSelectionArea;\n        break;\n\n      default:\n        BottomComponent = OverviewDetails;\n    }\n  } else {\n    switch (tab) {\n      case 'Diagnosis':\n        BottomComponent = DiagnosisFieldProfile;\n        break;\n\n      case 'Indices':\n        BottomComponent = IndicesSelection;\n        break;\n\n      default:\n        BottomComponent = OverviewFieldProfile;\n    }\n  }\n\n  var pulverizationQuoteCallback;\n\n  if (role) {\n    pulverizationQuoteCallback = function pulverizationQuoteCallback() {\n      return navigation.navigate('FieldSelectionFromGeneral');\n    };\n  } else {\n    pulverizationQuoteCallback = function pulverizationQuoteCallback() {\n      return displayAlert(pulverizationQuoteNotAllowed);\n    };\n  }\n\n  return React.createElement(BottomComponent, {\n    onClose: function onClose() {\n      dispatch({\n        type: 'CHANGE_GENERAL_CARD',\n        card: 'Fields'\n      });\n      dispatch({\n        type: 'CHANGE_FIELD',\n        field: undefined\n      });\n      dispatch({\n        type: 'CHANGE_INFESTATION_CARD',\n        card: 'General'\n      });\n      dispatch({\n        type: 'CHANGE_INDICES_DATE',\n        indexDate: undefined\n      });\n    },\n    onHirePulverizationButtonPress: pulverizationQuoteCallback,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 3\n    }\n  });\n}\n\nexport var General = asFocusedOnlyComponent(function (_ref) {\n  var navigation = _ref.navigation;\n  var area = useMainSelector(function (state) {\n    return state.interactionData.general.currentArea;\n  });\n  var card = useMainSelector(function (state) {\n    return state.interactionData.general.currentCard;\n  });\n  var tab = useMainSelector(function (state) {\n    return state.interactionData.general.currentTab;\n  });\n  var user = useMainSelector(function (state) {\n    return state.backendData.user;\n  });\n  useBackButton(function () {\n    if (card === 'Profile' || card === 'Details') {\n      dispatch({\n        type: 'CHANGE_GENERAL_CARD',\n        card: 'Fields'\n      });\n      dispatch({\n        type: 'CHANGE_FIELD',\n        field: undefined\n      });\n      dispatch({\n        type: 'CHANGE_INFESTATION_CARD',\n        card: 'General'\n      });\n      dispatch({\n        type: 'CHANGE_INDICES_DATE',\n        indexDate: undefined\n      });\n      return 'CANCEL';\n    }\n\n    return 'PROCEED';\n  }, [card]);\n  return React.createElement(View, {\n    style: {\n      flex: 1\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 3\n    }\n  }, React.createElement(DefaultHeader, {\n    title: area.name,\n    onDrawerPress: function onDrawerPress() {\n      return navigation.dispatch(DrawerActions.openDrawer());\n    },\n    onNotificationPress: function onNotificationPress() {\n      return navigation.navigate('Notifications');\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 4\n    }\n  }), React.createElement(Tabs, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 4\n    }\n  }), React.createElement(Map, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 4\n    }\n  }), getGeneralBottomComponent(card, tab, user, navigation));\n});\nvar styles = createTStyleSheet({\n  default: {\n    backgroundColor: '#fff',\n    flexDirection: 'row'\n  },\n  divider: {\n    width: '1rem',\n    height: '50rem',\n    backgroundColor: 'black'\n  }\n});","map":{"version":3,"sources":["/home/jmgoncalves/git/agro-x/frontend/components/02-general/index.tsx"],"names":["React","Divider","createTStyleSheet","useBackButton","dispatch","useMainSelector","TabButton","Map","AllFields","DiagnosisFieldProfile","DiagnosisDetails","OverviewFieldProfile","OverviewDetails","DrawerActions","DefaultHeader","getLatestDiagnosis","fieldHiredUnavailable","displayAlert","pulverizationQuoteNotAllowed","asFocusedOnlyComponent","RoleTypeFarmManager","IndicesSelection","IndicesSelectionArea","Tabs","field","state","interactionData","general","currentField","tab","currentTab","styles","default","type","divider","getGeneralBottomComponent","card","user","navigation","role","user_role","find","obj","name","BottomComponent","pulverizationQuoteCallback","navigate","undefined","indexDate","General","area","currentArea","currentCard","backendData","flex","openDrawer","backgroundColor","flexDirection","width","height"],"mappings":"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","sourcesContent":["import React from 'react';\n\nimport { View } from 'react-native';\nimport { Divider } from 'react-native-paper';\nimport { createTStyleSheet } from '../../src/utils/style';\n\nimport { useBackButton } from '../../src/custom-hooks/use-back-button';\n\nimport { MainState, dispatch, useMainSelector } from '../../redux-things';\n\nimport { AgroXScreenProps } from '../navigation-types';\n\nimport { TabButton } from '../00-common/tab-button';\nimport { Map } from './map/map';\nimport { AllFields, DiagnosisFieldProfile, DiagnosisDetails, OverviewFieldProfile, OverviewDetails } from './bottom-cards';\n\nimport { DrawerActions } from '@react-navigation/native';\nimport { DefaultHeader } from '../00-common';\nimport { getLatestDiagnosis } from '../../src/utils';\nimport { fieldHiredUnavailable, displayAlert, pulverizationQuoteNotAllowed } from '../../src/utils/alert-messages';\nimport { asFocusedOnlyComponent } from '../../src/utils/smart-lifecycle-components';\nimport { RoleTypeFarmManager, Models } from '../../models';\nimport { IndicesSelection } from './bottom-cards/indices-overview/indices-selection';\nimport { IndicesSelectionArea } from './bottom-cards/indices-overview/indices-selection-area';\n\ntype ScreenProps = AgroXScreenProps<'General'>;\n\nfunction Tabs() {\n\tconst field = useMainSelector((state) => state.interactionData.general.currentField);\n\tconst tab = useMainSelector((state) => state.interactionData.general.currentTab);\n\n\treturn (\n\t\t<View style={styles.default}>\n\t\t\t<TabButton\n\t\t\t\tisSelected={tab === 'Overview'}\n\t\t\t\ticon=\"gradient\"\n\t\t\t\ttext=\"VISÃO GERAL\"\n\t\t\t\tonPress={() => {\n\t\t\t\t\tdispatch({ type: 'CHANGE_GENERAL_TAB', tab: 'Overview' });\n\t\t\t\t}}\n\t\t\t/>\n\t\t\t<Divider style={styles.divider} />\n\t\t\t<TabButton\n\t\t\t\tisSelected={tab === 'Diagnosis'}\n\t\t\t\ticon=\"equalizer\"\n\t\t\t\ttext=\"DIAGNÓSTICOS\"\n\t\t\t\tonPress={() => {\n\t\t\t\t\tif (field && !getLatestDiagnosis(field)) displayAlert(fieldHiredUnavailable);\n\t\t\t\t\telse {\n\t\t\t\t\t\tdispatch({ type: 'CHANGE_GENERAL_TAB', tab: 'Diagnosis' });\n\t\t\t\t\t}\n\t\t\t\t}}\n\t\t\t/>\n\t\t\t<Divider style={styles.divider} />\n\t\t\t<TabButton\n\t\t\t\tisSelected={tab === 'Indices'}\n\t\t\t\ticon=\"wifi-tethering\"\n\t\t\t\ttext=\"ÍNDICES\"\n\t\t\t\tonPress={() => {\n\t\t\t\t\tdispatch({ type: 'CHANGE_GENERAL_TAB', tab: 'Indices' });\n\t\t\t\t}}\n\t\t\t/>\n\t\t</View>\n\t);\n}\n\nfunction getGeneralBottomComponent(\n\tcard: MainState['interactionData']['general']['currentCard'],\n\ttab: MainState['interactionData']['general']['currentTab'],\n\tuser: Models.user,\n\tnavigation: ScreenProps['navigation'],\n) {\n\tconst role = user.user_role.find((obj) => obj.role.name === RoleTypeFarmManager);\n\n\tif (card === 'Fields') {\n\t\treturn <AllFields />;\n\t}\n\n\tlet BottomComponent;\n\tif (card === 'Details') {\n\t\tswitch (tab) {\n\t\t\tcase 'Diagnosis':\n\t\t\t\tBottomComponent = DiagnosisDetails;\n\t\t\t\tbreak;\n\t\t\tcase 'Indices':\n\t\t\t\tBottomComponent = IndicesSelectionArea;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t// Overview\n\t\t\t\tBottomComponent = OverviewDetails;\n\t\t}\n\t} else {\n\t\tswitch (tab) {\n\t\t\tcase 'Diagnosis':\n\t\t\t\tBottomComponent = DiagnosisFieldProfile;\n\t\t\t\tbreak;\n\t\t\tcase 'Indices':\n\t\t\t\tBottomComponent = IndicesSelection;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t// Overview\n\t\t\t\tBottomComponent = OverviewFieldProfile;\n\t\t}\n\t}\n\n\tlet pulverizationQuoteCallback;\n\tif (role) {\n\t\tpulverizationQuoteCallback = () => navigation.navigate('FieldSelectionFromGeneral');\n\t} else {\n\t\tpulverizationQuoteCallback = () => displayAlert(pulverizationQuoteNotAllowed);\n\t}\n\n\treturn (\n\t\t<BottomComponent\n\t\t\tonClose={() => {\n\t\t\t\tdispatch({ type: 'CHANGE_GENERAL_CARD', card: 'Fields' });\n\t\t\t\tdispatch({ type: 'CHANGE_FIELD', field: undefined });\n\t\t\t\tdispatch({ type: 'CHANGE_INFESTATION_CARD', card: 'General' });\n\t\t\t\tdispatch({ type: 'CHANGE_INDICES_DATE', indexDate: undefined });\n\t\t\t}}\n\t\t\tonHirePulverizationButtonPress={pulverizationQuoteCallback}\n\t\t/>\n\t);\n}\n\nexport const General = asFocusedOnlyComponent(({ navigation }: ScreenProps) => {\n\tconst area = useMainSelector((state) => state.interactionData.general.currentArea)!;\n\tconst card = useMainSelector((state) => state.interactionData.general.currentCard)!;\n\tconst tab = useMainSelector((state) => state.interactionData.general.currentTab)!;\n\tconst user = useMainSelector((state) => state.backendData.user)!;\n\n\tuseBackButton(() => {\n\t\tif (card === 'Profile' || card === 'Details') {\n\t\t\tdispatch({ type: 'CHANGE_GENERAL_CARD', card: 'Fields' });\n\t\t\tdispatch({ type: 'CHANGE_FIELD', field: undefined });\n\t\t\tdispatch({ type: 'CHANGE_INFESTATION_CARD', card: 'General' });\n\t\t\tdispatch({ type: 'CHANGE_INDICES_DATE', indexDate: undefined });\n\t\t\treturn 'CANCEL';\n\t\t}\n\n\t\treturn 'PROCEED';\n\t}, [card]);\n\n\treturn (\n\t\t<View style={{ flex: 1 }}>\n\t\t\t<DefaultHeader\n\t\t\t\ttitle={area.name}\n\t\t\t\tonDrawerPress={() => navigation.dispatch(DrawerActions.openDrawer())}\n\t\t\t\tonNotificationPress={() => navigation.navigate('Notifications')}\n\t\t\t/>\n\t\t\t<Tabs />\n\t\t\t<Map />\n\t\t\t{getGeneralBottomComponent(card, tab, user, navigation)}\n\t\t</View>\n\t);\n});\n\nconst styles = createTStyleSheet({\n\tdefault: {\n\t\tbackgroundColor: '#fff',\n\t\tflexDirection: 'row',\n\t},\n\tdivider: {\n\t\twidth: '1rem',\n\t\theight: '50rem',\n\t\tbackgroundColor: 'black',\n\t},\n});\n"]},"metadata":{},"sourceType":"module"}