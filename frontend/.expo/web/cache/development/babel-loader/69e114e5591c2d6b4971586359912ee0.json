{"ast":null,"code":"function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } it = o[Symbol.iterator](); return it.next.bind(it); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { PulverizationMethods } from \"../../models\";\nexport function getQuotationsFromPackage(pkg) {\n  var quotations = [];\n\n  for (var _iterator = _createForOfIteratorHelperLoose(pkg.quotation_modal_package), _step; !(_step = _iterator()).done;) {\n    var modal = _step.value;\n\n    for (var _iterator2 = _createForOfIteratorHelperLoose(modal.quotation), _step2; !(_step2 = _iterator2()).done;) {\n      var _quotation = _step2.value;\n      quotations.push(_quotation);\n    }\n  }\n\n  return quotations;\n}\nexport function formatDate(date) {\n  if (date.length < 10) return date;\n  var dateArray = date.slice(0, 10).split('-');\n  return dateArray[2] + \"/\" + dateArray[1] + \"/\" + dateArray[0];\n}\nexport function formatDateWithTime(date) {\n  var dateArray = date.slice(0, 10).split('-');\n  var timeArray = date.slice(11, 19).split(':');\n  return dateArray[2] + \"/\" + dateArray[1] + \"/\" + dateArray[0] + \"\\t|\\t \" + (Number.parseFloat(timeArray[0]) - 3) + \":\" + timeArray[1];\n}\nexport function getLatestCrop(field) {\n  if (field.crop.length === 0) return null;\n  return field.crop[0];\n}\nexport function getLatestDiagnosis(field) {\n  var latestCrop = getLatestCrop(field);\n  if (latestCrop === null) return null;\n  if (latestCrop.diagnosis.length === 0) return null;\n  return latestCrop.diagnosis[0];\n}\nexport function getAreaLatestDiagnosis(area) {\n  return getLatestDiagnosis(area.field[0]);\n}\nexport function getFieldState(field) {\n  var latestCrop = getLatestCrop(field);\n\n  if (latestCrop != null && latestCrop.is_diagnosis_hired) {\n    var latestDiagnosis = getLatestDiagnosis(field);\n    if (latestDiagnosis) return 'hired_diagnosis_available';\n    return 'hired_diagnosis_unavailable';\n  }\n\n  return 'not_hired';\n}\nexport function getPrescriptionStatus(latestDiagnosis) {\n  var _latestDiagnosis$pres;\n\n  if ((latestDiagnosis == null ? void 0 : latestDiagnosis.affected_area_ha) === 0) return 'not-infested';\n  if ((latestDiagnosis == null ? void 0 : (_latestDiagnosis$pres = latestDiagnosis.prescription) == null ? void 0 : _latestDiagnosis$pres.length) === 0) return 'not-available';\n  if (!(latestDiagnosis != null && latestDiagnosis.prescription)) return 'not-available';\n  return 'ok';\n}\nexport function getLatestPrescriptionPulverizationMethod(field) {\n  var _latestCrop$diagnosis;\n\n  var latestCrop = getLatestCrop(field);\n  var pulverizationMethod = PulverizationMethods.NOT_AVAILABLE;\n  if (latestCrop != null && (_latestCrop$diagnosis = latestCrop.diagnosis[0]) != null && _latestCrop$diagnosis.prescription[0]) pulverizationMethod = latestCrop.diagnosis[0].prescription[0].pulverization_method;\n  return pulverizationMethod;\n}\nexport function getAreaState(area) {\n  var allStates = area.field.map(function (field) {\n    return getFieldState(field);\n  });\n  if (allStates.some(function (state) {\n    return state === 'hired_diagnosis_available';\n  })) return 'hired_diagnosis_available';\n  if (allStates.some(function (state) {\n    return state === 'hired_diagnosis_unavailable';\n  })) return 'hired_diagnosis_unavailable';\n  return 'not_hired';\n}\nexport function getFieldInfestationText(field, card) {\n  var state = getFieldState(field);\n  var fieldInfestationPercentage = '';\n\n  switch (state) {\n    case 'hired_diagnosis_available':\n      fieldInfestationPercentage = getFieldInfestationPercentage(field).toFixed(2);\n      return card ? fieldInfestationPercentage + \"%\\nInfestado\" : fieldInfestationPercentage + \"%\";\n\n    case 'hired_diagnosis_unavailable':\n      return 'AGUARDANDO\\nDIAGNÓSTICO';\n\n    case 'not_hired':\n      return 'DIAGNÓSTICO\\nNÃO CONTRATADO';\n\n    default:\n      break;\n  }\n}\nexport function getFieldProfileText(field) {\n  var state = getFieldState(field);\n  var fieldInfestationPercentage = '';\n\n  switch (state) {\n    case 'hired_diagnosis_available':\n      fieldInfestationPercentage = getFieldInfestationPercentage(field).toFixed(2);\n      return fieldInfestationPercentage + \"%\\n Infestado\";\n\n    case 'hired_diagnosis_unavailable':\n      return 'Aguardando\\nDiagnóstico';\n\n    case 'not_hired':\n      return 'Diagnóstico\\nNão Contratado';\n\n    default:\n      break;\n  }\n}\nexport function getFieldInfestationPercentage(field) {\n  var latestDiagnosis = getLatestDiagnosis(field);\n  return latestDiagnosis.affected_area_ha / field.area_ha * 100;\n}\nexport function getAreaAffectedAreaHA(area) {\n  if (area.field.every(function (field) {\n    var _getLatestCrop;\n\n    return ((_getLatestCrop = getLatestCrop(field)) == null ? void 0 : _getLatestCrop.diagnosis.length) === 0;\n  })) return null;\n  var allDiagnosisAffectedArea = area.field.map(function (field) {\n    var latestDiagnosis = getLatestDiagnosis(field);\n    if (latestDiagnosis) return latestDiagnosis.affected_area_ha;\n    return 0;\n  });\n  return allDiagnosisAffectedArea.reduce(function (x, y) {\n    return x + y;\n  }, 0);\n}\nexport function getAllFieldsAreaHA(area) {\n  var allFieldsAreas = area.field.map(function (field) {\n    return field.area_ha;\n  });\n  return allFieldsAreas.reduce(function (x, y) {\n    return x + y;\n  }, 0);\n}\nexport function getFieldAffectedAreaHA(field) {\n  var latestDiagnosis = getLatestDiagnosis(field);\n  if (!latestDiagnosis) return null;\n  return latestDiagnosis.affected_area_ha;\n}\nexport var REM_SCALE = Dimensions.get('window').width / 390;\nvar onLaytoutTimeout = 900;\nvar afterScrollToEndTimeout = 900;\nexport function scrollToEndAndBack(ref, type) {\n  if (type === 'flatlist') {\n    setTimeout(function () {\n      var _ref$current;\n\n      (_ref$current = ref.current) == null ? void 0 : _ref$current.scrollToEnd();\n      setTimeout(function () {\n        var _ref$current2;\n\n        (_ref$current2 = ref.current) == null ? void 0 : _ref$current2.scrollToIndex({\n          animated: true,\n          index: 0\n        });\n      }, afterScrollToEndTimeout);\n    }, onLaytoutTimeout);\n  } else {\n    setTimeout(function () {\n      var _ref$current3;\n\n      (_ref$current3 = ref.current) == null ? void 0 : _ref$current3.scrollToEnd();\n      setTimeout(function () {\n        var _ref$current4;\n\n        (_ref$current4 = ref.current) == null ? void 0 : _ref$current4.scrollTo({\n          animated: true,\n          y: 0,\n          x: 0\n        });\n      }, afterScrollToEndTimeout);\n    }, onLaytoutTimeout);\n  }\n}","map":{"version":3,"sources":["/home/jmgoncalves/git/agro-x/frontend/src/utils/index.ts"],"names":["PulverizationMethods","getQuotationsFromPackage","pkg","quotations","quotation_modal_package","modal","quotation","push","formatDate","date","length","dateArray","slice","split","formatDateWithTime","timeArray","Number","parseFloat","getLatestCrop","field","crop","getLatestDiagnosis","latestCrop","diagnosis","getAreaLatestDiagnosis","area","getFieldState","is_diagnosis_hired","latestDiagnosis","getPrescriptionStatus","affected_area_ha","prescription","getLatestPrescriptionPulverizationMethod","pulverizationMethod","NOT_AVAILABLE","pulverization_method","getAreaState","allStates","map","some","state","getFieldInfestationText","card","fieldInfestationPercentage","getFieldInfestationPercentage","toFixed","getFieldProfileText","area_ha","getAreaAffectedAreaHA","every","allDiagnosisAffectedArea","reduce","x","y","getAllFieldsAreaHA","allFieldsAreas","getFieldAffectedAreaHA","REM_SCALE","Dimensions","get","width","onLaytoutTimeout","afterScrollToEndTimeout","scrollToEndAndBack","ref","type","setTimeout","current","scrollToEnd","scrollToIndex","animated","index","scrollTo"],"mappings":";;;;;;;AACA,SAAiBA,oBAAjB;AAIA,OAAO,SAASC,wBAAT,CAAkCC,GAAlC,EAAqF;AAC3F,MAAMC,UAA8B,GAAG,EAAvC;;AACA,uDAAoBD,GAAG,CAACE,uBAAxB,wCAAiD;AAAA,QAAtCC,KAAsC;;AAChD,0DAAwBA,KAAK,CAACC,SAA9B;AAAA,UAAWA,UAAX;AAAyCH,MAAAA,UAAU,CAACI,IAAX,CAAgBD,UAAhB;AAAzC;AACA;;AAED,SAAOH,UAAP;AACA;AAED,OAAO,SAASK,UAAT,CAAoBC,IAApB,EAAkC;AACxC,MAAIA,IAAI,CAACC,MAAL,GAAc,EAAlB,EAAsB,OAAOD,IAAP;AACtB,MAAME,SAAS,GAAGF,IAAI,CAACG,KAAL,CAAW,CAAX,EAAc,EAAd,EAAkBC,KAAlB,CAAwB,GAAxB,CAAlB;AACA,SAAUF,SAAS,CAAC,CAAD,CAAnB,SAA0BA,SAAS,CAAC,CAAD,CAAnC,SAA0CA,SAAS,CAAC,CAAD,CAAnD;AACA;AAED,OAAO,SAASG,kBAAT,CAA4BL,IAA5B,EAA0C;AAChD,MAAME,SAAS,GAAGF,IAAI,CAACG,KAAL,CAAW,CAAX,EAAc,EAAd,EAAkBC,KAAlB,CAAwB,GAAxB,CAAlB;AACA,MAAME,SAAS,GAAGN,IAAI,CAACG,KAAL,CAAW,EAAX,EAAe,EAAf,EAAmBC,KAAnB,CAAyB,GAAzB,CAAlB;AAEA,SAAUF,SAAS,CAAC,CAAD,CAAnB,SAA0BA,SAAS,CAAC,CAAD,CAAnC,SAA0CA,SAAS,CAAC,CAAD,CAAnD,eAA+DK,MAAM,CAACC,UAAP,CAAkBF,SAAS,CAAC,CAAD,CAA3B,IAAkC,CAAjG,UAAsGA,SAAS,CAAC,CAAD,CAA/G;AACA;AAED,OAAO,SAASG,aAAT,CAAuBC,KAAvB,EAA4C;AAClD,MAAIA,KAAK,CAACC,IAAN,CAAWV,MAAX,KAAsB,CAA1B,EAA6B,OAAO,IAAP;AAC7B,SAAOS,KAAK,CAACC,IAAN,CAAW,CAAX,CAAP;AACA;AAED,OAAO,SAASC,kBAAT,CAA4BF,KAA5B,EAAiD;AACvD,MAAMG,UAAU,GAAGJ,aAAa,CAACC,KAAD,CAAhC;AACA,MAAIG,UAAU,KAAK,IAAnB,EAAyB,OAAO,IAAP;AACzB,MAAIA,UAAU,CAACC,SAAX,CAAqBb,MAArB,KAAgC,CAApC,EAAuC,OAAO,IAAP;AACvC,SAAOY,UAAU,CAACC,SAAX,CAAqB,CAArB,CAAP;AACA;AAED,OAAO,SAASC,sBAAT,CAAgCC,IAAhC,EAAmD;AACzD,SAAOJ,kBAAkB,CAACI,IAAI,CAACN,KAAL,CAAW,CAAX,CAAD,CAAzB;AACA;AAID,OAAO,SAASO,aAAT,CAAuBP,KAAvB,EAAwD;AAC9D,MAAMG,UAAU,GAAGJ,aAAa,CAACC,KAAD,CAAhC;;AACA,MAAIG,UAAJ,YAAIA,UAAU,CAAEK,kBAAhB,EAAoC;AACnC,QAAMC,eAAe,GAAGP,kBAAkB,CAACF,KAAD,CAA1C;AACA,QAAIS,eAAJ,EAAqB,OAAO,2BAAP;AACrB,WAAO,6BAAP;AACA;;AAED,SAAO,WAAP;AACA;AAED,OAAO,SAASC,qBAAT,CAA+BD,eAA/B,EAAkE;AAAA;;AACxE,MAAI,CAAAA,eAAe,QAAf,YAAAA,eAAe,CAAEE,gBAAjB,MAAsC,CAA1C,EAA6C,OAAO,cAAP;AAC7C,MAAI,CAAAF,eAAe,QAAf,qCAAAA,eAAe,CAAEG,YAAjB,2CAA+BrB,MAA/B,MAA0C,CAA9C,EAAiD,OAAO,eAAP;AACjD,MAAI,EAACkB,eAAD,YAACA,eAAe,CAAEG,YAAlB,CAAJ,EAAoC,OAAO,eAAP;AACpC,SAAO,IAAP;AACA;AAED,OAAO,SAASC,wCAAT,CAAkDb,KAAlD,EAAuE;AAAA;;AAC7E,MAAMG,UAAU,GAAGJ,aAAa,CAACC,KAAD,CAAhC;AAGA,MAAIc,mBAA2B,GAAGjC,oBAAoB,CAACkC,aAAvD;AACA,MAAIZ,UAAJ,qCAAIA,UAAU,CAAEC,SAAZ,CAAsB,CAAtB,CAAJ,aAAI,sBAA0BQ,YAA1B,CAAuC,CAAvC,CAAJ,EAA+CE,mBAAmB,GAAGX,UAAU,CAACC,SAAX,CAAqB,CAArB,EAAwBQ,YAAxB,CAAqC,CAArC,EAAwCI,oBAA9D;AAE/C,SAAOF,mBAAP;AACA;AAED,OAAO,SAASG,YAAT,CAAsBX,IAAtB,EAAyC;AAC/C,MAAMY,SAAS,GAAGZ,IAAI,CAACN,KAAL,CAAWmB,GAAX,CAAe,UAACnB,KAAD;AAAA,WAAWO,aAAa,CAACP,KAAD,CAAxB;AAAA,GAAf,CAAlB;AACA,MAAIkB,SAAS,CAACE,IAAV,CAAe,UAACC,KAAD;AAAA,WAAWA,KAAK,KAAK,2BAArB;AAAA,GAAf,CAAJ,EAAsE,OAAO,2BAAP;AACtE,MAAIH,SAAS,CAACE,IAAV,CAAe,UAACC,KAAD;AAAA,WAAWA,KAAK,KAAK,6BAArB;AAAA,GAAf,CAAJ,EAAwE,OAAO,6BAAP;AACxE,SAAO,WAAP;AACA;AAED,OAAO,SAASC,uBAAT,CAAiCtB,KAAjC,EAAsDuB,IAAtD,EAAqE;AAC3E,MAAMF,KAAK,GAAGd,aAAa,CAACP,KAAD,CAA3B;AACA,MAAIwB,0BAA0B,GAAG,EAAjC;;AACA,UAAQH,KAAR;AACC,SAAK,2BAAL;AACCG,MAAAA,0BAA0B,GAAGC,6BAA6B,CAACzB,KAAD,CAA7B,CAAqC0B,OAArC,CAA6C,CAA7C,CAA7B;AACA,aAAOH,IAAI,GAAMC,0BAAN,oBAAoDA,0BAApD,MAAX;;AAED,SAAK,6BAAL;AACC,aAAO,yBAAP;;AACD,SAAK,WAAL;AACC,aAAO,6BAAP;;AACD;AACC;AAVF;AAYA;AAED,OAAO,SAASG,mBAAT,CAA6B3B,KAA7B,EAAkD;AACxD,MAAMqB,KAAK,GAAGd,aAAa,CAACP,KAAD,CAA3B;AACA,MAAIwB,0BAA0B,GAAG,EAAjC;;AACA,UAAQH,KAAR;AACC,SAAK,2BAAL;AACCG,MAAAA,0BAA0B,GAAGC,6BAA6B,CAACzB,KAAD,CAA7B,CAAqC0B,OAArC,CAA6C,CAA7C,CAA7B;AACA,aAAUF,0BAAV;;AAED,SAAK,6BAAL;AACC,aAAO,yBAAP;;AACD,SAAK,WAAL;AACC,aAAO,6BAAP;;AACD;AACC;AAVF;AAYA;AAED,OAAO,SAASC,6BAAT,CAAuCzB,KAAvC,EAA4D;AAClE,MAAMS,eAAe,GAAGP,kBAAkB,CAACF,KAAD,CAA1C;AACA,SAAQS,eAAe,CAACE,gBAAhB,GAAmCX,KAAK,CAAC4B,OAA1C,GAAqD,GAA5D;AACA;AAED,OAAO,SAASC,qBAAT,CAA+BvB,IAA/B,EAAkD;AACxD,MAAIA,IAAI,CAACN,KAAL,CAAW8B,KAAX,CAAiB,UAAC9B,KAAD;AAAA;;AAAA,WAAW,mBAAAD,aAAa,CAACC,KAAD,CAAb,oCAAsBI,SAAtB,CAAgCb,MAAhC,MAA2C,CAAtD;AAAA,GAAjB,CAAJ,EAA+E,OAAO,IAAP;AAC/E,MAAMwC,wBAAwB,GAAGzB,IAAI,CAACN,KAAL,CAAWmB,GAAX,CAAe,UAACnB,KAAD,EAAW;AAC1D,QAAMS,eAAe,GAAGP,kBAAkB,CAACF,KAAD,CAA1C;AACA,QAAIS,eAAJ,EAAqB,OAAOA,eAAe,CAACE,gBAAvB;AACrB,WAAO,CAAP;AACA,GAJgC,CAAjC;AAMA,SAAOoB,wBAAwB,CAACC,MAAzB,CAAgC,UAACC,CAAD,EAAIC,CAAJ;AAAA,WAAUD,CAAC,GAAGC,CAAd;AAAA,GAAhC,EAAiD,CAAjD,CAAP;AACA;AAED,OAAO,SAASC,kBAAT,CAA4B7B,IAA5B,EAA+C;AACrD,MAAM8B,cAAc,GAAG9B,IAAI,CAACN,KAAL,CAAWmB,GAAX,CAAe,UAACnB,KAAD;AAAA,WAAWA,KAAK,CAAC4B,OAAjB;AAAA,GAAf,CAAvB;AAEA,SAAOQ,cAAc,CAACJ,MAAf,CAAsB,UAACC,CAAD,EAAIC,CAAJ;AAAA,WAAUD,CAAC,GAAGC,CAAd;AAAA,GAAtB,EAAuC,CAAvC,CAAP;AACA;AAED,OAAO,SAASG,sBAAT,CAAgCrC,KAAhC,EAAqD;AAC3D,MAAMS,eAAe,GAAGP,kBAAkB,CAACF,KAAD,CAA1C;AACA,MAAI,CAACS,eAAL,EAAsB,OAAO,IAAP;AACtB,SAAOA,eAAe,CAACE,gBAAvB;AACA;AAED,OAAO,IAAM2B,SAAS,GAAGC,UAAU,CAACC,GAAX,CAAe,QAAf,EAAyBC,KAAzB,GAAiC,GAAnD;AAEP,IAAMC,gBAAgB,GAAG,GAAzB;AACA,IAAMC,uBAAuB,GAAG,GAAhC;AACA,OAAO,SAASC,kBAAT,CAA4BC,GAA5B,EAAsCC,IAAtC,EAAuE;AAC7E,MAAIA,IAAI,KAAK,UAAb,EAAyB;AACxBC,IAAAA,UAAU,CAAC,YAAY;AAAA;;AACtB,sBAAAF,GAAG,CAACG,OAAJ,kCAAaC,WAAb;AACAF,MAAAA,UAAU,CAAC,YAAY;AAAA;;AACtB,yBAAAF,GAAG,CAACG,OAAJ,mCAAaE,aAAb,CAA2B;AAAEC,UAAAA,QAAQ,EAAE,IAAZ;AAAkBC,UAAAA,KAAK,EAAE;AAAzB,SAA3B;AACA,OAFS,EAEPT,uBAFO,CAAV;AAGA,KALS,EAKPD,gBALO,CAAV;AAMA,GAPD,MAOO;AACNK,IAAAA,UAAU,CAAC,YAAY;AAAA;;AACtB,uBAAAF,GAAG,CAACG,OAAJ,mCAAaC,WAAb;AACAF,MAAAA,UAAU,CAAC,YAAY;AAAA;;AACtB,yBAAAF,GAAG,CAACG,OAAJ,mCAAaK,QAAb,CAAsB;AAAEF,UAAAA,QAAQ,EAAE,IAAZ;AAAkBjB,UAAAA,CAAC,EAAE,CAArB;AAAwBD,UAAAA,CAAC,EAAE;AAA3B,SAAtB;AACA,OAFS,EAEPU,uBAFO,CAAV;AAGA,KALS,EAKPD,gBALO,CAAV;AAMA;AACD","sourcesContent":["import { Dimensions } from 'react-native';\nimport { Models, PulverizationMethods } from '../../models';\n\nexport type StrictUnion<A, B> = (A & { [K in keyof B]?: undefined }) | (B & { [K in keyof A]?: undefined });\n\nexport function getQuotationsFromPackage(pkg: Models.quotation_package): Models.quotation[] {\n\tconst quotations: Models.quotation[] = [];\n\tfor (const modal of pkg.quotation_modal_package) {\n\t\tfor (const quotation of modal.quotation) quotations.push(quotation);\n\t}\n\n\treturn quotations;\n}\n\nexport function formatDate(date: string) {\n\tif (date.length < 10) return date;\n\tconst dateArray = date.slice(0, 10).split('-');\n\treturn `${dateArray[2]}/${dateArray[1]}/${dateArray[0]}`;\n}\n\nexport function formatDateWithTime(date: string) {\n\tconst dateArray = date.slice(0, 10).split('-');\n\tconst timeArray = date.slice(11, 19).split(':');\n\t// TODO: Get timezone from the device\n\treturn `${dateArray[2]}/${dateArray[1]}/${dateArray[0]}\\t|\\t ${Number.parseFloat(timeArray[0]) - 3}:${timeArray[1]}`;\n}\n\nexport function getLatestCrop(field: Models.field) {\n\tif (field.crop.length === 0) return null;\n\treturn field.crop[0];\n}\n\nexport function getLatestDiagnosis(field: Models.field) {\n\tconst latestCrop = getLatestCrop(field);\n\tif (latestCrop === null) return null;\n\tif (latestCrop.diagnosis.length === 0) return null;\n\treturn latestCrop.diagnosis[0];\n}\n\nexport function getAreaLatestDiagnosis(area: Models.area) {\n\treturn getLatestDiagnosis(area.field[0]);\n}\n\ntype FieldState = 'hired_diagnosis_available' | 'hired_diagnosis_unavailable' | 'not_hired';\n\nexport function getFieldState(field: Models.field): FieldState {\n\tconst latestCrop = getLatestCrop(field);\n\tif (latestCrop?.is_diagnosis_hired) {\n\t\tconst latestDiagnosis = getLatestDiagnosis(field);\n\t\tif (latestDiagnosis) return 'hired_diagnosis_available';\n\t\treturn 'hired_diagnosis_unavailable';\n\t}\n\n\treturn 'not_hired';\n}\n\nexport function getPrescriptionStatus(latestDiagnosis: Models.diagnosis) {\n\tif (latestDiagnosis?.affected_area_ha === 0) return 'not-infested';\n\tif (latestDiagnosis?.prescription?.length === 0) return 'not-available';\n\tif (!latestDiagnosis?.prescription) return 'not-available';\n\treturn 'ok';\n}\n\nexport function getLatestPrescriptionPulverizationMethod(field: Models.field) {\n\tconst latestCrop = getLatestCrop(field);\n\t// console.log('aqui', latestCrop);\n\n\tlet pulverizationMethod: number = PulverizationMethods.NOT_AVAILABLE;\n\tif (latestCrop?.diagnosis[0]?.prescription[0]) pulverizationMethod = latestCrop.diagnosis[0].prescription[0].pulverization_method;\n\n\treturn pulverizationMethod;\n}\n\nexport function getAreaState(area: Models.area) {\n\tconst allStates = area.field.map((field) => getFieldState(field));\n\tif (allStates.some((state) => state === 'hired_diagnosis_available')) return 'hired_diagnosis_available';\n\tif (allStates.some((state) => state === 'hired_diagnosis_unavailable')) return 'hired_diagnosis_unavailable';\n\treturn 'not_hired';\n}\n\nexport function getFieldInfestationText(field: Models.field, card: boolean) {\n\tconst state = getFieldState(field);\n\tlet fieldInfestationPercentage = '';\n\tswitch (state) {\n\t\tcase 'hired_diagnosis_available':\n\t\t\tfieldInfestationPercentage = getFieldInfestationPercentage(field).toFixed(2);\n\t\t\treturn card ? `${fieldInfestationPercentage}%\\nInfestado` : `${fieldInfestationPercentage}%`;\n\n\t\tcase 'hired_diagnosis_unavailable':\n\t\t\treturn 'AGUARDANDO\\nDIAGNÓSTICO';\n\t\tcase 'not_hired':\n\t\t\treturn 'DIAGNÓSTICO\\nNÃO CONTRATADO';\n\t\tdefault:\n\t\t\tbreak;\n\t}\n}\n\nexport function getFieldProfileText(field: Models.field) {\n\tconst state = getFieldState(field);\n\tlet fieldInfestationPercentage = '';\n\tswitch (state) {\n\t\tcase 'hired_diagnosis_available':\n\t\t\tfieldInfestationPercentage = getFieldInfestationPercentage(field).toFixed(2);\n\t\t\treturn `${fieldInfestationPercentage}%\\n Infestado`;\n\n\t\tcase 'hired_diagnosis_unavailable':\n\t\t\treturn 'Aguardando\\nDiagnóstico';\n\t\tcase 'not_hired':\n\t\t\treturn 'Diagnóstico\\nNão Contratado';\n\t\tdefault:\n\t\t\tbreak;\n\t}\n}\n\nexport function getFieldInfestationPercentage(field: Models.field) {\n\tconst latestDiagnosis = getLatestDiagnosis(field)!;\n\treturn (latestDiagnosis.affected_area_ha / field.area_ha) * 100;\n}\n\nexport function getAreaAffectedAreaHA(area: Models.area) {\n\tif (area.field.every((field) => getLatestCrop(field)?.diagnosis.length === 0)) return null;\n\tconst allDiagnosisAffectedArea = area.field.map((field) => {\n\t\tconst latestDiagnosis = getLatestDiagnosis(field);\n\t\tif (latestDiagnosis) return latestDiagnosis.affected_area_ha;\n\t\treturn 0;\n\t});\n\t// eslint-disable-next-line unicorn/no-reduce\n\treturn allDiagnosisAffectedArea.reduce((x, y) => x + y, 0);\n}\n\nexport function getAllFieldsAreaHA(area: Models.area) {\n\tconst allFieldsAreas = area.field.map((field) => field.area_ha);\n\t// eslint-disable-next-line unicorn/no-reduce\n\treturn allFieldsAreas.reduce((x, y) => x + y, 0);\n}\n\nexport function getFieldAffectedAreaHA(field: Models.field) {\n\tconst latestDiagnosis = getLatestDiagnosis(field);\n\tif (!latestDiagnosis) return null;\n\treturn latestDiagnosis.affected_area_ha;\n}\n\nexport const REM_SCALE = Dimensions.get('window').width / 390;\n\nconst onLaytoutTimeout = 900;\nconst afterScrollToEndTimeout = 900;\nexport function scrollToEndAndBack(ref: any, type: 'scrollview' | 'flatlist') {\n\tif (type === 'flatlist') {\n\t\tsetTimeout(function () {\n\t\t\tref.current?.scrollToEnd();\n\t\t\tsetTimeout(function () {\n\t\t\t\tref.current?.scrollToIndex({ animated: true, index: 0 });\n\t\t\t}, afterScrollToEndTimeout);\n\t\t}, onLaytoutTimeout);\n\t} else {\n\t\tsetTimeout(function () {\n\t\t\tref.current?.scrollToEnd();\n\t\t\tsetTimeout(function () {\n\t\t\t\tref.current?.scrollTo({ animated: true, y: 0, x: 0 });\n\t\t\t}, afterScrollToEndTimeout);\n\t\t}, onLaytoutTimeout);\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}