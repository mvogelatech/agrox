{"ast":null,"code":"import _taggedTemplateLiteralLoose from \"@babel/runtime/helpers/taggedTemplateLiteralLoose\";\n\nvar _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6;\n\nimport chalk from \"./chalk\";\nimport { prependBluePipes } from \"./prepend-blue-pipes\";\nimport { toLoggableString } from \"./to-loggable-string\";\nexport function logToString(log, count, detailed) {\n  var title = chalk(_templateObject || (_templateObject = _taggedTemplateLiteralLoose([\"{blue #} {cyan [\", \"] Action: \", \"}\"])), log.id.toString().padStart(3, '0'), log.action.type);\n\n  if (!detailed) {\n    return title;\n  }\n\n  var prevStateString = toLoggableString(log.prevState);\n  var nextStateString = toLoggableString(log.nextState);\n\n  if (count > 1) {\n    title += chalk.magenta(\" (\" + count + \"x)\");\n  }\n\n  var at = prependBluePipes(chalk(_templateObject2 || (_templateObject2 = _taggedTemplateLiteralLoose([\"{cyan At:} {grey \", \"}\"])), log.date.toString()));\n  var action = prependBluePipes(chalk(_templateObject3 || (_templateObject3 = _taggedTemplateLiteralLoose([\"{cyan Action:} {grey \", \"}\"])), toLoggableString(log.action)));\n\n  if (prevStateString === nextStateString) {\n    return [title, at, action, prependBluePipes(chalk(_templateObject4 || (_templateObject4 = _taggedTemplateLiteralLoose([\"{cyan State (unchanged):} {grey \", \"}\"])), prevStateString))].join('\\n');\n  }\n\n  return [title, at, prependBluePipes(chalk(_templateObject5 || (_templateObject5 = _taggedTemplateLiteralLoose([\"{cyan Prev state:} {grey \", \"}\"])), prevStateString)), action, prependBluePipes(chalk(_templateObject6 || (_templateObject6 = _taggedTemplateLiteralLoose([\"{cyan Next state:} {grey \", \"}\"])), nextStateString))].join('\\n');\n}","map":{"version":3,"sources":["/home/jmgoncalves/git/agro-x/frontend/redux-things/custom-logger-middleware/log.ts"],"names":["chalk","prependBluePipes","toLoggableString","logToString","log","count","detailed","title","id","toString","padStart","action","type","prevStateString","prevState","nextStateString","nextState","magenta","at","date","join"],"mappings":";;;;AAEA,OAAOA,KAAP;AACA,SAASC,gBAAT;AACA,SAASC,gBAAT;AAUA,OAAO,SAASC,WAAT,CAAqBC,GAArB,EAA+BC,KAA/B,EAA8CC,QAA9C,EAAyE;AAC/E,MAAIC,KAAK,GAAGP,KAAH,8GAA2BI,GAAG,CAACI,EAAJ,CAAOC,QAAP,GAAkBC,QAAlB,CAA2B,CAA3B,EAA8B,GAA9B,CAA3B,EAA0EN,GAAG,CAACO,MAAJ,CAAWC,IAArF,CAAT;;AAEA,MAAI,CAACN,QAAL,EAAe;AACd,WAAOC,KAAP;AACA;;AAED,MAAMM,eAAe,GAAGX,gBAAgB,CAACE,GAAG,CAACU,SAAL,CAAxC;AACA,MAAMC,eAAe,GAAGb,gBAAgB,CAACE,GAAG,CAACY,SAAL,CAAxC;;AAEA,MAAIX,KAAK,GAAG,CAAZ,EAAe;AACdE,IAAAA,KAAK,IAAIP,KAAK,CAACiB,OAAN,QAAmBZ,KAAnB,QAAT;AACA;;AAED,MAAMa,EAAE,GAAGjB,gBAAgB,CAACD,KAAD,mGAA0BI,GAAG,CAACe,IAAJ,CAASV,QAAT,EAA1B,EAA3B;AACA,MAAME,MAAM,GAAGV,gBAAgB,CAACD,KAAD,uGAA8BE,gBAAgB,CAACE,GAAG,CAACO,MAAL,CAA9C,EAA/B;;AAEA,MAAIE,eAAe,KAAKE,eAAxB,EAAyC;AACxC,WAAO,CAACR,KAAD,EAAQW,EAAR,EAAYP,MAAZ,EAAoBV,gBAAgB,CAACD,KAAD,kHAAyCa,eAAzC,EAApC,EAAkGO,IAAlG,CAAuG,IAAvG,CAAP;AACA;;AAED,SAAO,CACNb,KADM,EAENW,EAFM,EAGNjB,gBAAgB,CAACD,KAAD,2GAAkCa,eAAlC,EAHV,EAINF,MAJM,EAKNV,gBAAgB,CAACD,KAAD,2GAAkCe,eAAlC,EALV,EAMLK,IANK,CAMA,IANA,CAAP;AAOA","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport chalk from './chalk';\nimport { prependBluePipes } from './prepend-blue-pipes';\nimport { toLoggableString } from './to-loggable-string';\n\nexport type Log = {\n\tid: number;\n\tprevState: any;\n\taction: any;\n\tnextState: any;\n\tdate: Date;\n};\n\nexport function logToString(log: Log, count: number, detailed: boolean): string {\n\tlet title = chalk`{blue #} {cyan [${log.id.toString().padStart(3, '0')}] Action: ${log.action.type}}`;\n\n\tif (!detailed) {\n\t\treturn title;\n\t}\n\n\tconst prevStateString = toLoggableString(log.prevState);\n\tconst nextStateString = toLoggableString(log.nextState);\n\n\tif (count > 1) {\n\t\ttitle += chalk.magenta(` (${count}x)`);\n\t}\n\n\tconst at = prependBluePipes(chalk`{cyan At:} {grey ${log.date.toString()}}`);\n\tconst action = prependBluePipes(chalk`{cyan Action:} {grey ${toLoggableString(log.action)}}`);\n\n\tif (prevStateString === nextStateString) {\n\t\treturn [title, at, action, prependBluePipes(chalk`{cyan State (unchanged):} {grey ${prevStateString}}`)].join('\\n');\n\t}\n\n\treturn [\n\t\ttitle,\n\t\tat,\n\t\tprependBluePipes(chalk`{cyan Prev state:} {grey ${prevStateString}}`),\n\t\taction,\n\t\tprependBluePipes(chalk`{cyan Next state:} {grey ${nextStateString}}`),\n\t].join('\\n');\n}\n"]},"metadata":{},"sourceType":"module"}