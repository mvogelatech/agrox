{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport resolvePath from 'object-resolve-path';\nvar PREFIX = '$';\nexport default {\n  isVar: isVar,\n  calc: calc,\n  extract: extract,\n  get: get\n};\n\nfunction isVar(str) {\n  return typeof str === 'string' && str.charAt(0) === PREFIX;\n}\n\nfunction calc(str, varsArr) {\n  var realValue = get(str, varsArr);\n\n  if (realValue === undefined) {\n    throw new Error(\"Unresolved variable: \" + str);\n  }\n\n  return realValue;\n}\n\nfunction extract(obj) {\n  return Object.keys(obj).reduce(function (res, key) {\n    if (isVar(key)) {\n      res = res || {};\n      res[key] = obj[key];\n    }\n\n    return res;\n  }, null);\n}\n\nfunction get(name, varsArr) {\n  if (!Array.isArray(varsArr)) {\n    throw new Error('You should pass vars array to vars.get()');\n  }\n\n  var rootVar = name.match(/[^.[]*/)[0];\n  var isSimpleVar = rootVar === name;\n\n  for (var i = 0; i < varsArr.length; i++) {\n    var vars = varsArr[i];\n\n    if (!vars || vars[rootVar] === undefined) {\n      continue;\n    }\n\n    if (isSimpleVar) {\n      return vars[name];\n    }\n\n    try {\n      return resolvePath(_defineProperty({}, rootVar, vars[rootVar]), name);\n    } catch (error) {\n      return undefined;\n    }\n  }\n}","map":{"version":3,"sources":["/home/jmgoncalves/git/agro-x/frontend/node_modules/react-native-extended-stylesheet/src/replacers/vars.js"],"names":["resolvePath","PREFIX","isVar","calc","extract","get","str","charAt","varsArr","realValue","undefined","Error","obj","Object","keys","reduce","res","key","name","Array","isArray","rootVar","match","isSimpleVar","i","length","vars","error"],"mappings":";AAIA,OAAOA,WAAP,MAAwB,qBAAxB;AAEA,IAAMC,MAAM,GAAG,GAAf;AAEA,eAAe;AACbC,EAAAA,KAAK,EAALA,KADa;AAEbC,EAAAA,IAAI,EAAJA,IAFa;AAGbC,EAAAA,OAAO,EAAPA,OAHa;AAIbC,EAAAA,GAAG,EAAHA;AAJa,CAAf;;AAWA,SAASH,KAAT,CAAeI,GAAf,EAAoB;AAClB,SAAO,OAAOA,GAAP,KAAe,QAAf,IAA2BA,GAAG,CAACC,MAAJ,CAAW,CAAX,MAAkBN,MAApD;AACD;;AAOD,SAASE,IAAT,CAAcG,GAAd,EAAmBE,OAAnB,EAA4B;AAC1B,MAAIC,SAAS,GAAGJ,GAAG,CAACC,GAAD,EAAME,OAAN,CAAnB;;AACA,MAAIC,SAAS,KAAKC,SAAlB,EAA6B;AAC3B,UAAM,IAAIC,KAAJ,2BAAkCL,GAAlC,CAAN;AACD;;AACD,SAAOG,SAAP;AACD;;AAOD,SAASL,OAAT,CAAiBQ,GAAjB,EAAsB;AACpB,SAAOC,MAAM,CAACC,IAAP,CAAYF,GAAZ,EAAiBG,MAAjB,CAAwB,UAACC,GAAD,EAAMC,GAAN,EAAc;AAC3C,QAAIf,KAAK,CAACe,GAAD,CAAT,EAAgB;AACdD,MAAAA,GAAG,GAAGA,GAAG,IAAI,EAAb;AACAA,MAAAA,GAAG,CAACC,GAAD,CAAH,GAAWL,GAAG,CAACK,GAAD,CAAd;AACD;;AACD,WAAOD,GAAP;AACD,GANM,EAMJ,IANI,CAAP;AAOD;;AAOD,SAASX,GAAT,CAAaa,IAAb,EAAmBV,OAAnB,EAA4B;AAC1B,MAAI,CAACW,KAAK,CAACC,OAAN,CAAcZ,OAAd,CAAL,EAA6B;AAC3B,UAAM,IAAIG,KAAJ,CAAU,0CAAV,CAAN;AACD;;AAED,MAAMU,OAAO,GAAGH,IAAI,CAACI,KAAL,CAAW,QAAX,EAAqB,CAArB,CAAhB;AACA,MAAMC,WAAW,GAAGF,OAAO,KAAKH,IAAhC;;AAGA,OAAK,IAAIM,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGhB,OAAO,CAACiB,MAA5B,EAAoCD,CAAC,EAArC,EAAyC;AACvC,QAAIE,IAAI,GAAGlB,OAAO,CAACgB,CAAD,CAAlB;;AACA,QAAI,CAACE,IAAD,IAASA,IAAI,CAACL,OAAD,CAAJ,KAAkBX,SAA/B,EAA0C;AACxC;AACD;;AACD,QAAIa,WAAJ,EAAiB;AACf,aAAOG,IAAI,CAACR,IAAD,CAAX;AACD;;AACD,QAAI;AACF,aAAOlB,WAAW,qBAAGqB,OAAH,EAAaK,IAAI,CAACL,OAAD,CAAjB,GAA6BH,IAA7B,CAAlB;AACD,KAFD,CAEE,OAAOS,KAAP,EAAc;AACd,aAAOjB,SAAP;AACD;AACF;AACF","sourcesContent":["/**\n * Variables\n */\n\nimport resolvePath from 'object-resolve-path';\n\nconst PREFIX = '$';\n\nexport default {\n  isVar,\n  calc,\n  extract,\n  get,\n};\n\n/**\n * Is string equals to another variable: '$varName'\n * @param {String} str\n */\nfunction isVar(str) {\n  return typeof str === 'string' && str.charAt(0) === PREFIX;\n}\n\n/**\n * Replace var with value from vars arr.\n * @param {String} str variable name with $, e.g. '$color'\n * @param {Array<Object>} varsArr array of variable sets to search into.\n */\nfunction calc(str, varsArr) {\n  let realValue = get(str, varsArr);\n  if (realValue === undefined) {\n    throw new Error(`Unresolved variable: ${str}`);\n  }\n  return realValue;\n}\n\n/**\n * Extract variables from mixed object\n * @param {Object} obj\n * @returns {null|Object}\n */\nfunction extract(obj) {\n  return Object.keys(obj).reduce((res, key) => {\n    if (isVar(key)) {\n      res = res || {};\n      res[key] = obj[key];\n    }\n    return res;\n  }, null);\n}\n\n/**\n * Return variable value using provided array of variable sets\n * @param {String} name variable with $, e.g. '$myVar'\n * @param {Array} varsArr array of variable sets\n */\nfunction get(name, varsArr) {\n  if (!Array.isArray(varsArr)) {\n    throw new Error('You should pass vars array to vars.get()');\n  }\n\n  const rootVar = name.match(/[^.[]*/)[0];\n  const isSimpleVar = rootVar === name;\n\n  // todo: use for.. of after https://github.com/facebook/react-native/issues/4676\n  for (let i = 0; i < varsArr.length; i++) {\n    let vars = varsArr[i];\n    if (!vars || vars[rootVar] === undefined) {\n      continue;\n    }\n    if (isSimpleVar) {\n      return vars[name];\n    }\n    try {\n      return resolvePath({[rootVar]: vars[rootVar]}, name);\n    } catch (error) {\n      return undefined;\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}