{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { createReducer } from \"../../../tree-building-helpers\";\nexport { State, Actions } from \"./state-and-actions\";\nvar reducer = createReducer({\n  currentCard: 'General'\n}, {\n  CHANGE_INFESTATION_CARD: function CHANGE_INFESTATION_CARD(prevState, action) {\n    return _objectSpread(_objectSpread({}, prevState), {}, {\n      currentCard: action.card\n    });\n  }\n});\nexport default reducer;","map":{"version":3,"sources":["/home/jmgoncalves/git/agro-x/frontend/redux-things/tree/tree-data/interaction-data/infestation/index.ts"],"names":["createReducer","State","Actions","reducer","currentCard","CHANGE_INFESTATION_CARD","prevState","action","card"],"mappings":";;;;;;AAAA,SAASA,aAAT;AAEA,SAASC,KAAT,EAAgBC,OAAhB;AAEA,IAAMC,OAAO,GAAGH,aAAa,CAC5B;AACCI,EAAAA,WAAW,EAAE;AADd,CAD4B,EAI5B;AACCC,EAAAA,uBADD,mCACyBC,SADzB,EACoCC,MADpC,EAC4C;AAC1C,2CACID,SADJ;AAECF,MAAAA,WAAW,EAAEG,MAAM,CAACC;AAFrB;AAIA;AANF,CAJ4B,CAA7B;AAcA,eAAeL,OAAf","sourcesContent":["import { createReducer } from '../../../tree-building-helpers';\nimport { State, Actions } from './state-and-actions';\nexport { State, Actions } from './state-and-actions';\n\nconst reducer = createReducer<State, Actions>(\n\t{\n\t\tcurrentCard: 'General',\n\t},\n\t{\n\t\tCHANGE_INFESTATION_CARD(prevState, action) {\n\t\t\treturn {\n\t\t\t\t...prevState,\n\t\t\t\tcurrentCard: action.card,\n\t\t\t};\n\t\t},\n\t},\n);\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}