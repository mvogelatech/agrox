{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport vars from \"./replacers/vars\";\nimport mediaQueries from \"./replacers/media-queries\";\nimport Value from \"./value\";\nimport utils from \"./utils\";\n\nvar _default = function () {\n  function _default(source) {\n    var varsArr = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n    _classCallCheck(this, _default);\n\n    this.source = source;\n    this.varsArr = varsArr;\n    this.processedSource = null;\n    this.extractedVars = null;\n    this.extractedProps = null;\n    this.calculatedVars = null;\n    this.calculatedProps = null;\n  }\n\n  _createClass(_default, [{\n    key: \"calc\",\n    value: function calc() {\n      this.processSource();\n      this.calcVars();\n      this.calcProps();\n      this.tryOutline();\n      return {\n        calculatedVars: this.calculatedVars,\n        calculatedProps: this.calculatedProps\n      };\n    }\n  }, {\n    key: \"processSource\",\n    value: function processSource() {\n      this.processedSource = mediaQueries.process(this.source);\n    }\n  }, {\n    key: \"calcVars\",\n    value: function calcVars() {\n      this.extractedVars = vars.extract(this.processedSource);\n\n      if (this.extractedVars) {\n        var varsArrForVars = [this.extractedVars].concat(this.varsArr);\n        this.calculatedVars = calcPlainObject(this.extractedVars, varsArrForVars);\n        this.varsArr = [this.calculatedVars].concat(this.varsArr);\n      }\n    }\n  }, {\n    key: \"calcProps\",\n    value: function calcProps() {\n      this.extractedProps = utils.excludeKeys(this.processedSource, this.extractedVars);\n      this.calculatedProps = calcPlainObject(this.extractedProps, this.varsArr);\n    }\n  }, {\n    key: \"tryOutline\",\n    value: function tryOutline() {\n      var outline = vars.get('$outline', this.varsArr);\n\n      if (outline) {\n        this.calculatedProps.borderWidth = typeof outline === 'number' ? outline : 1;\n        this.calculatedProps.borderColor = getRandomColor();\n      }\n    }\n  }]);\n\n  return _default;\n}();\n\nexport { _default as default };\n\nfunction calcPlainObject(obj, varsArr) {\n  return Object.keys(obj).reduce(function (res, prop) {\n    res[prop] = calcStyleValue(prop, obj[prop], varsArr);\n    return res;\n  }, {});\n}\n\nfunction calcStyleValue(prop, value, varsArr) {\n  var isNestedValue = value && typeof value === 'object' && !Array.isArray(value);\n  return isNestedValue ? calcPlainObject(value, varsArr) : new Value(value, prop, varsArr).calc();\n}\n\nfunction getRandomColor() {\n  var colors = ['black', 'red', 'green', 'blue'];\n  var index = Math.round(Math.random() * (colors.length - 1));\n  return colors[index];\n}","map":{"version":3,"sources":["/home/jmgoncalves/git/agro-x/frontend/node_modules/react-native-extended-stylesheet/src/style.js"],"names":["vars","mediaQueries","Value","utils","source","varsArr","processedSource","extractedVars","extractedProps","calculatedVars","calculatedProps","processSource","calcVars","calcProps","tryOutline","process","extract","varsArrForVars","concat","calcPlainObject","excludeKeys","outline","get","borderWidth","borderColor","getRandomColor","obj","Object","keys","reduce","res","prop","calcStyleValue","value","isNestedValue","Array","isArray","calc","colors","index","Math","round","random","length"],"mappings":"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","sourcesContent":["/**\n * Style\n */\n\nimport vars from './replacers/vars';\nimport mediaQueries from './replacers/media-queries';\nimport Value from './value';\nimport utils from './utils';\n\nexport default class {\n  /**\n   * Constructor\n   * @param {Object} source plain object style with variables\n   * @param {Array} [varsArr] array of vars objects\n   */\n  constructor(source, varsArr = []) {\n    this.source = source;\n    this.varsArr = varsArr;\n    this.processedSource = null;\n    this.extractedVars = null;\n    this.extractedProps = null;\n    this.calculatedVars = null;\n    this.calculatedProps = null;\n  }\n\n  /**\n   * Calculates style\n   * @returns {Object}\n   */\n  calc() {\n    this.processSource();\n    this.calcVars();\n    this.calcProps();\n    this.tryOutline();\n    return {\n      calculatedVars: this.calculatedVars,\n      calculatedProps: this.calculatedProps,\n    };\n  }\n\n  processSource() {\n    this.processedSource = mediaQueries.process(this.source);\n  }\n\n  calcVars() {\n    this.extractedVars = vars.extract(this.processedSource);\n    if (this.extractedVars) {\n      const varsArrForVars = [this.extractedVars].concat(this.varsArr);\n      this.calculatedVars = calcPlainObject(this.extractedVars, varsArrForVars);\n      this.varsArr = [this.calculatedVars].concat(this.varsArr);\n    }\n  }\n\n  calcProps() {\n    this.extractedProps = utils.excludeKeys(this.processedSource, this.extractedVars);\n    this.calculatedProps = calcPlainObject(this.extractedProps, this.varsArr);\n  }\n\n  tryOutline() {\n    let outline = vars.get('$outline', this.varsArr);\n    if (outline) {\n      this.calculatedProps.borderWidth = typeof outline === 'number' ? outline : 1;\n      this.calculatedProps.borderColor = getRandomColor();\n    }\n  }\n\n}\n\n/**\n * Calculates values in plain object\n *\n * @param {Object} obj\n * @param {Array} varsArr\n * @returns {Object}\n */\nfunction calcPlainObject(obj, varsArr) {\n  return Object.keys(obj).reduce((res, prop) => {\n    res[prop] = calcStyleValue(prop, obj[prop], varsArr);\n    return res;\n  }, {});\n}\n\n/**\n * Calculates single value\n * @param {String} prop\n * @param {*} value\n * @param {Array} varsArr\n */\nfunction calcStyleValue(prop, value, varsArr) {\n  const isNestedValue = value && typeof value === 'object' && !Array.isArray(value);\n  return isNestedValue\n    ? calcPlainObject(value, varsArr)\n    : new Value(value, prop, varsArr).calc();\n}\n\n/**\n * Returns random color (needed for outline)\n * @returns {String}\n */\nfunction getRandomColor() {\n  let colors = [\n    'black',\n    'red',\n    'green',\n    'blue',\n  ];\n  let index = Math.round(Math.random() * (colors.length - 1));\n  return colors[index];\n}\n"]},"metadata":{},"sourceType":"module"}