{"ast":null,"code":"var _jsxFileName = \"/home/jmgoncalves/git/agro-x/frontend/components/02-general/bottom-cards/all-fields/all-fields.tsx\";\nimport React, { useRef } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { MaterialIcons } from '@expo/vector-icons';\nimport { Divider } from 'react-native-paper';\nimport { createTStyleSheet } from \"../../../../src/utils/style\";\nimport { dispatch, useMainSelector } from \"../../../../redux-things\";\nimport { FieldCard } from \"../../../00-common/field-card\";\nimport { CardTitle } from \"../../../00-common/card-title\";\nimport { getAreaState, getFieldState, scrollToEndAndBack } from \"../../../../src/utils\";\nimport { fieldNotHired, areaNotHired, areaHiredUnavailable, displayAlert, fieldIndexNotAvailable } from \"../../../../src/utils/alert-messages\";\nimport { isAnyIndexAvailableForArea, isIndexAvailable } from \"../../../../src/utils/visiona-indices\";\nimport { useNavigation } from '@react-navigation/native';\nexport function AllFields() {\n  var _this = this;\n\n  var navigation = useNavigation();\n  var flatListRef = useRef(null);\n  var tab = useMainSelector(function (state) {\n    return state.interactionData.general.currentTab;\n  });\n  var area = useMainSelector(function (state) {\n    return state.interactionData.general.currentArea;\n  });\n  var field = useMainSelector(function (state) {\n    return state.interactionData.general.currentField;\n  });\n  var fields = area.field;\n\n  function compare(a, b) {\n    if (a.code > b.code) return 1;\n    if (b.code > a.code) return -1;\n    return 0;\n  }\n\n  return React.createElement(View, {\n    style: styles.mainView,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 3\n    }\n  }, React.createElement(CardTitle, {\n    text: \"Talh\\xF5es\",\n    titleIcon: \"location\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 4\n    }\n  }), React.createElement(View, {\n    style: styles.listView,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 4\n    }\n  }, React.createElement(FlatList, {\n    ref: flatListRef,\n    horizontal: true,\n    data: fields.slice().sort(compare),\n    renderItem: function renderItem(_ref) {\n      var field = _ref.item;\n      return React.createElement(FieldCard, {\n        isElevated: true,\n        isDiagnosisMode: tab === 'Diagnosis',\n        customStyle: {\n          marginTop: '1rem',\n          marginBottom: '28rem'\n        },\n        field: field,\n        isIndexNotAvailable: tab === 'Indices' && !isIndexAvailable(field),\n        onFieldPress: function onFieldPress() {\n          var fieldState = getFieldState(field);\n          dispatch({\n            type: 'CHANGE_FIELD',\n            field: field\n          });\n          if (tab === 'Diagnosis' && fieldState === 'hired_diagnosis_unavailable') return navigation.navigate('HireDiagnostic');\n          if (tab === 'Diagnosis' && fieldState === 'not_hired') return displayAlert(fieldNotHired);\n          if (tab === 'Indices' && !isIndexAvailable(field)) return displayAlert(fieldIndexNotAvailable);\n          dispatch({\n            type: 'CHANGE_GENERAL_CARD',\n            card: 'Profile'\n          });\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 7\n        }\n      });\n    },\n    keyExtractor: function keyExtractor(item) {\n      return item.id.toString();\n    },\n    style: {\n      flexGrow: 0,\n      alignSelf: 'center'\n    },\n    contentContainerStyle: {\n      paddingHorizontal: 16\n    },\n    onLayout: function onLayout() {\n      return scrollToEndAndBack(flatListRef, 'flatlist');\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }\n  })), React.createElement(Divider, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 4\n    }\n  }), React.createElement(TouchableOpacity, {\n    style: styles.buttonView,\n    onPress: function onPress() {\n      var areaState = getAreaState(area);\n      var areaIndexAvailable = isAnyIndexAvailableForArea(area);\n      if (tab === 'Diagnosis' && areaState === 'not_hired') return displayAlert(areaNotHired);\n      if (tab === 'Indices' && !areaIndexAvailable) return displayAlert(fieldIndexNotAvailable);\n      dispatch({\n        type: 'CHANGE_GENERAL_CARD',\n        card: 'Details'\n      });\n      if (tab === 'Diagnosis' && areaState === 'hired_diagnosis_unavailable') return displayAlert(areaHiredUnavailable);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 4\n    }\n  }, React.createElement(Text, {\n    style: styles.buttonViewText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 5\n    }\n  }, \"Ver Detalhes\"), React.createElement(MaterialIcons, {\n    name: \"keyboard-arrow-up\",\n    color: \"#6C6464\",\n    style: styles.buttonViewIcon,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 5\n    }\n  })));\n}\nvar styles = createTStyleSheet({\n  mainView: {\n    flexDirection: 'column',\n    alignItems: 'stretch',\n    justifyContent: 'flex-end',\n    backgroundColor: 'white'\n  },\n  listView: {\n    height: '130rem'\n  },\n  buttonView: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    height: '55rem',\n    paddingBottom: '8rem'\n  },\n  buttonViewText: {\n    fontWeight: 'normal',\n    color: '#6C6464',\n    fontSize: '16rem'\n  },\n  buttonViewIcon: {\n    paddingTop: '4rem',\n    paddingHorizontal: '8rem',\n    fontSize: '20rem'\n  }\n});","map":{"version":3,"sources":["/home/jmgoncalves/git/agro-x/frontend/components/02-general/bottom-cards/all-fields/all-fields.tsx"],"names":["React","useRef","MaterialIcons","Divider","createTStyleSheet","dispatch","useMainSelector","FieldCard","CardTitle","getAreaState","getFieldState","scrollToEndAndBack","fieldNotHired","areaNotHired","areaHiredUnavailable","displayAlert","fieldIndexNotAvailable","isAnyIndexAvailableForArea","isIndexAvailable","useNavigation","AllFields","navigation","flatListRef","tab","state","interactionData","general","currentTab","area","currentArea","field","currentField","fields","compare","a","b","code","styles","mainView","listView","slice","sort","item","marginTop","marginBottom","fieldState","type","navigate","card","id","toString","flexGrow","alignSelf","paddingHorizontal","buttonView","areaState","areaIndexAvailable","buttonViewText","buttonViewIcon","flexDirection","alignItems","justifyContent","backgroundColor","height","paddingBottom","fontWeight","color","fontSize","paddingTop"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,MAAhB,QAA8B,OAA9B;;;;;AAEA,SAASC,aAAT,QAA8B,oBAA9B;AACA,SAASC,OAAT,QAAwB,oBAAxB;AACA,SAASC,iBAAT;AAEA,SAASC,QAAT,EAAmBC,eAAnB;AAEA,SAASC,SAAT;AACA,SAASC,SAAT;AACA,SAASC,YAAT,EAAuBC,aAAvB,EAAsCC,kBAAtC;AACA,SAASC,aAAT,EAAwBC,YAAxB,EAAsCC,oBAAtC,EAA4DC,YAA5D,EAA0EC,sBAA1E;AAEA,SAASC,0BAAT,EAAqCC,gBAArC;AACA,SAASC,aAAT,QAA8B,0BAA9B;AAEA,OAAO,SAASC,SAAT,GAAqB;AAAA;;AAC3B,MAAMC,UAAU,GAAGF,aAAa,EAAhC;AAEA,MAAMG,WAAW,GAAGrB,MAAM,CAAW,IAAX,CAA1B;AAEA,MAAMsB,GAAG,GAAGjB,eAAe,CAAC,UAACkB,KAAD;AAAA,WAAWA,KAAK,CAACC,eAAN,CAAsBC,OAAtB,CAA8BC,UAAzC;AAAA,GAAD,CAA3B;AACA,MAAMC,IAAI,GAAGtB,eAAe,CAAC,UAACkB,KAAD;AAAA,WAAWA,KAAK,CAACC,eAAN,CAAsBC,OAAtB,CAA8BG,WAAzC;AAAA,GAAD,CAA5B;AACA,MAAMC,KAAK,GAAGxB,eAAe,CAAC,UAACkB,KAAD;AAAA,WAAWA,KAAK,CAACC,eAAN,CAAsBC,OAAtB,CAA8BK,YAAzC;AAAA,GAAD,CAA7B;AAEA,MAAMC,MAAM,GAAGJ,IAAI,CAACE,KAApB;;AAEA,WAASG,OAAT,CAAiBC,CAAjB,EAAkCC,CAAlC,EAAmD;AAClD,QAAID,CAAC,CAACE,IAAF,GAASD,CAAC,CAACC,IAAf,EAAqB,OAAO,CAAP;AACrB,QAAID,CAAC,CAACC,IAAF,GAASF,CAAC,CAACE,IAAf,EAAqB,OAAO,CAAC,CAAR;AACrB,WAAO,CAAP;AACA;;AAED,SACC,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEC,MAAM,CAACC,QAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC,oBAAC,SAAD;AAAW,IAAA,IAAI,EAAC,YAAhB;AAA0B,IAAA,SAAS,EAAC,UAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,EAGC,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAED,MAAM,CAACE,QAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC,oBAAC,QAAD;AACC,IAAA,GAAG,EAAEjB,WADN;AAEC,IAAA,UAAU,MAFX;AAGC,IAAA,IAAI,EAAEU,MAAM,CAACQ,KAAP,GAAeC,IAAf,CAAoBR,OAApB,CAHP;AAIC,IAAA,UAAU,EAAE;AAAA,UAASH,KAAT,QAAGY,IAAH;AAAA,aACX,oBAAC,SAAD;AACC,QAAA,UAAU,MADX;AAEC,QAAA,eAAe,EAAEnB,GAAG,KAAK,WAF1B;AAGC,QAAA,WAAW,EAAE;AAAEoB,UAAAA,SAAS,EAAE,MAAb;AAAqBC,UAAAA,YAAY,EAAE;AAAnC,SAHd;AAIC,QAAA,KAAK,EAAEd,KAJR;AAKC,QAAA,mBAAmB,EAAEP,GAAG,KAAK,SAAR,IAAqB,CAACL,gBAAgB,CAACY,KAAD,CAL5D;AAMC,QAAA,YAAY,EAAE,wBAAM;AACnB,cAAMe,UAAU,GAAGnC,aAAa,CAACoB,KAAD,CAAhC;AACAzB,UAAAA,QAAQ,CAAC;AAAEyC,YAAAA,IAAI,EAAE,cAAR;AAAwBhB,YAAAA,KAAK,EAALA;AAAxB,WAAD,CAAR;AACA,cAAIP,GAAG,KAAK,WAAR,IAAuBsB,UAAU,KAAK,6BAA1C,EAAyE,OAAOxB,UAAU,CAAC0B,QAAX,CAAoB,gBAApB,CAAP;AACzE,cAAIxB,GAAG,KAAK,WAAR,IAAuBsB,UAAU,KAAK,WAA1C,EAAuD,OAAO9B,YAAY,CAACH,aAAD,CAAnB;AACvD,cAAIW,GAAG,KAAK,SAAR,IAAqB,CAACL,gBAAgB,CAACY,KAAD,CAA1C,EAAmD,OAAOf,YAAY,CAACC,sBAAD,CAAnB;AACnDX,UAAAA,QAAQ,CAAC;AAAEyC,YAAAA,IAAI,EAAE,qBAAR;AAA+BE,YAAAA,IAAI,EAAE;AAArC,WAAD,CAAR;AACA,SAbF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADW;AAAA,KAJb;AAqBC,IAAA,YAAY,EAAE,sBAACN,IAAD;AAAA,aAAUA,IAAI,CAACO,EAAL,CAAQC,QAAR,EAAV;AAAA,KArBf;AAsBC,IAAA,KAAK,EAAE;AAAEC,MAAAA,QAAQ,EAAE,CAAZ;AAAeC,MAAAA,SAAS,EAAE;AAA1B,KAtBR;AAuBC,IAAA,qBAAqB,EAAE;AAAEC,MAAAA,iBAAiB,EAAE;AAArB,KAvBxB;AAwBC,IAAA,QAAQ,EAAE;AAAA,aAAM1C,kBAAkB,CAACW,WAAD,EAAc,UAAd,CAAxB;AAAA,KAxBX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADD,CAHD,EA+BC,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA/BD,EAgCC,oBAAC,gBAAD;AACC,IAAA,KAAK,EAAEe,MAAM,CAACiB,UADf;AAEC,IAAA,OAAO,EAAE,mBAAM;AACd,UAAMC,SAAS,GAAG9C,YAAY,CAACmB,IAAD,CAA9B;AACA,UAAM4B,kBAAkB,GAAGvC,0BAA0B,CAACW,IAAD,CAArD;AACA,UAAIL,GAAG,KAAK,WAAR,IAAuBgC,SAAS,KAAK,WAAzC,EAAsD,OAAOxC,YAAY,CAACF,YAAD,CAAnB;AACtD,UAAIU,GAAG,KAAK,SAAR,IAAqB,CAACiC,kBAA1B,EAA8C,OAAOzC,YAAY,CAACC,sBAAD,CAAnB;AAC9CX,MAAAA,QAAQ,CAAC;AAAEyC,QAAAA,IAAI,EAAE,qBAAR;AAA+BE,QAAAA,IAAI,EAAE;AAArC,OAAD,CAAR;AACA,UAAIzB,GAAG,KAAK,WAAR,IAAuBgC,SAAS,KAAK,6BAAzC,EAAwE,OAAOxC,YAAY,CAACD,oBAAD,CAAnB;AACxE,KATF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAWC,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEuB,MAAM,CAACoB,cAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAXD,EAYC,oBAAC,aAAD;AAAe,IAAA,IAAI,EAAC,mBAApB;AAAwC,IAAA,KAAK,EAAC,SAA9C;AAAwD,IAAA,KAAK,EAAEpB,MAAM,CAACqB,cAAtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAZD,CAhCD,CADD;AAiDA;AAED,IAAMrB,MAAM,GAAGjC,iBAAiB,CAAC;AAChCkC,EAAAA,QAAQ,EAAE;AACTqB,IAAAA,aAAa,EAAE,QADN;AAETC,IAAAA,UAAU,EAAE,SAFH;AAGTC,IAAAA,cAAc,EAAE,UAHP;AAITC,IAAAA,eAAe,EAAE;AAJR,GADsB;AAOhCvB,EAAAA,QAAQ,EAAE;AACTwB,IAAAA,MAAM,EAAE;AADC,GAPsB;AAUhCT,EAAAA,UAAU,EAAE;AACXK,IAAAA,aAAa,EAAE,KADJ;AAEXC,IAAAA,UAAU,EAAE,QAFD;AAGXC,IAAAA,cAAc,EAAE,QAHL;AAIXE,IAAAA,MAAM,EAAE,OAJG;AAKXC,IAAAA,aAAa,EAAE;AALJ,GAVoB;AAiBhCP,EAAAA,cAAc,EAAE;AACfQ,IAAAA,UAAU,EAAE,QADG;AAEfC,IAAAA,KAAK,EAAE,SAFQ;AAGfC,IAAAA,QAAQ,EAAE;AAHK,GAjBgB;AAsBhCT,EAAAA,cAAc,EAAE;AACfU,IAAAA,UAAU,EAAE,MADG;AAEff,IAAAA,iBAAiB,EAAE,MAFJ;AAGfc,IAAAA,QAAQ,EAAE;AAHK;AAtBgB,CAAD,CAAhC","sourcesContent":["import React, { useRef } from 'react';\nimport { View, Text, FlatList, TouchableOpacity } from 'react-native';\nimport { MaterialIcons } from '@expo/vector-icons';\nimport { Divider } from 'react-native-paper';\nimport { createTStyleSheet } from '../../../../src/utils/style';\n\nimport { dispatch, useMainSelector } from '../../../../redux-things';\n\nimport { FieldCard } from '../../../00-common/field-card';\nimport { CardTitle } from '../../../00-common/card-title';\nimport { getAreaState, getFieldState, scrollToEndAndBack } from '../../../../src/utils';\nimport { fieldNotHired, areaNotHired, areaHiredUnavailable, displayAlert, fieldIndexNotAvailable } from '../../../../src/utils/alert-messages';\nimport { Models } from '../../../../models';\nimport { isAnyIndexAvailableForArea, isIndexAvailable } from '../../../../src/utils/visiona-indices';\nimport { useNavigation } from '@react-navigation/native';\n\nexport function AllFields() {\n\tconst navigation = useNavigation();\n\n\tconst flatListRef = useRef<FlatList>(null);\n\n\tconst tab = useMainSelector((state) => state.interactionData.general.currentTab);\n\tconst area = useMainSelector((state) => state.interactionData.general.currentArea)!;\n\tconst field = useMainSelector((state) => state.interactionData.general.currentField)!;\n\n\tconst fields = area.field;\n\n\tfunction compare(a: Models.field, b: Models.field) {\n\t\tif (a.code > b.code) return 1;\n\t\tif (b.code > a.code) return -1;\n\t\treturn 0;\n\t}\n\n\treturn (\n\t\t<View style={styles.mainView}>\n\t\t\t<CardTitle text=\"Talhões\" titleIcon=\"location\" />\n\n\t\t\t<View style={styles.listView}>\n\t\t\t\t<FlatList\n\t\t\t\t\tref={flatListRef}\n\t\t\t\t\thorizontal\n\t\t\t\t\tdata={fields.slice().sort(compare)}\n\t\t\t\t\trenderItem={({ item: field }) => (\n\t\t\t\t\t\t<FieldCard\n\t\t\t\t\t\t\tisElevated\n\t\t\t\t\t\t\tisDiagnosisMode={tab === 'Diagnosis'}\n\t\t\t\t\t\t\tcustomStyle={{ marginTop: '1rem', marginBottom: '28rem' }}\n\t\t\t\t\t\t\tfield={field}\n\t\t\t\t\t\t\tisIndexNotAvailable={tab === 'Indices' && !isIndexAvailable(field)}\n\t\t\t\t\t\t\tonFieldPress={() => {\n\t\t\t\t\t\t\t\tconst fieldState = getFieldState(field);\n\t\t\t\t\t\t\t\tdispatch({ type: 'CHANGE_FIELD', field });\n\t\t\t\t\t\t\t\tif (tab === 'Diagnosis' && fieldState === 'hired_diagnosis_unavailable') return navigation.navigate('HireDiagnostic');\n\t\t\t\t\t\t\t\tif (tab === 'Diagnosis' && fieldState === 'not_hired') return displayAlert(fieldNotHired);\n\t\t\t\t\t\t\t\tif (tab === 'Indices' && !isIndexAvailable(field)) return displayAlert(fieldIndexNotAvailable);\n\t\t\t\t\t\t\t\tdispatch({ type: 'CHANGE_GENERAL_CARD', card: 'Profile' });\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t/>\n\t\t\t\t\t)}\n\t\t\t\t\tkeyExtractor={(item) => item.id.toString()}\n\t\t\t\t\tstyle={{ flexGrow: 0, alignSelf: 'center' }}\n\t\t\t\t\tcontentContainerStyle={{ paddingHorizontal: 16 }}\n\t\t\t\t\tonLayout={() => scrollToEndAndBack(flatListRef, 'flatlist')}\n\t\t\t\t/>\n\t\t\t</View>\n\t\t\t<Divider />\n\t\t\t<TouchableOpacity\n\t\t\t\tstyle={styles.buttonView}\n\t\t\t\tonPress={() => {\n\t\t\t\t\tconst areaState = getAreaState(area);\n\t\t\t\t\tconst areaIndexAvailable = isAnyIndexAvailableForArea(area);\n\t\t\t\t\tif (tab === 'Diagnosis' && areaState === 'not_hired') return displayAlert(areaNotHired);\n\t\t\t\t\tif (tab === 'Indices' && !areaIndexAvailable) return displayAlert(fieldIndexNotAvailable);\n\t\t\t\t\tdispatch({ type: 'CHANGE_GENERAL_CARD', card: 'Details' });\n\t\t\t\t\tif (tab === 'Diagnosis' && areaState === 'hired_diagnosis_unavailable') return displayAlert(areaHiredUnavailable);\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<Text style={styles.buttonViewText}>Ver Detalhes</Text>\n\t\t\t\t<MaterialIcons name=\"keyboard-arrow-up\" color=\"#6C6464\" style={styles.buttonViewIcon} />\n\t\t\t</TouchableOpacity>\n\t\t</View>\n\t);\n}\n\nconst styles = createTStyleSheet({\n\tmainView: {\n\t\tflexDirection: 'column',\n\t\talignItems: 'stretch',\n\t\tjustifyContent: 'flex-end',\n\t\tbackgroundColor: 'white',\n\t},\n\tlistView: {\n\t\theight: '130rem',\n\t},\n\tbuttonView: {\n\t\tflexDirection: 'row',\n\t\talignItems: 'center',\n\t\tjustifyContent: 'center',\n\t\theight: '55rem',\n\t\tpaddingBottom: '8rem',\n\t},\n\tbuttonViewText: {\n\t\tfontWeight: 'normal',\n\t\tcolor: '#6C6464',\n\t\tfontSize: '16rem',\n\t},\n\tbuttonViewIcon: {\n\t\tpaddingTop: '4rem',\n\t\tpaddingHorizontal: '8rem',\n\t\tfontSize: '20rem',\n\t},\n});\n"]},"metadata":{},"sourceType":"module"}