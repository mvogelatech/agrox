{"ast":null,"code":"import throttle from 'lodash.throttle';\nimport { logToString } from \"./log\";\nimport { deduplicateLogs } from \"./deduplicate-logs\";\nimport chalk from \"./chalk\";\nexport function createLogger(options) {\n  if (!__DEV__) return function () {};\n  var pendingLogs = [];\n  var flushLogs = throttle(function () {\n    var temp = pendingLogs;\n    pendingLogs = [];\n    console.log(\"\\n\" + deduplicateLogs(temp).map(function (_ref) {\n      var log = _ref.log,\n          count = _ref.count;\n      return logToString(log, count, options.detailed);\n    }).join('\\n\\n') + \"\\n\");\n  }, 2000);\n  console.log(chalk.magenta(\"\\n=== Setting up redux logger middleware (\" + new Date().toISOString() + \") ===\\n\"));\n  var id = 1;\n\n  var logger = function logger(_ref2) {\n    var getState = _ref2.getState;\n    return function (next) {\n      return function (action) {\n        var date = new Date();\n        var prevState = getState();\n        var result = next(action);\n        var nextState = getState();\n        pendingLogs.push({\n          id: id++,\n          prevState: prevState,\n          action: action,\n          nextState: nextState,\n          date: date\n        });\n        setImmediate(flushLogs);\n        return result;\n      };\n    };\n  };\n\n  return logger;\n}","map":{"version":3,"sources":["/home/jmgoncalves/git/agro-x/frontend/redux-things/custom-logger-middleware/index.ts"],"names":["throttle","logToString","deduplicateLogs","chalk","createLogger","options","__DEV__","pendingLogs","flushLogs","temp","console","log","map","count","detailed","join","magenta","Date","toISOString","id","logger","getState","next","action","date","prevState","result","nextState","push","setImmediate"],"mappings":"AAEA,OAAOA,QAAP,MAAqB,iBAArB;AACA,SAAcC,WAAd;AACA,SAASC,eAAT;AACA,OAAOC,KAAP;AAMA,OAAO,SAASC,YAAT,CAAsBC,OAAtB,EAAoD;AAC1D,MAAI,CAACC,OAAL,EAAc,OAAO,YAAM,CAAE,CAAf;AAEd,MAAIC,WAAkB,GAAG,EAAzB;AAEA,MAAMC,SAAS,GAAGR,QAAQ,CAAC,YAAM;AAChC,QAAMS,IAAI,GAAGF,WAAb;AACAA,IAAAA,WAAW,GAAG,EAAd;AAEAG,IAAAA,OAAO,CAACC,GAAR,QACMT,eAAe,CAACO,IAAD,CAAf,CACHG,GADG,CACC;AAAA,UAAGD,GAAH,QAAGA,GAAH;AAAA,UAAQE,KAAR,QAAQA,KAAR;AAAA,aAAoBZ,WAAW,CAACU,GAAD,EAAME,KAAN,EAAaR,OAAO,CAACS,QAArB,CAA/B;AAAA,KADD,EAEHC,IAFG,CAEE,MAFF,CADN;AAKA,GATyB,EASvB,IATuB,CAA1B;AAWAL,EAAAA,OAAO,CAACC,GAAR,CAAYR,KAAK,CAACa,OAAN,gDAA2D,IAAIC,IAAJ,GAAWC,WAAX,EAA3D,aAAZ;AAEA,MAAIC,EAAE,GAAG,CAAT;;AAEA,MAAMC,MAAM,GAAG,SAATA,MAAS;AAAA,QAAGC,QAAH,SAAGA,QAAH;AAAA,WAAuB,UAACC,IAAD;AAAA,aAAe,UAACC,MAAD,EAAiB;AACrE,YAAMC,IAAI,GAAG,IAAIP,IAAJ,EAAb;AACA,YAAMQ,SAAS,GAAGJ,QAAQ,EAA1B;AACA,YAAMK,MAAM,GAAGJ,IAAI,CAACC,MAAD,CAAnB;AACA,YAAMI,SAAS,GAAGN,QAAQ,EAA1B;AACAd,QAAAA,WAAW,CAACqB,IAAZ,CAAiB;AAAET,UAAAA,EAAE,EAAEA,EAAE,EAAR;AAAYM,UAAAA,SAAS,EAATA,SAAZ;AAAuBF,UAAAA,MAAM,EAANA,MAAvB;AAA+BI,UAAAA,SAAS,EAATA,SAA/B;AAA0CH,UAAAA,IAAI,EAAJA;AAA1C,SAAjB;AACAK,QAAAA,YAAY,CAACrB,SAAD,CAAZ;AACA,eAAOkB,MAAP;AACA,OARqC;AAAA,KAAvB;AAAA,GAAf;;AAUA,SAAON,MAAP;AACA","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport throttle from 'lodash.throttle';\nimport { Log, logToString } from './log';\nimport { deduplicateLogs } from './deduplicate-logs';\nimport chalk from './chalk';\n\nexport type createLoggerOptions = {\n\tdetailed: boolean;\n};\n\nexport function createLogger(options: createLoggerOptions) {\n\tif (!__DEV__) return () => {}; // eslint-disable-line @typescript-eslint/no-empty-function\n\n\tlet pendingLogs: Log[] = [];\n\n\tconst flushLogs = throttle(() => {\n\t\tconst temp = pendingLogs;\n\t\tpendingLogs = [];\n\n\t\tconsole.log(\n\t\t\t`\\n${deduplicateLogs(temp)\n\t\t\t\t.map(({ log, count }) => logToString(log, count, options.detailed))\n\t\t\t\t.join('\\n\\n')}\\n`,\n\t\t);\n\t}, 2000);\n\n\tconsole.log(chalk.magenta(`\\n=== Setting up redux logger middleware (${new Date().toISOString()}) ===\\n`));\n\n\tlet id = 1;\n\n\tconst logger = ({ getState }: any) => (next: any) => (action: any) => {\n\t\tconst date = new Date();\n\t\tconst prevState = getState();\n\t\tconst result = next(action);\n\t\tconst nextState = getState();\n\t\tpendingLogs.push({ id: id++, prevState, action, nextState, date });\n\t\tsetImmediate(flushLogs);\n\t\treturn result;\n\t};\n\n\treturn logger;\n}\n"]},"metadata":{},"sourceType":"module"}