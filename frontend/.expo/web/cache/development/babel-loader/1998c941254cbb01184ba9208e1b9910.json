{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/home/jmgoncalves/git/agro-x/frontend/components/02-general/plagues/plague-types.tsx\";\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } it = o[Symbol.iterator](); return it.next.bind(it); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport { Text } from 'react-native-paper';\nimport { createTStyleSheet } from \"../../../src/utils/style\";\nimport { PlagueItem } from \"./plague-item\";\nimport { getAreaAffectedAreaHA, getLatestDiagnosis } from \"../../../src/utils\";\nimport { useMainSelector } from \"../../../redux-things\";\nimport { ShareButton } from \"../../00-common/share-button\";\nimport { WaitOverlay } from \"../../00-common/wait-overlay\";\nexport function PlagueTypes(props) {\n  var infestationPercentagesMap = new Map();\n  var plaguesDefinition = useMainSelector(function (state) {\n    return state.backendData.plagues;\n  });\n\n  var _useState = useState(new Array()),\n      _useState2 = _slicedToArray(_useState, 1),\n      plagueDataList = _useState2[0];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      showIndicator = _useState4[0],\n      setShowIndicator = _useState4[1];\n\n  if (props.area) {\n    var affectedArea = getAreaAffectedAreaHA(props.area);\n    var infestationAreasMap = new Map();\n\n    for (var _iterator = _createForOfIteratorHelperLoose(props.area.field), _step; !(_step = _iterator()).done;) {\n      var _field = _step.value;\n\n      for (var _iterator3 = _createForOfIteratorHelperLoose(getLatestDiagnosis(_field).infestation), _step3; !(_step3 = _iterator3()).done;) {\n        var _infestationAreasMap$, _infestationAreasMap$2;\n\n        var infestation = _step3.value;\n        var _plague2 = infestation.plague,\n            _area_ha = infestation.area_ha;\n        var areaSoFar = (_infestationAreasMap$ = (_infestationAreasMap$2 = infestationAreasMap.get(_plague2.name)) == null ? void 0 : _infestationAreasMap$2.area_ha) != null ? _infestationAreasMap$ : 0;\n        infestationAreasMap.set(_plague2.name, {\n          plague: _plague2,\n          area_ha: areaSoFar + _area_ha\n        });\n      }\n    }\n\n    for (var _iterator2 = _createForOfIteratorHelperLoose(infestationAreasMap.entries()), _step2; !(_step2 = _iterator2()).done;) {\n      var _ref = _step2.value;\n\n      var _ref2 = _slicedToArray(_ref, 2);\n\n      var plagueName = _ref2[0];\n      var _ref2$ = _ref2[1];\n      var _plague = _ref2$.plague;\n      var area_ha = _ref2$.area_ha;\n      infestationPercentagesMap.set(plagueName, {\n        plague: _plague,\n        percentage: area_ha / affectedArea * 100\n      });\n    }\n  } else {\n    var latestDiagnosis = getLatestDiagnosis(props.field);\n\n    for (var _iterator4 = _createForOfIteratorHelperLoose(latestDiagnosis.infestation), _step4; !(_step4 = _iterator4()).done;) {\n      var _infestation = _step4.value;\n      infestationPercentagesMap.set(_infestation.plague.name, {\n        plague: _infestation.plague,\n        percentage: _infestation.area_ha / props.field.area_ha * 100\n      });\n    }\n  }\n\n  function buildPlagueViews() {\n    var plagueViews = [];\n    var viewKey = 1;\n\n    for (var _iterator5 = _createForOfIteratorHelperLoose(plaguesDefinition), _step5; !(_step5 = _iterator5()).done;) {\n      var pDef = _step5.value;\n      var plagueValue = infestationPercentagesMap.get(pDef.name);\n\n      if (pDef.in_use) {\n        var _plagueValue$percenta;\n\n        var pd = {\n          plague: pDef,\n          percentage: (_plagueValue$percenta = plagueValue == null ? void 0 : plagueValue.percentage) != null ? _plagueValue$percenta : 0\n        };\n        plagueViews.push(React.createElement(View, {\n          key: viewKey++,\n          style: styles.spacer,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 6\n          }\n        }, React.createElement(PlagueItem, {\n          plague: pd.plague,\n          percentage: pd.percentage,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 7\n          }\n        })));\n        plagueDataList.push(pd);\n      }\n    }\n\n    return plagueViews;\n  }\n\n  function showIndicatorHandler(toggle) {\n    setShowIndicator(toggle);\n  }\n\n  return React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 3\n    }\n  }, showIndicator ? React.createElement(WaitOverlay, {\n    text: \"Carregando relat\\xF3rio...\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 21\n    }\n  }) : undefined, React.createElement(Text, {\n    style: styles.plagueTypeText,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 4\n    }\n  }, \"TIPOS DE PRAGAS\"), React.createElement(View, {\n    style: styles.viewStyle,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 4\n    }\n  }, buildPlagueViews()), props.field && React.createElement(View, {\n    style: styles.buttonView,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 5\n    }\n  }, React.createElement(ShareButton, {\n    text: \"COMPARTILHAR DIAGN\\xD3STICO\",\n    field: props.field,\n    plagues: plagueDataList,\n    onBusy: showIndicatorHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 6\n    }\n  })));\n}\nvar REM_SCALE = Dimensions.get('window').width / 3.3;\nvar styles = createTStyleSheet({\n  viewStyle: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    flexWrap: 'wrap'\n  },\n  plagueTypeText: {\n    color: '#78849E',\n    fontSize: '14rem'\n  },\n  spacer: {\n    width: REM_SCALE,\n    maxHeight: 70\n  }\n});","map":{"version":3,"sources":["/home/jmgoncalves/git/agro-x/frontend/components/02-general/plagues/plague-types.tsx"],"names":["React","useState","Text","createTStyleSheet","PlagueItem","getAreaAffectedAreaHA","getLatestDiagnosis","useMainSelector","ShareButton","WaitOverlay","PlagueTypes","props","infestationPercentagesMap","Map","plaguesDefinition","state","backendData","plagues","Array","plagueDataList","showIndicator","setShowIndicator","area","affectedArea","infestationAreasMap","field","infestation","plague","area_ha","areaSoFar","get","name","set","entries","plagueName","percentage","latestDiagnosis","buildPlagueViews","plagueViews","viewKey","pDef","plagueValue","in_use","pd","push","styles","spacer","showIndicatorHandler","toggle","undefined","plagueTypeText","viewStyle","buttonView","REM_SCALE","Dimensions","width","flexDirection","justifyContent","flexWrap","color","fontSize","maxHeight"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { View, Dimensions } from 'react-native';\nimport { Text } from 'react-native-paper';\nimport { createTStyleSheet } from '../../../src/utils/style';\nimport { PlagueItem } from './plague-item';\nimport { Models } from '../../../models';\nimport { getAreaAffectedAreaHA, getLatestDiagnosis, StrictUnion } from '../../../src/utils';\nimport { useMainSelector } from '../../../redux-things';\nimport { ShareButton, PlagueData } from '../../00-common/share-button';\nimport { WaitOverlay } from '../../00-common/wait-overlay';\n\ntype PlagueTypesProps = StrictUnion<{ area: Models.area }, { field: Models.field }>;\n\nexport function PlagueTypes(props: PlagueTypesProps) {\n\tconst infestationPercentagesMap = new Map<string, { plague: Models.plague; percentage: number }>();\n\tconst plaguesDefinition = useMainSelector((state) => state.backendData.plagues)!;\n\tconst [plagueDataList] = useState(new Array<PlagueData>());\n\tconst [showIndicator, setShowIndicator] = useState(false);\n\n\tif (props.area) {\n\t\tconst affectedArea = getAreaAffectedAreaHA(props.area)!;\n\n\t\tconst infestationAreasMap = new Map<string, { plague: Models.plague; area_ha: number }>();\n\t\tfor (const field of props.area.field) {\n\t\t\tfor (const infestation of getLatestDiagnosis(field)!.infestation) {\n\t\t\t\tconst { plague, area_ha } = infestation;\n\t\t\t\tconst areaSoFar = infestationAreasMap.get(plague.name)?.area_ha ?? 0;\n\t\t\t\tinfestationAreasMap.set(plague.name, { plague, area_ha: areaSoFar + area_ha });\n\t\t\t}\n\t\t}\n\n\t\tfor (const [plagueName, { plague, area_ha }] of infestationAreasMap.entries()) {\n\t\t\tinfestationPercentagesMap.set(plagueName, {\n\t\t\t\tplague,\n\t\t\t\tpercentage: (area_ha / affectedArea) * 100,\n\t\t\t});\n\t\t}\n\t} else {\n\t\tconst latestDiagnosis = getLatestDiagnosis(props.field)!;\n\t\tfor (const infestation of latestDiagnosis.infestation) {\n\t\t\tinfestationPercentagesMap.set(infestation.plague.name, {\n\t\t\t\tplague: infestation.plague,\n\t\t\t\tpercentage: (infestation.area_ha / props.field.area_ha) * 100,\n\t\t\t});\n\t\t}\n\t}\n\n\tfunction buildPlagueViews() {\n\t\tconst plagueViews = [];\n\t\tlet viewKey = 1;\n\t\tfor (const pDef of plaguesDefinition) {\n\t\t\tconst plagueValue = infestationPercentagesMap.get(pDef.name);\n\t\t\tif (pDef.in_use) {\n\t\t\t\tconst pd: PlagueData = { plague: pDef, percentage: plagueValue?.percentage ?? 0 };\n\t\t\t\tplagueViews.push(\n\t\t\t\t\t<View key={viewKey++} style={styles.spacer}>\n\t\t\t\t\t\t<PlagueItem plague={pd.plague} percentage={pd.percentage} />\n\t\t\t\t\t</View>,\n\t\t\t\t);\n\n\t\t\t\tplagueDataList.push(pd);\n\t\t\t}\n\t\t}\n\n\t\treturn plagueViews;\n\t}\n\n\tfunction showIndicatorHandler(toggle: boolean) {\n\t\tsetShowIndicator(toggle);\n\t}\n\n\treturn (\n\t\t<View>\n\t\t\t{showIndicator ? <WaitOverlay text=\"Carregando relatório...\" /> : undefined}\n\t\t\t<Text style={styles.plagueTypeText}>TIPOS DE PRAGAS</Text>\n\t\t\t<View style={styles.viewStyle}>{buildPlagueViews()}</View>\n\t\t\t{props.field && (\n\t\t\t\t<View style={styles.buttonView}>\n\t\t\t\t\t<ShareButton text=\"COMPARTILHAR DIAGNÓSTICO\" field={props.field} plagues={plagueDataList} onBusy={showIndicatorHandler} />\n\t\t\t\t</View>\n\t\t\t)}\n\t\t</View>\n\t);\n}\n\nconst REM_SCALE = Dimensions.get('window').width / 3.3;\n\nconst styles = createTStyleSheet({\n\tviewStyle: {\n\t\tflexDirection: 'row',\n\t\tjustifyContent: 'space-between',\n\t\tflexWrap: 'wrap',\n\t},\n\tplagueTypeText: {\n\t\tcolor: '#78849E',\n\t\tfontSize: '14rem',\n\t},\n\tspacer: {\n\t\twidth: REM_SCALE,\n\t\tmaxHeight: 70,\n\t},\n});\n"]},"metadata":{},"sourceType":"module"}