{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nvar _jsxFileName = \"/home/jmgoncalves/git/agro-x/frontend/src/utils/smart-lifecycle-components.tsx\";\nimport React from 'react';\nimport { useIsAlive } from \"../custom-hooks/use-is-alive\";\nimport { useStatesChanged } from \"../custom-hooks/use-states-changed\";\nimport { useIsFocused } from '@react-navigation/native';\n\nvar chalk_ = __DEV__ && require('chalk');\n\nvar chalk = chalk_ && new chalk_.Instance({\n  level: 1\n});\nexport function asFocusedOnlyComponent(ComponentFunction) {\n  var _this = this;\n\n  return function (props) {\n    return useIsFocused() ? React.createElement(ComponentFunction, _extends({}, props, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 27\n      }\n    })) : null;\n  };\n}\nexport function asAliveOnlyScreenComponent(ScreenComponentFunction) {\n  var _this2 = this;\n\n  return function (props) {\n    var alive = useIsAlive(props.route);\n    var justDied = useStatesChanged([alive]) && !alive;\n\n    if (__DEV__ && justDied) {\n      console.log(chalk.gray(\"Info: \" + props.route.name + \" died\"));\n    }\n\n    return alive ? React.createElement(ScreenComponentFunction, _extends({}, props, {\n      __self: _this2,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 18\n      }\n    })) : null;\n  };\n}","map":{"version":3,"sources":["/home/jmgoncalves/git/agro-x/frontend/src/utils/smart-lifecycle-components.tsx"],"names":["React","useIsAlive","useStatesChanged","useIsFocused","chalk_","__DEV__","require","chalk","Instance","level","asFocusedOnlyComponent","ComponentFunction","props","asAliveOnlyScreenComponent","ScreenComponentFunction","alive","route","justDied","console","log","gray","name"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,UAAT;AACA,SAASC,gBAAT;AACA,SAASC,YAAT,QAA6B,0BAA7B;;AAEA,IAAMC,MAAM,GAAGC,OAAO,IAAIC,OAAO,CAAC,OAAD,CAAjC;;AACA,IAAMC,KAAK,GAAGH,MAAM,IAAI,IAAIA,MAAM,CAACI,QAAX,CAAoB;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAApB,CAAxB;AAMA,OAAO,SAASC,sBAAT,CAAuCC,iBAAvC,EAAsH;AAAA;;AAC5H,SAAO,UAACC,KAAD,EAAkB;AACxB,WAAOT,YAAY,KAAK,oBAAC,iBAAD,eAAuBS,KAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAL,GAAwC,IAA3D;AACA,GAFD;AAGA;AAED,OAAO,SAASC,0BAAT,CACNC,uBADM,EAEqC;AAAA;;AAC3C,SAAO,UAACF,KAAD,EAAwB;AAC9B,QAAMG,KAAK,GAAGd,UAAU,CAACW,KAAK,CAACI,KAAP,CAAxB;AACA,QAAMC,QAAQ,GAAGf,gBAAgB,CAAC,CAACa,KAAD,CAAD,CAAhB,IAA6B,CAACA,KAA/C;;AAEA,QAAIV,OAAO,IAAIY,QAAf,EAAyB;AACxBC,MAAAA,OAAO,CAACC,GAAR,CAAYZ,KAAK,CAACa,IAAN,YAAoBR,KAAK,CAACI,KAAN,CAAYK,IAAhC,WAAZ;AACA;;AAED,WAAON,KAAK,GAAG,oBAAC,uBAAD,eAA6BH,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAH,GAA4C,IAAxD;AACA,GATD;AAUA","sourcesContent":["import React from 'react';\nimport { AgroXScreenProps } from '../../components/navigation-types';\nimport { useIsAlive } from '../custom-hooks/use-is-alive';\nimport { useStatesChanged } from '../custom-hooks/use-states-changed';\nimport { useIsFocused } from '@react-navigation/native';\n\nconst chalk_ = __DEV__ && require('chalk');\nconst chalk = chalk_ && new chalk_.Instance({ level: 1 });\n\nexport type Node = JSX.Element | null;\nexport type ComponentFunctionType<Props> = (props: Props) => Node;\nexport type ScreenComponentFunctionType<ScreenProps extends AgroXScreenProps> = ComponentFunctionType<ScreenProps>;\n\nexport function asFocusedOnlyComponent<Props>(ComponentFunction: ComponentFunctionType<Props>): ComponentFunctionType<Props> {\n\treturn (props: Props) => {\n\t\treturn useIsFocused() ? <ComponentFunction {...props} /> : null;\n\t};\n}\n\nexport function asAliveOnlyScreenComponent<ScreenProps extends AgroXScreenProps>(\n\tScreenComponentFunction: ScreenComponentFunctionType<ScreenProps>,\n): ScreenComponentFunctionType<ScreenProps> {\n\treturn (props: ScreenProps) => {\n\t\tconst alive = useIsAlive(props.route);\n\t\tconst justDied = useStatesChanged([alive]) && !alive;\n\n\t\tif (__DEV__ && justDied) {\n\t\t\tconsole.log(chalk.gray(`Info: ${props.route.name} died`));\n\t\t}\n\n\t\treturn alive ? <ScreenComponentFunction {...props} /> : null;\n\t};\n}\n"]},"metadata":{},"sourceType":"module"}