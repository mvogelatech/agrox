{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport replaceString from 'replace-string';\nimport isPlainObject from 'is-plain-object';\nvar placeholder = '§£';\nvar setPlaceholder = '¢§';\n\nfunction manyStringReplacements(string, replacements) {\n  var result = string;\n\n  for (var _i = 0, _Object$entries = Object.entries(replacements); _i < _Object$entries.length; _i++) {\n    var _ref = _Object$entries[_i];\n\n    var _ref2 = _slicedToArray(_ref, 2);\n\n    var _source = _ref2[0];\n    var replacement = _ref2[1];\n    result = replaceString(result, _source, replacement);\n  }\n\n  return result;\n}\n\nfunction replacer(key, value) {\n  if (value != null && value.$$models) {\n    var _value$id;\n\n    return placeholder + \"{{\" + value.$$models + \" ID \" + ((_value$id = value.id) != null ? _value$id : 'unknown') + \"}}\" + placeholder;\n  }\n\n  if (value instanceof Set) {\n    return [setPlaceholder, _toConsumableArray(value), setPlaceholder];\n  }\n\n  if (value instanceof Map) {\n    return '<<<Map>>>';\n  }\n\n  return value;\n}\n\nfunction prettierJson(input) {\n  var prettier = require('prettier/standalone');\n\n  var prettierOptions = {\n    parser: 'babel',\n    plugins: [require('prettier/parser-babel')],\n    printWidth: 80,\n    semi: false,\n    trailingComma: 'none'\n  };\n  return prettier.format(\"const ___14 = \" + JSON.stringify(input, replacer), prettierOptions).slice(14);\n}\n\nexport function toLoggableString(arg) {\n  if (isPlainObject(arg)) {\n    var _manyStringReplacemen;\n\n    return manyStringReplacements(prettierJson(arg), (_manyStringReplacemen = {}, _defineProperty(_manyStringReplacemen, \"\\\"\" + placeholder, ''), _defineProperty(_manyStringReplacemen, placeholder + \"\\\"\", ''), _defineProperty(_manyStringReplacemen, \"[\\\"\" + setPlaceholder + \"\\\", [\", 'Set {'), _defineProperty(_manyStringReplacemen, \"], \\\"\" + setPlaceholder + \"\\\"]\", '}'), _manyStringReplacemen)).trim();\n  }\n\n  return \"\" + arg;\n}","map":{"version":3,"sources":["/home/jmgoncalves/git/agro-x/frontend/redux-things/custom-logger-middleware/to-loggable-string.ts"],"names":["replaceString","isPlainObject","placeholder","setPlaceholder","manyStringReplacements","string","replacements","result","Object","entries","source","replacement","replacer","key","value","$$models","id","Set","Map","prettierJson","input","prettier","require","prettierOptions","parser","plugins","printWidth","semi","trailingComma","format","JSON","stringify","slice","toLoggableString","arg","trim"],"mappings":";;;AAGA,OAAOA,aAAP,MAA0B,gBAA1B;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AAEA,IAAMC,WAAW,GAAG,IAApB;AACA,IAAMC,cAAc,GAAG,IAAvB;;AAEA,SAASC,sBAAT,CAAgCC,MAAhC,EAAgDC,YAAhD,EAAoG;AACnG,MAAIC,MAAM,GAAGF,MAAb;;AAEA,qCAAoCG,MAAM,CAACC,OAAP,CAAeH,YAAf,CAApC,qCAAkE;AAAA;;AAAA;;AAAA,QAAtDI,OAAsD;AAAA,QAA9CC,WAA8C;AACjEJ,IAAAA,MAAM,GAAGP,aAAa,CAACO,MAAD,EAASG,OAAT,EAAiBC,WAAjB,CAAtB;AACA;;AAED,SAAOJ,MAAP;AACA;;AAED,SAASK,QAAT,CAAkBC,GAAlB,EAA+BC,KAA/B,EAA2C;AAC1C,MAAIA,KAAJ,YAAIA,KAAK,CAAEC,QAAX,EAAqB;AAAA;;AACpB,WAAUb,WAAV,UAA0BY,KAAK,CAACC,QAAhC,0BAA+CD,KAAK,CAACE,EAArD,wBAA2D,SAA3D,WAAyEd,WAAzE;AACA;;AAED,MAAIY,KAAK,YAAYG,GAArB,EAA0B;AACzB,WAAO,CAACd,cAAD,qBAAqBW,KAArB,GAA6BX,cAA7B,CAAP;AACA;;AAED,MAAIW,KAAK,YAAYI,GAArB,EAA0B;AACzB,WAAO,WAAP;AACA;;AAED,SAAOJ,KAAP;AACA;;AAED,SAASK,YAAT,CAAsBC,KAAtB,EAA0C;AACzC,MAAMC,QAAQ,GAAGC,OAAO,CAAC,qBAAD,CAAxB;;AACA,MAAMC,eAAe,GAAG;AAAEC,IAAAA,MAAM,EAAE,OAAV;AAAmBC,IAAAA,OAAO,EAAE,CAACH,OAAO,CAAC,uBAAD,CAAR,CAA5B;AAAgEI,IAAAA,UAAU,EAAE,EAA5E;AAAgFC,IAAAA,IAAI,EAAE,KAAtF;AAA6FC,IAAAA,aAAa,EAAE;AAA5G,GAAxB;AACA,SAAOP,QAAQ,CAACQ,MAAT,oBAAiCC,IAAI,CAACC,SAAL,CAAeX,KAAf,EAAsBR,QAAtB,CAAjC,EAAoEW,eAApE,EAAqFS,KAArF,CAA2F,EAA3F,CAAP;AACA;;AAED,OAAO,SAASC,gBAAT,CAA0BC,GAA1B,EAA4C;AAClD,MAAIjC,aAAa,CAACiC,GAAD,CAAjB,EAAwB;AAAA;;AACvB,WAAO9B,sBAAsB,CAACe,YAAY,CAACe,GAAD,CAAb,6EACvBhC,WADuB,EACP,EADO,0CAExBA,WAFwB,SAEP,EAFO,kDAGtBC,cAHsB,YAGC,OAHD,oDAIpBA,cAJoB,UAIC,GAJD,0BAAtB,CAKJgC,IALI,EAAP;AAMA;;AAED,cAAUD,GAAV;AACA","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/no-var-requires */\n\nimport replaceString from 'replace-string';\nimport isPlainObject from 'is-plain-object';\n\nconst placeholder = '§£';\nconst setPlaceholder = '¢§';\n\nfunction manyStringReplacements(string: string, replacements: { [source: string]: string }): string {\n\tlet result = string;\n\n\tfor (const [source, replacement] of Object.entries(replacements)) {\n\t\tresult = replaceString(result, source, replacement);\n\t}\n\n\treturn result;\n}\n\nfunction replacer(key: string, value: any) {\n\tif (value?.$$models) {\n\t\treturn `${placeholder}{{${value.$$models} ID ${value.id ?? 'unknown'}}}${placeholder}`;\n\t}\n\n\tif (value instanceof Set) {\n\t\treturn [setPlaceholder, [...value], setPlaceholder];\n\t}\n\n\tif (value instanceof Map) {\n\t\treturn '<<<Map>>>';\n\t}\n\n\treturn value;\n}\n\nfunction prettierJson(input: any): string {\n\tconst prettier = require('prettier/standalone');\n\tconst prettierOptions = { parser: 'babel', plugins: [require('prettier/parser-babel')], printWidth: 80, semi: false, trailingComma: 'none' };\n\treturn prettier.format(`const ___14 = ${JSON.stringify(input, replacer)}`, prettierOptions).slice(14);\n}\n\nexport function toLoggableString(arg: any): string {\n\tif (isPlainObject(arg)) {\n\t\treturn manyStringReplacements(prettierJson(arg), {\n\t\t\t[`\"${placeholder}`]: '',\n\t\t\t[`${placeholder}\"`]: '',\n\t\t\t[`[\"${setPlaceholder}\", [`]: 'Set {',\n\t\t\t[`], \"${setPlaceholder}\"]`]: '}',\n\t\t}).trim();\n\t}\n\n\treturn `${arg}`;\n}\n"]},"metadata":{},"sourceType":"module"}