{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { all, call, takeEvery } from 'redux-saga/effects';\nimport { offlineActionTypes } from 'react-native-offline';\nimport { tryToUpdateFcmToken } from \"../../src/network/update-fcm-token\";\nimport { showSnackbar } from \"../../src/snackbars\";\nimport { fetchBackendData } from \"../../src/network\";\nexport function getRootSaga(getState) {\n  var _marked = _regeneratorRuntime.mark(networkSaga),\n      _marked2 = _regeneratorRuntime.mark(fcmSaga);\n\n  function updateFcmTokenIfApplicable() {\n    var state = getState();\n\n    if (state.mainTree.backendData.user && state.network.isConnected) {\n      tryToUpdateFcmToken();\n    }\n  }\n\n  function networkSaga() {\n    var offlineMessage, onlineMessage;\n    return _regeneratorRuntime.wrap(function networkSaga$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            offlineMessage = 'As informações podem estar desatualizadas pela falta de conexão com a internet.';\n            onlineMessage = 'Conexão com a internet reestabelecida e informações atualizadas!';\n            _context2.next = 4;\n            return takeEvery(offlineActionTypes.CONNECTION_CHANGE, function (action) {\n              var justGotOnline = action.payload;\n              var snackbarStyle = {\n                backgroundColor: 'rgb(50, 115, 135)'\n              };\n\n              if (justGotOnline) {\n                updateFcmTokenIfApplicable();\n\n                (function _callee() {\n                  return _regeneratorRuntime.async(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          _context.next = 2;\n                          return _regeneratorRuntime.awrap(fetchBackendData());\n\n                        case 2:\n                          showSnackbar({\n                            text: onlineMessage,\n                            duration: 8000,\n                            style: snackbarStyle\n                          });\n\n                        case 3:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, null, null, null, Promise);\n                })();\n              } else {\n                showSnackbar({\n                  text: offlineMessage,\n                  actionText: 'OK, ENTENDI',\n                  style: snackbarStyle\n                });\n              }\n            });\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _marked);\n  }\n\n  function fcmSaga() {\n    return _regeneratorRuntime.wrap(function fcmSaga$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return takeEvery('BACKEND_DATA_RECEIVED__USER', function () {\n              updateFcmTokenIfApplicable();\n            });\n\n          case 2:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _marked2);\n  }\n\n  return _regeneratorRuntime.mark(function _callee2() {\n    return _regeneratorRuntime.wrap(function _callee2$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return all([call(networkSaga), call(fcmSaga)]);\n\n          case 2:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee2);\n  });\n}","map":{"version":3,"sources":["/home/jmgoncalves/git/agro-x/frontend/redux-things/sagas/index.ts"],"names":["all","call","takeEvery","offlineActionTypes","tryToUpdateFcmToken","showSnackbar","fetchBackendData","getRootSaga","getState","networkSaga","fcmSaga","updateFcmTokenIfApplicable","state","mainTree","backendData","user","network","isConnected","offlineMessage","onlineMessage","CONNECTION_CHANGE","action","justGotOnline","payload","snackbarStyle","backgroundColor","text","duration","style","actionText"],"mappings":";AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,SAApB,QAAqC,oBAArC;AACA,SAASC,kBAAT,QAAmC,sBAAnC;AAEA,SAASC,mBAAT;AACA,SAASC,YAAT;AACA,SAASC,gBAAT;AAOA,OAAO,SAASC,WAAT,CAAqBC,QAArB,EAAqD;AAAA,yCAQjDC,WARiD;AAAA,0CA+BjDC,OA/BiD;;AAC3D,WAASC,0BAAT,GAAsC;AACrC,QAAMC,KAAK,GAAGJ,QAAQ,EAAtB;;AACA,QAAII,KAAK,CAACC,QAAN,CAAeC,WAAf,CAA2BC,IAA3B,IAAmCH,KAAK,CAACI,OAAN,CAAcC,WAArD,EAAkE;AACjEb,MAAAA,mBAAmB;AACnB;AACD;;AAED,WAAUK,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACOS,YAAAA,cADP,GACwB,iFADxB;AAEOC,YAAAA,aAFP,GAEuB,kEAFvB;AAAA;AAIC,mBAAMjB,SAAS,CAACC,kBAAkB,CAACiB,iBAApB,EAAuC,UAACC,MAAD,EAA6C;AAClG,kBAAMC,aAAa,GAAGD,MAAM,CAACE,OAA7B;AAEA,kBAAMC,aAAa,GAAG;AACrBC,gBAAAA,eAAe,EAAE;AADI,eAAtB;;AAIA,kBAAIH,aAAJ,EAAmB;AAClBX,gBAAAA,0BAA0B;;AAC1B,iBAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2DACML,gBAAgB,EADtB;;AAAA;AAEAD,0BAAAA,YAAY,CAAC;AAAEqB,4BAAAA,IAAI,EAAEP,aAAR;AAAuBQ,4BAAAA,QAAQ,EAAE,IAAjC;AAAuCC,4BAAAA,KAAK,EAAEJ;AAA9C,2BAAD,CAAZ;;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAAD;AAIA,eAND,MAMO;AACNnB,gBAAAA,YAAY,CAAC;AAAEqB,kBAAAA,IAAI,EAAER,cAAR;AAAwBW,kBAAAA,UAAU,EAAE,aAApC;AAAmDD,kBAAAA,KAAK,EAAEJ;AAA1D,iBAAD,CAAZ;AACA;AACD,aAhBc,CAAf;;AAJD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAuBA,WAAUd,OAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACC,mBAAMR,SAAS,CAAC,6BAAD,EAAgC,YAAM;AACpDS,cAAAA,0BAA0B;AAC1B,aAFc,CAAf;;AADD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMA,kCAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AACN,mBAAMX,GAAG,CAAC,CAACC,IAAI,CAACQ,WAAD,CAAL,EAAoBR,IAAI,CAACS,OAAD,CAAxB,CAAD,CAAT;;AADM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAP;AAGA","sourcesContent":["import { all, call, takeEvery } from 'redux-saga/effects';\nimport { offlineActionTypes } from 'react-native-offline';\nimport { RootReduxState } from '../root-structure';\nimport { tryToUpdateFcmToken } from '../../src/network/update-fcm-token';\nimport { showSnackbar } from '../../src/snackbars';\nimport { fetchBackendData } from '../../src/network';\n\ntype NetworkConnectivityChangeAction = {\n\ttype: '@@network-connectivity/CONNECTION_CHANGE';\n\tpayload: boolean;\n};\n\nexport function getRootSaga(getState: () => RootReduxState) {\n\tfunction updateFcmTokenIfApplicable() {\n\t\tconst state = getState();\n\t\tif (state.mainTree.backendData.user && state.network.isConnected) {\n\t\t\ttryToUpdateFcmToken();\n\t\t}\n\t}\n\n\tfunction* networkSaga() {\n\t\tconst offlineMessage = 'As informações podem estar desatualizadas pela falta de conexão com a internet.';\n\t\tconst onlineMessage = 'Conexão com a internet reestabelecida e informações atualizadas!';\n\n\t\tyield takeEvery(offlineActionTypes.CONNECTION_CHANGE, (action: NetworkConnectivityChangeAction) => {\n\t\t\tconst justGotOnline = action.payload;\n\n\t\t\tconst snackbarStyle = {\n\t\t\t\tbackgroundColor: 'rgb(50, 115, 135)',\n\t\t\t};\n\n\t\t\tif (justGotOnline) {\n\t\t\t\tupdateFcmTokenIfApplicable();\n\t\t\t\t(async () => {\n\t\t\t\t\tawait fetchBackendData();\n\t\t\t\t\tshowSnackbar({ text: onlineMessage, duration: 8000, style: snackbarStyle });\n\t\t\t\t})();\n\t\t\t} else {\n\t\t\t\tshowSnackbar({ text: offlineMessage, actionText: 'OK, ENTENDI', style: snackbarStyle });\n\t\t\t}\n\t\t});\n\t}\n\n\tfunction* fcmSaga() {\n\t\tyield takeEvery('BACKEND_DATA_RECEIVED__USER', () => {\n\t\t\tupdateFcmTokenIfApplicable();\n\t\t});\n\t}\n\n\treturn function* () {\n\t\tyield all([call(networkSaga), call(fcmSaga)]);\n\t};\n}\n"]},"metadata":{},"sourceType":"module"}