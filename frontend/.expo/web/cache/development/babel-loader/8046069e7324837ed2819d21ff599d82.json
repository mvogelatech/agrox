{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nvar _jsxFileName = \"/home/jmgoncalves/git/agro-x/frontend/components/02-general/map/auto-refreshable-map.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport { BetterMap } from \"./better-map\";\nimport * as MapUtils from \"./map-utils\";\nexport function AutoRefreshableMap(props) {\n  var place = Array.isArray(props.place) ? MapUtils.boundingBoxToRegion(props.place) : props.place;\n\n  function refresh(map, dimensions, isResize) {\n    if (props.shouldRefresh({\n      isResize: isResize,\n      dimensions: dimensions\n    })) {\n      if ('zoom' in place) {\n        map.animateCamera(_objectSpread({\n          pitch: 0,\n          heading: 0,\n          altitude: 0\n        }, place), {\n          duration: 800\n        });\n      } else {\n        map.animateToRegion(place, 800);\n      }\n    }\n  }\n\n  return React.createElement(BetterMap, {\n    isScrollEnabled: props.isScrollEnabled,\n    isZoomEnabled: props.isZoomEnabled,\n    initialRegion: 'zoom' in place ? undefined : place,\n    onRender: function onRender(map, dimensions) {\n      return refresh(map, dimensions, false);\n    },\n    onResize: function onResize(map, dimensions) {\n      return refresh(map, dimensions, true);\n    },\n    onPress: props.onPress,\n    onRegionChangeComplete: props.onRegionChangeComplete,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 3\n    }\n  }, props.children);\n}","map":{"version":3,"sources":["/home/jmgoncalves/git/agro-x/frontend/components/02-general/map/auto-refreshable-map.tsx"],"names":["React","BetterMap","MapUtils","AutoRefreshableMap","props","place","Array","isArray","boundingBoxToRegion","refresh","map","dimensions","isResize","shouldRefresh","animateCamera","pitch","heading","altitude","duration","animateToRegion","isScrollEnabled","isZoomEnabled","undefined","onPress","onRegionChangeComplete","children"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,SAASC,SAAT;AACA,OAAO,KAAKC,QAAZ;AAYA,OAAO,SAASC,kBAAT,CAA4BC,KAA5B,EAA4D;AAClE,MAAMC,KAAK,GAAGC,KAAK,CAACC,OAAN,CAAcH,KAAK,CAACC,KAApB,IAA6BH,QAAQ,CAACM,mBAAT,CAA6BJ,KAAK,CAACC,KAAnC,CAA7B,GAAyED,KAAK,CAACC,KAA7F;;AAEA,WAASI,OAAT,CAAiBC,GAAjB,EAA+BC,UAA/B,EAAuEC,QAAvE,EAA0F;AAiBzF,QAAIR,KAAK,CAACS,aAAN,CAAoB;AAAED,MAAAA,QAAQ,EAARA,QAAF;AAAYD,MAAAA,UAAU,EAAVA;AAAZ,KAApB,CAAJ,EAAmD;AAClD,UAAI,UAAUN,KAAd,EAAqB;AACpBK,QAAAA,GAAG,CAACI,aAAJ;AAAoBC,UAAAA,KAAK,EAAE,CAA3B;AAA8BC,UAAAA,OAAO,EAAE,CAAvC;AAA0CC,UAAAA,QAAQ,EAAE;AAApD,WAA0DZ,KAA1D,GAAmE;AAAEa,UAAAA,QAAQ,EAAE;AAAZ,SAAnE;AACA,OAFD,MAEO;AACNR,QAAAA,GAAG,CAACS,eAAJ,CAAoBd,KAApB,EAA2B,GAA3B;AACA;AACD;AACD;;AAED,SACC,oBAAC,SAAD;AACC,IAAA,eAAe,EAAED,KAAK,CAACgB,eADxB;AAEC,IAAA,aAAa,EAAEhB,KAAK,CAACiB,aAFtB;AAGC,IAAA,aAAa,EAAE,UAAUhB,KAAV,GAAkBiB,SAAlB,GAA8BjB,KAH9C;AAIC,IAAA,QAAQ,EAAE,kBAACK,GAAD,EAAMC,UAAN;AAAA,aAAqBF,OAAO,CAACC,GAAD,EAAMC,UAAN,EAAkB,KAAlB,CAA5B;AAAA,KAJX;AAKC,IAAA,QAAQ,EAAE,kBAACD,GAAD,EAAMC,UAAN;AAAA,aAAqBF,OAAO,CAACC,GAAD,EAAMC,UAAN,EAAkB,IAAlB,CAA5B;AAAA,KALX;AAMC,IAAA,OAAO,EAAEP,KAAK,CAACmB,OANhB;AAOC,IAAA,sBAAsB,EAAEnB,KAAK,CAACoB,sBAP/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KASEpB,KAAK,CAACqB,QATR,CADD;AAaA","sourcesContent":["import React from 'react';\nimport MapView from 'react-native-maps';\nimport { BetterMap } from './better-map';\nimport * as MapUtils from './map-utils';\n\ntype AutoRefreshableMapProps = {\n\tchildren?: React.ReactNode;\n\tisScrollEnabled: boolean;\n\tisZoomEnabled: boolean;\n\tplace: MapUtils.BoundingBox | MapUtils.Region | MapUtils.SimpleCamera;\n\tshouldRefresh: (info: { isResize: boolean; dimensions: MapUtils.MapViewDimensions }) => boolean;\n\tonPress?: (map: MapView, dimensions: MapUtils.MapViewDimensions) => void;\n\tonRegionChangeComplete?: (map: MapView, dimensions: MapUtils.MapViewDimensions) => void;\n};\n\nexport function AutoRefreshableMap(props: AutoRefreshableMapProps) {\n\tconst place = Array.isArray(props.place) ? MapUtils.boundingBoxToRegion(props.place) : props.place;\n\n\tfunction refresh(map: MapView, dimensions: MapUtils.MapViewDimensions, isResize: boolean) {\n\t\t// const camera = Array.isArray(props.place)\n\t\t// \t? MapUtils.boundingBoxToCamera(props.place, dimensions, 20)\n\t\t// \t: 'zoom' in props.place\n\t\t// \t? props.place\n\t\t// \t: undefined;\n\n\t\t// if (camera) {\n\t\t// \tsetTimeout(() => {\n\t\t// \t\tconst tiles = MapUtils.cameraToTiles(camera.center, camera.zoom, dimensions);\n\t\t// \t\tconsole.log(\n\t\t// \t\t\t'Predicted tiles!',\n\t\t// \t\t\ttiles.map((tile) => `${camera.zoom}/${tile.tileX}/${tile.tileY}`),\n\t\t// \t\t);\n\t\t// \t}, 1);\n\t\t// }\n\n\t\tif (props.shouldRefresh({ isResize, dimensions })) {\n\t\t\tif ('zoom' in place) {\n\t\t\t\tmap.animateCamera({ pitch: 0, heading: 0, altitude: 0, ...place }, { duration: 800 });\n\t\t\t} else {\n\t\t\t\tmap.animateToRegion(place, 800);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn (\n\t\t<BetterMap\n\t\t\tisScrollEnabled={props.isScrollEnabled}\n\t\t\tisZoomEnabled={props.isZoomEnabled}\n\t\t\tinitialRegion={'zoom' in place ? undefined : place}\n\t\t\tonRender={(map, dimensions) => refresh(map, dimensions, false)}\n\t\t\tonResize={(map, dimensions) => refresh(map, dimensions, true)}\n\t\t\tonPress={props.onPress}\n\t\t\tonRegionChangeComplete={props.onRegionChangeComplete}\n\t\t>\n\t\t\t{props.children}\n\t\t</BetterMap>\n\t);\n}\n"]},"metadata":{},"sourceType":"module"}