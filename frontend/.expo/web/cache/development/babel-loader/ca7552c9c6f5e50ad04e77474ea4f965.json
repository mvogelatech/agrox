{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/home/jmgoncalves/git/agro-x/frontend/components/02-general/map/map.tsx\";\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } it = o[Symbol.iterator](); return it.next.bind(it); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useEffect, useMemo, useState } from 'react';\nimport { Marker, Polygon, Overlay, UrlTile } from 'react-native-maps';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { dispatch, useMainSelector } from \"../../../redux-things\";\nimport { AutoRefreshableMap } from \"./auto-refreshable-map\";\nimport { useStatesChanged } from \"../../../src/custom-hooks/use-states-changed\";\nimport { MapPin } from \"./map-pin\";\nimport { getMapPinColorDate, useThresholds } from \"../../../src/utils/semaphore\";\nimport * as MapUtils from \"./map-utils\";\nimport { getIndexImageLocalUri, isIndexAvailable } from \"../../../src/utils/visiona-indices\";\nimport { formatDate, getAreaLatestDiagnosis, getLatestDiagnosis, REM_SCALE } from \"../../../src/utils\";\nimport { BACKEND_BASE_URL } from \"../../../src/network\";\nimport * as FileSystem from 'expo-file-system';\nvar BASE_64_VALIDATION_TOKEN = 'WDl5NDhVV2ZlRTAsSlo3JWJYfUdJe3ZvLlsmayFILWs4XXVldDg7WA==';\n\nfunction logCurrentCamera(map, dimensions) {\n  void function _callee() {\n    var camera;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(map.getCamera());\n\n          case 2:\n            camera = _context.sent;\n            console.log(\"Current map dimensions are \" + dimensions.widthPx + \"x\" + dimensions.heightPx + \" and current camera is:\", camera);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }();\n}\n\nfunction fieldToLatLng(field) {\n  return {\n    latitude: field.lat,\n    longitude: field.long\n  };\n}\n\nfunction padToPins(box, pins) {\n  return MapUtils.addRoughPaddingToBoundingBox(MapUtils.addEnoughPaddingToEnsurePinsVisible(box, pins.map(function (p) {\n    return MapUtils.geoToWorldCoords(p);\n  })), {\n    bottom: 10,\n    left: 0,\n    right: 0,\n    top: 10\n  });\n}\n\nfunction fieldGeoToWorldCoords(field) {\n  var coords = [];\n\n  for (var _iterator = _createForOfIteratorHelperLoose(field.coordinates), _step; !(_step = _iterator()).done;) {\n    var _ref = _step.value;\n\n    var _ref2 = _slicedToArray(_ref, 2);\n\n    var longitude = _ref2[0];\n    var latitude = _ref2[1];\n    coords.push(MapUtils.geoToWorldCoords({\n      latitude: latitude,\n      longitude: longitude\n    }));\n  }\n\n  return coords;\n}\n\nfunction getPlaceToShow(area, field, fieldPins) {\n  if (field) {\n    var fieldWorldCoords = fieldGeoToWorldCoords(field);\n\n    if (fieldWorldCoords.length < 3) {\n      return {\n        center: {\n          latitude: field.lat,\n          longitude: field.long\n        },\n        zoom: 17\n      };\n    }\n\n    return padToPins(MapUtils.getBoundingBox(fieldWorldCoords), [fieldToLatLng(field)]);\n  }\n\n  var areaWorldCoords = [];\n\n  for (var _iterator2 = _createForOfIteratorHelperLoose(area.field), _step2; !(_step2 = _iterator2()).done;) {\n    var _field = _step2.value;\n    areaWorldCoords = areaWorldCoords.concat(fieldGeoToWorldCoords(_field));\n  }\n\n  if (areaWorldCoords.length < 3) {\n    console.warn(\"This area has only \" + areaWorldCoords.length + \" points? How is this possible? Let's show the center of the world\");\n    return [{\n      x: 256 / 4,\n      y: 256 / 4\n    }, {\n      x: 256 / 4 * 3,\n      y: 256 / 4 * 3\n    }];\n  }\n\n  return padToPins(MapUtils.getBoundingBox(areaWorldCoords), fieldPins);\n}\n\nfunction getDiagnosisOverlays(field, area) {\n  var _this = this;\n\n  var fields = field ? [field] : area.field;\n\n  var imageOverlayCallBack = function imageOverlayCallBack(field) {\n    var diagnosis = getLatestDiagnosis(field);\n    return diagnosis ? React.createElement(Overlay, {\n      key: new Date().getTime() + \"_\" + field.id + \"_\" + diagnosis.id + \"_IndexOverlay\",\n      bounds: MapUtils.overlayBounding(field.coordinates),\n      image: {\n        uri: BACKEND_BASE_URL + \"/diagnosis/\" + field.id + \"/\" + diagnosis.id + \"/\" + BASE_64_VALIDATION_TOKEN,\n        cache: 'reload'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 4\n      }\n    }) : undefined;\n  };\n\n  return fields.map(function (field) {\n    return imageOverlayCallBack(field);\n  });\n}\n\nfunction getDiagnosisDateMarkers(field, area) {\n  var _getLatestDiagnosis, _getAreaLatestDiagnos;\n\n  var areaOverlayBound = function areaOverlayBound(area) {\n    var coords = [];\n\n    for (var _iterator3 = _createForOfIteratorHelperLoose(area.field), _step3; !(_step3 = _iterator3()).done;) {\n      var _field2 = _step3.value;\n      coords = coords.concat(_field2.coordinates);\n    }\n\n    return MapUtils.lowerCenter(coords);\n  };\n\n  var reportDate = field ? (_getLatestDiagnosis = getLatestDiagnosis(field)) == null ? void 0 : _getLatestDiagnosis.report_date : (_getAreaLatestDiagnos = getAreaLatestDiagnosis(area)) == null ? void 0 : _getAreaLatestDiagnos.report_date;\n  var markers = field ? React.createElement(Marker, {\n    key: field.id + \"_IndexDate\",\n    coordinate: MapUtils.lowerCenter(field.coordinates),\n    title: reportDate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 3\n    }\n  }, React.createElement(View, {\n    style: {\n      backgroundColor: 'white',\n      padding: 0\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 4\n    }\n  }, React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 5\n    }\n  }, reportDate ? formatDate(reportDate) : 'N/D'))) : area ? React.createElement(Marker, {\n    key: area.id + \"_IndexDate\",\n    coordinate: areaOverlayBound(area),\n    title: reportDate,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 3\n    }\n  }, React.createElement(View, {\n    style: {\n      backgroundColor: 'white',\n      padding: 0\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 4\n    }\n  }, React.createElement(Text, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 5\n    }\n  }, reportDate ? formatDate(reportDate) : 'N/D'))) : undefined;\n  return markers;\n}\n\nfunction getIndicesOverlay(field, area, indexTab, indexDate) {\n  var fields, elements, _iterator4, _step4, _field3, imgUri, _await$FileSystem$get, exists;\n\n  return _regeneratorRuntime.async(function getIndicesOverlay$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          fields = field ? [field] : area.field.filter(function (field) {\n            return isIndexAvailable(field);\n          });\n          elements = [];\n          _iterator4 = _createForOfIteratorHelperLoose(fields);\n\n        case 3:\n          if ((_step4 = _iterator4()).done) {\n            _context2.next = 13;\n            break;\n          }\n\n          _field3 = _step4.value;\n          imgUri = getIndexImageLocalUri(_field3, indexTab.name, indexDate);\n          _context2.next = 8;\n          return _regeneratorRuntime.awrap(FileSystem.getInfoAsync(imgUri != null ? imgUri : ''));\n\n        case 8:\n          _await$FileSystem$get = _context2.sent;\n          exists = _await$FileSystem$get.exists;\n\n          if (exists) {\n            elements.push(React.createElement(Overlay, {\n              key: _field3.id + \"_IndexOverlay\",\n              bounds: MapUtils.overlayBounding(_field3.coordinates),\n              image: {\n                uri: imgUri\n              },\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 150,\n                columnNumber: 18\n              }\n            }));\n          } else {\n            elements.push(React.createElement(Marker, {\n              key: _field3.id + \"_IndexOverlay\",\n              coordinate: MapUtils.center(_field3.coordinates),\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 153,\n                columnNumber: 5\n              }\n            }, React.createElement(View, {\n              style: {\n                backgroundColor: 'white',\n                padding: 0\n              },\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 154,\n                columnNumber: 6\n              }\n            }, React.createElement(Text, {\n              __self: this,\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 155,\n                columnNumber: 7\n              }\n            }, \"Imagem n\\xE3o dispon\\xEDvel\"))));\n          }\n\n        case 11:\n          _context2.next = 3;\n          break;\n\n        case 13:\n          return _context2.abrupt(\"return\", elements);\n\n        case 14:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, this, null, Promise);\n}\n\nfunction getIndicesMarkers(field, area, indexTab, indexDate) {\n  var areaOverlayBound, markers;\n  return _regeneratorRuntime.async(function getIndicesMarkers$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          areaOverlayBound = function areaOverlayBound(area) {\n            var coords = [];\n\n            for (var _iterator5 = _createForOfIteratorHelperLoose(area.field), _step5; !(_step5 = _iterator5()).done;) {\n              var _field4 = _step5.value;\n              coords = coords.concat(_field4.coordinates);\n            }\n\n            return MapUtils.lowerCenter(coords);\n          };\n\n          markers = field && indexDate ? React.createElement(Marker, {\n            key: field.id + \"_IndexDate\",\n            coordinate: MapUtils.lowerCenter(field.coordinates),\n            title: indexDate,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 179,\n              columnNumber: 4\n            }\n          }, React.createElement(View, {\n            style: {\n              backgroundColor: 'white',\n              padding: 0\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 180,\n              columnNumber: 5\n            }\n          }, React.createElement(Text, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 181,\n              columnNumber: 6\n            }\n          }, indexDate ? formatDate(indexDate) : 'N/D'))) : area ? React.createElement(Marker, {\n            key: area.id + \"_IndexDate\",\n            coordinate: areaOverlayBound(area),\n            title: indexDate,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 185,\n              columnNumber: 4\n            }\n          }, React.createElement(View, {\n            style: {\n              backgroundColor: 'white',\n              padding: 0\n            },\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 186,\n              columnNumber: 5\n            }\n          }, React.createElement(Text, {\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 187,\n              columnNumber: 6\n            }\n          }, indexDate ? formatDate(indexDate) : 'N/D'))) : undefined;\n          return _context3.abrupt(\"return\", markers);\n\n        case 3:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, this, null, Promise);\n}\n\nexport function Map() {\n  var _this2 = this,\n      _farm$imaging$0$direc,\n      _farm$imaging$;\n\n  var area = useMainSelector(function (state) {\n    return state.interactionData.general.currentArea;\n  });\n  var field = useMainSelector(function (state) {\n    return state.interactionData.general.currentField;\n  });\n  var farm = useMainSelector(function (state) {\n    return state.backendData.user.many_user_has_many_farm[0].farm;\n  });\n  var tab = useMainSelector(function (state) {\n    return state.interactionData.general.currentTab;\n  });\n  var indexTab = useMainSelector(function (state) {\n    return state.interactionData.general.indicesCurrentTab;\n  });\n  var indexDate = useMainSelector(function (state) {\n    return state.interactionData.general.indicesCurrentDate;\n  });\n  var semaphoreThresholds = useThresholds();\n\n  var _useState = useState(new Array()),\n      _useState2 = _slicedToArray(_useState, 2),\n      indicesOverlays = _useState2[0],\n      setIndicesOverlay = _useState2[1];\n\n  var _useState3 = useState({}),\n      _useState4 = _slicedToArray(_useState3, 2),\n      indicesMarkers = _useState4[0],\n      setIndicesMarkers = _useState4[1];\n\n  useEffect(function () {\n    (function _callee2() {\n      var overlays, markers;\n      return _regeneratorRuntime.async(function _callee2$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return _regeneratorRuntime.awrap(getIndicesOverlay(field, area, indexTab, indexDate));\n\n            case 2:\n              overlays = _context4.sent;\n              if (overlays) setIndicesOverlay(overlays);\n              _context4.next = 6;\n              return _regeneratorRuntime.awrap(getIndicesMarkers(field, area, indexTab, indexDate));\n\n            case 6:\n              markers = _context4.sent;\n              if (markers) setIndicesMarkers(markers);\n\n            case 8:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, [field, area, indexTab, indexDate]);\n\n  var _useMemo = useMemo(function () {\n    var points = area.field.map(function (field) {\n      return {\n        latitude: field.lat,\n        longitude: field.long\n      };\n    });\n    var markers = area.field.map(function (field) {\n      return React.createElement(Marker, {\n        key: field.id + \"_FieldPin\",\n        coordinate: fieldToLatLng(field),\n        title: field.name,\n        onPress: function onPress() {\n          if (field.crop[0].diagnosis[0]) {\n            dispatch({\n              type: 'CHANGE_FIELD',\n              field: field\n            });\n            dispatch({\n              type: 'CHANGE_GENERAL_CARD',\n              card: 'Profile'\n            });\n          } else {\n            dispatch({\n              type: 'CHANGE_FIELD',\n              field: field\n            });\n            dispatch({\n              type: 'CHANGE_GENERAL_CARD',\n              card: 'Profile'\n            });\n          }\n        },\n        __self: _this2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 4\n        }\n      }, React.createElement(MapPin, {\n        id: field.code,\n        pinColor: getMapPinColorDate(field),\n        __self: _this2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 5\n        }\n      }));\n    });\n    var borders = area.field.map(function (field) {\n      return React.createElement(Polygon, {\n        key: field.id + \"_FieldPin\",\n        coordinates: field.coordinates.map(function (item) {\n          return {\n            longitude: item[0],\n            latitude: item[1]\n          };\n        }),\n        strokeColor: \"white\",\n        strokeWidth: Number(REM_SCALE),\n        zIndex: 10,\n        __self: _this2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 4\n        }\n      });\n    });\n    return [points, markers, borders];\n  }, [area, tab, semaphoreThresholds]),\n      _useMemo2 = _slicedToArray(_useMemo, 3),\n      fieldPins = _useMemo2[0],\n      fieldPinMarkers = _useMemo2[1],\n      borders = _useMemo2[2];\n\n  var placeToShow = useMemo(function () {\n    return getPlaceToShow(area, field, fieldPins);\n  }, [area, field, fieldPins]);\n  var mustUpdateCamera = useStatesChanged([area, field]);\n  return React.createElement(AutoRefreshableMap, {\n    isScrollEnabled: field !== undefined || area !== undefined,\n    isZoomEnabled: field !== undefined || area !== undefined,\n    place: placeToShow,\n    shouldRefresh: function shouldRefresh() {\n      return mustUpdateCamera;\n    },\n    onPress: logCurrentCamera,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 3\n    }\n  }, React.createElement(UrlTile, {\n    flipY: true,\n    urlTemplate: BACKEND_BASE_URL + \"/map-tiles/\" + area.farm_id + \"/\" + ((_farm$imaging$0$direc = (_farm$imaging$ = farm.imaging[0]) == null ? void 0 : _farm$imaging$.directory) != null ? _farm$imaging$0$direc : '') + \"/{z}/{x}/{y}/\" + BASE_64_VALIDATION_TOKEN,\n    zIndex: -1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 4\n    }\n  }), fieldPinMarkers, tab !== 'Diagnosis' && borders, tab === 'Indices' && indexDate && indicesOverlays, tab === 'Indices' && indexDate && indicesMarkers, tab === 'Diagnosis' && getDiagnosisOverlays(field, area), tab === 'Diagnosis' && getDiagnosisDateMarkers(field, area), tab === 'Overview' && borders);\n}","map":{"version":3,"sources":["/home/jmgoncalves/git/agro-x/frontend/components/02-general/map/map.tsx"],"names":["React","useEffect","useMemo","useState","Marker","Polygon","Overlay","UrlTile","dispatch","useMainSelector","AutoRefreshableMap","useStatesChanged","MapPin","getMapPinColorDate","useThresholds","MapUtils","getIndexImageLocalUri","isIndexAvailable","formatDate","getAreaLatestDiagnosis","getLatestDiagnosis","REM_SCALE","BACKEND_BASE_URL","FileSystem","BASE_64_VALIDATION_TOKEN","logCurrentCamera","map","dimensions","getCamera","camera","console","log","widthPx","heightPx","fieldToLatLng","field","latitude","lat","longitude","long","padToPins","box","pins","addRoughPaddingToBoundingBox","addEnoughPaddingToEnsurePinsVisible","p","geoToWorldCoords","bottom","left","right","top","fieldGeoToWorldCoords","coords","coordinates","push","getPlaceToShow","area","fieldPins","fieldWorldCoords","length","center","zoom","getBoundingBox","areaWorldCoords","concat","warn","x","y","getDiagnosisOverlays","fields","imageOverlayCallBack","diagnosis","Date","getTime","id","overlayBounding","uri","cache","undefined","getDiagnosisDateMarkers","areaOverlayBound","lowerCenter","reportDate","report_date","markers","backgroundColor","padding","getIndicesOverlay","indexTab","indexDate","filter","elements","imgUri","name","getInfoAsync","exists","getIndicesMarkers","Map","state","interactionData","general","currentArea","currentField","farm","backendData","user","many_user_has_many_farm","tab","currentTab","indicesCurrentTab","indicesCurrentDate","semaphoreThresholds","Array","indicesOverlays","setIndicesOverlay","indicesMarkers","setIndicesMarkers","overlays","points","crop","type","card","code","borders","item","Number","fieldPinMarkers","placeToShow","mustUpdateCamera","farm_id","imaging","directory"],"mappings":"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","sourcesContent":["import React, { useEffect, useMemo, useState } from 'react';\nimport MapView, { Marker, Polygon, Overlay, LatLng, UrlTile } from 'react-native-maps';\nimport { Text, View } from 'react-native';\nimport { dispatch, useMainSelector } from '../../../redux-things';\nimport { AutoRefreshableMap } from './auto-refreshable-map';\nimport { useStatesChanged } from '../../../src/custom-hooks/use-states-changed';\nimport { Index, Models } from '../../../models';\nimport { MapPin } from './map-pin';\nimport { getMapPinColorDate, useThresholds } from '../../../src/utils/semaphore';\nimport * as MapUtils from './map-utils';\nimport { getIndexImageLocalUri, isIndexAvailable } from '../../../src/utils/visiona-indices';\nimport { formatDate, getAreaLatestDiagnosis, getLatestDiagnosis, REM_SCALE } from '../../../src/utils';\nimport { BACKEND_BASE_URL } from '../../../src/network';\nimport * as FileSystem from 'expo-file-system';\nimport { alertDatePrescription, displayAlert } from '../../../src/utils/alert-messages';\n\nconst BASE_64_VALIDATION_TOKEN = 'WDl5NDhVV2ZlRTAsSlo3JWJYfUdJe3ZvLlsmayFILWs4XXVldDg7WA==';\n\nfunction logCurrentCamera(map: MapView, dimensions: MapUtils.MapViewDimensions): void {\n\tvoid (async () => {\n\t\tconst camera = await map.getCamera();\n\t\tconsole.log(`Current map dimensions are ${dimensions.widthPx}x${dimensions.heightPx} and current camera is:`, camera);\n\t})();\n}\n\nfunction fieldToLatLng(field: Models.field): MapUtils.LatLng {\n\treturn {\n\t\tlatitude: field.lat,\n\t\tlongitude: field.long,\n\t};\n}\n\nfunction padToPins(box: MapUtils.BoundingBox, pins: MapUtils.LatLng[]): MapUtils.BoundingBox {\n\treturn MapUtils.addRoughPaddingToBoundingBox(\n\t\tMapUtils.addEnoughPaddingToEnsurePinsVisible(\n\t\t\tbox,\n\t\t\tpins.map((p) => MapUtils.geoToWorldCoords(p)),\n\t\t),\n\t\t{ bottom: 10, left: 0, right: 0, top: 10 },\n\t);\n}\n\nfunction fieldGeoToWorldCoords(field: Models.field): MapUtils.WorldCoordinate[] {\n\tconst coords: MapUtils.WorldCoordinate[] = [];\n\tfor (const [longitude, latitude] of field.coordinates) {\n\t\tcoords.push(MapUtils.geoToWorldCoords({ latitude, longitude }));\n\t}\n\n\treturn coords;\n}\n\nfunction getPlaceToShow(area: Models.area, field: Models.field | undefined, fieldPins: MapUtils.LatLng[]): MapUtils.BoundingBox | MapUtils.SimpleCamera {\n\tif (field) {\n\t\tconst fieldWorldCoords = fieldGeoToWorldCoords(field);\n\n\t\tif (fieldWorldCoords.length < 3) {\n\t\t\treturn {\n\t\t\t\tcenter: { latitude: field.lat, longitude: field.long },\n\t\t\t\tzoom: 17,\n\t\t\t};\n\t\t}\n\n\t\treturn padToPins(MapUtils.getBoundingBox(fieldWorldCoords), [fieldToLatLng(field)]);\n\t}\n\n\t// calculate the bounding box for the whole area\n\tlet areaWorldCoords: MapUtils.WorldCoordinate[] = [];\n\tfor (const field of area.field) {\n\t\tareaWorldCoords = areaWorldCoords.concat(fieldGeoToWorldCoords(field));\n\t}\n\n\tif (areaWorldCoords.length < 3) {\n\t\tconsole.warn(`This area has only ${areaWorldCoords.length} points? How is this possible? Let's show the center of the world`);\n\t\treturn [\n\t\t\t{ x: 256 / 4, y: 256 / 4 },\n\t\t\t{ x: (256 / 4) * 3, y: (256 / 4) * 3 },\n\t\t];\n\t}\n\n\treturn padToPins(MapUtils.getBoundingBox(areaWorldCoords), fieldPins);\n}\n\nfunction getDiagnosisOverlays(field: Models.field | undefined, area: Models.area) {\n\tconst fields = field ? [field] : area.field;\n\tconst imageOverlayCallBack = (field: Models.field) => {\n\t\t// for now we're displaying only the most recent diagnosis\n\t\tconst diagnosis = getLatestDiagnosis(field);\n\t\treturn diagnosis ? (\n\t\t\t<Overlay\n\t\t\t\tkey={`${new Date().getTime()}_${field.id}_${diagnosis.id}_IndexOverlay`}\n\t\t\t\tbounds={MapUtils.overlayBounding(field.coordinates)}\n\t\t\t\t// https://github.com/react-native-maps/react-native-maps/pull/3018\n\t\t\t\t// this is a kludge !!!! the correct way to use this is to send the bearer token in a header\n\t\t\t\t// but the this Overlay component is not working, so for now we pass the validation pipe token in the uri\n\t\t\t\t// check the backend also fo the same TODO message. the validation token is encoded in base64\n\t\t\t\timage={{\n\t\t\t\t\turi: `${BACKEND_BASE_URL}/diagnosis/${field.id}/${diagnosis.id}/${BASE_64_VALIDATION_TOKEN}`,\n\t\t\t\t\tcache: 'reload',\n\t\t\t\t}}\n\t\t\t/>\n\t\t) : undefined;\n\t};\n\n\t// images to be overlayed on top of the map\n\treturn fields.map((field) => imageOverlayCallBack(field));\n}\n\nfunction getDiagnosisDateMarkers(field: Models.field | undefined, area: Models.area) {\n\tconst areaOverlayBound = (area: Models.area) => {\n\t\tlet coords: Array<[number, number]> = [];\n\t\tfor (const field of area.field) {\n\t\t\tcoords = coords.concat(field.coordinates);\n\t\t}\n\n\t\treturn MapUtils.lowerCenter(coords);\n\t};\n\n\tconst reportDate = field ? getLatestDiagnosis(field)?.report_date : getAreaLatestDiagnosis(area)?.report_date;\n\t// markers with date of the image to be displayed on top of the field\n\tconst markers = field ? (\n\t\t<Marker key={`${field.id}_IndexDate`} coordinate={MapUtils.lowerCenter(field.coordinates)} title={reportDate}>\n\t\t\t<View style={{ backgroundColor: 'white', padding: 0 }}>\n\t\t\t\t<Text>{reportDate ? formatDate(reportDate) : 'N/D'}</Text>\n\t\t\t</View>\n\t\t</Marker>\n\t) : area ? (\n\t\t<Marker key={`${area.id}_IndexDate`} coordinate={areaOverlayBound(area)} title={reportDate}>\n\t\t\t<View style={{ backgroundColor: 'white', padding: 0 }}>\n\t\t\t\t<Text>{reportDate ? formatDate(reportDate) : 'N/D'}</Text>\n\t\t\t</View>\n\t\t</Marker>\n\t) : undefined;\n\n\treturn markers;\n}\n\nasync function getIndicesOverlay(field: Models.field | undefined, area: Models.area, indexTab: Index, indexDate: string | undefined) {\n\tconst fields = field\n\t\t? [field]\n\t\t: area.field.filter((field) => {\n\t\t\t\treturn isIndexAvailable(field);\n\t\t  });\n\n\tconst elements = [];\n\n\tfor (const field of fields) {\n\t\tconst imgUri = getIndexImageLocalUri(field, indexTab.name, indexDate!);\n\t\tconst { exists } = await FileSystem.getInfoAsync(imgUri ?? '');\n\t\tif (exists) {\n\t\t\telements.push(<Overlay key={`${field.id}_IndexOverlay`} bounds={MapUtils.overlayBounding(field.coordinates)} image={{ uri: imgUri }} />);\n\t\t} else {\n\t\t\telements.push(\n\t\t\t\t<Marker key={`${field.id}_IndexOverlay`} coordinate={MapUtils.center(field.coordinates)}>\n\t\t\t\t\t<View style={{ backgroundColor: 'white', padding: 0 }}>\n\t\t\t\t\t\t<Text>Imagem não disponível</Text>\n\t\t\t\t\t</View>\n\t\t\t\t</Marker>,\n\t\t\t);\n\t\t}\n\t}\n\n\treturn elements;\n}\n\nasync function getIndicesMarkers(field: Models.field | undefined, area: Models.area, indexTab: Index, indexDate: string | undefined) {\n\tconst areaOverlayBound = (area: Models.area) => {\n\t\tlet coords: Array<[number, number]> = [];\n\n\t\tfor (const field of area.field) {\n\t\t\tcoords = coords.concat(field.coordinates);\n\t\t}\n\n\t\treturn MapUtils.lowerCenter(coords);\n\t};\n\n\t// markers with date of the image to be displayed on top of the field\n\tconst markers =\n\t\tfield && indexDate ? (\n\t\t\t<Marker key={`${field.id}_IndexDate`} coordinate={MapUtils.lowerCenter(field.coordinates)} title={indexDate}>\n\t\t\t\t<View style={{ backgroundColor: 'white', padding: 0 }}>\n\t\t\t\t\t<Text>{indexDate ? formatDate(indexDate) : 'N/D'}</Text>\n\t\t\t\t</View>\n\t\t\t</Marker>\n\t\t) : area ? (\n\t\t\t<Marker key={`${area.id}_IndexDate`} coordinate={areaOverlayBound(area)} title={indexDate}>\n\t\t\t\t<View style={{ backgroundColor: 'white', padding: 0 }}>\n\t\t\t\t\t<Text>{indexDate ? formatDate(indexDate) : 'N/D'}</Text>\n\t\t\t\t</View>\n\t\t\t</Marker>\n\t\t) : undefined;\n\n\treturn markers;\n}\n\nexport function Map() {\n\tconst area = useMainSelector((state) => state.interactionData.general.currentArea)!;\n\tconst field = useMainSelector((state) => state.interactionData.general.currentField);\n\tconst farm = useMainSelector((state) => state.backendData.user!.many_user_has_many_farm[0].farm)!;\n\tconst tab = useMainSelector((state) => state.interactionData.general.currentTab);\n\tconst indexTab = useMainSelector((state) => state.interactionData.general.indicesCurrentTab);\n\tconst indexDate = useMainSelector((state) => state.interactionData.general.indicesCurrentDate);\n\tconst semaphoreThresholds = useThresholds();\n\n\tconst [indicesOverlays, setIndicesOverlay] = useState(new Array<JSX.Element>());\n\tconst [indicesMarkers, setIndicesMarkers] = useState({});\n\n\t// setup vegetation indices maps from visiona api\n\tuseEffect(() => {\n\t\t(async () => {\n\t\t\tconst overlays = await getIndicesOverlay(field, area, indexTab, indexDate);\n\t\t\tif (overlays) setIndicesOverlay(overlays);\n\n\t\t\tconst markers = await getIndicesMarkers(field, area, indexTab, indexDate);\n\t\t\tif (markers) setIndicesMarkers(markers);\n\t\t})();\n\t}, [field, area, indexTab, indexDate]);\n\n\t// To improve performance, `useMemo` lets us recalculate the markers only when the area/tab changes.\n\tconst [fieldPins, fieldPinMarkers, borders] = useMemo(() => {\n\t\tconst points = area.field.map((field) => ({\n\t\t\tlatitude: field.lat,\n\t\t\tlongitude: field.long,\n\t\t}));\n\n\t\tconst markers = area.field.map((field) => (\n\t\t\t<Marker\n\t\t\t\tkey={`${field.id}_FieldPin`}\n\t\t\t\tcoordinate={fieldToLatLng(field)}\n\t\t\t\ttitle={field.name}\n\t\t\t\tonPress={() => {\n\t\t\t\t\tif (field.crop[0].diagnosis[0]) {\n\t\t\t\t\t\t// displayAlert(alertDatePrescription);\n\t\t\t\t\t\tdispatch({ type: 'CHANGE_FIELD', field });\n\t\t\t\t\t\tdispatch({ type: 'CHANGE_GENERAL_CARD', card: 'Profile' });\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdispatch({ type: 'CHANGE_FIELD', field });\n\t\t\t\t\t\tdispatch({ type: 'CHANGE_GENERAL_CARD', card: 'Profile' });\n\t\t\t\t\t}\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t<MapPin id={field.code} pinColor={getMapPinColorDate(field)} />\n\t\t\t</Marker>\n\t\t));\n\n\t\tconst borders = area.field.map((field) => (\n\t\t\t<Polygon\n\t\t\t\tkey={`${field.id}_FieldPin`}\n\t\t\t\tcoordinates={field.coordinates.map((item) => ({ longitude: item[0], latitude: item[1] }))}\n\t\t\t\tstrokeColor=\"white\"\n\t\t\t\tstrokeWidth={Number(REM_SCALE)}\n\t\t\t\tzIndex={10}\n\t\t\t/>\n\t\t));\n\n\t\treturn [points, markers, borders];\n\t}, [area, tab, semaphoreThresholds]);\n\n\t// To improve performance, `useMemo` lets us recalculate the place only when the involved things change.\n\tconst placeToShow = useMemo(() => {\n\t\treturn getPlaceToShow(area, field, fieldPins);\n\t}, [area, field, fieldPins]);\n\n\tconst mustUpdateCamera = useStatesChanged([area, field]);\n\n\treturn (\n\t\t<AutoRefreshableMap\n\t\t\tisScrollEnabled={field !== undefined || area !== undefined}\n\t\t\tisZoomEnabled={field !== undefined || area !== undefined}\n\t\t\tplace={placeToShow}\n\t\t\tshouldRefresh={() => mustUpdateCamera}\n\t\t\tonPress={logCurrentCamera}\n\t\t>\n\t\t\t<UrlTile\n\t\t\t\tflipY\n\t\t\t\turlTemplate={`${BACKEND_BASE_URL}/map-tiles/${area.farm_id}/${farm.imaging[0]?.directory ?? ''}/{z}/{x}/{y}/${BASE_64_VALIDATION_TOKEN}`}\n\t\t\t\tzIndex={-1} /* an absurd low z index to make sure this layer is below all others */\n\t\t\t/>\n\t\t\t{fieldPinMarkers}\n\t\t\t{tab !== 'Diagnosis' && borders}\n\t\t\t{tab === 'Indices' && indexDate && indicesOverlays}\n\t\t\t{tab === 'Indices' && indexDate && indicesMarkers}\n\t\t\t{tab === 'Diagnosis' && getDiagnosisOverlays(field, area)}\n\t\t\t{tab === 'Diagnosis' && getDiagnosisDateMarkers(field, area)}\n\t\t\t{tab === 'Overview' && borders}\n\t\t</AutoRefreshableMap>\n\t);\n}\n"]},"metadata":{},"sourceType":"module"}