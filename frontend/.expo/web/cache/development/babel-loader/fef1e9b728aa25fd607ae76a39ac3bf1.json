{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/jmgoncalves/git/agro-x/frontend/components/04-method-selection/index-report.tsx\";\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } it = o[Symbol.iterator](); return it.next.bind(it); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { Button } from 'react-native-paper';\nimport { createTStyleSheet } from \"../../src/utils/style\";\nimport { asAliveOnlyScreenComponent } from \"../../src/utils/smart-lifecycle-components\";\nimport { ChoosableFieldCard } from \"./choosable-field-card-report\";\nimport { ScrollView } from 'react-native-gesture-handler';\nimport { useMainSelector } from \"../../redux-things\";\nimport { ClosableHeader } from \"../00-common\";\nimport { getLatestDiagnosis } from \"../../src/utils\";\nimport { confirmQuotationLeave } from \"../../src/utils/alert-messages\";\n\nfunction userHasChanged(initialState, finalState) {\n  var testVal;\n\n  if (initialState.size !== finalState.size) {\n    return true;\n  }\n\n  for (var _iterator = _createForOfIteratorHelperLoose(initialState), _step; !(_step = _iterator()).done;) {\n    var _ref = _step.value;\n\n    var _ref2 = _slicedToArray(_ref, 2);\n\n    var key = _ref2[0];\n    var val = _ref2[1];\n    testVal = finalState.get(key);\n\n    if (testVal !== val || testVal === undefined && !finalState.has(key)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nexport var MethodSelectionReport = asAliveOnlyScreenComponent(function (_ref3) {\n  var navigation = _ref3.navigation;\n  var area = useMainSelector(function (state) {\n    return state.interactionData.general.currentArea;\n  });\n\n  function compare(a, b) {\n    if (getLatestDiagnosis(a).affected_area_ha > getLatestDiagnosis(b).affected_area_ha) return -1;\n    if (getLatestDiagnosis(b).affected_area_ha > getLatestDiagnosis(a).affected_area_ha) return 1;\n    return 0;\n  }\n\n  return React.createElement(View, {\n    style: {\n      flex: 1\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 3\n    }\n  }, React.createElement(ClosableHeader, {\n    onClose: function onClose() {\n      void confirmQuotationLeave(navigation);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 4\n    }\n  }), React.createElement(View, {\n    style: styles.mainView,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 4\n    }\n  }, React.createElement(Text, {\n    style: styles.titleText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }\n  }, \"Selecione os tipos relat\\xF3rios que voc\\xEA deseja contratar\"), React.createElement(ScrollView, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: styles.listView,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 6\n    }\n  }, React.createElement(ChoosableFieldCard, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }))), React.createElement(Button, {\n    uppercase: false,\n    mode: \"contained\",\n    style: styles.button,\n    labelStyle: styles.buttonText,\n    onPress: function _callee() {\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              navigation.navigate('FieldSelectionFromServicesReport');\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }\n  }, \"Continuar\")));\n});\nvar styles = createTStyleSheet({\n  mainView: {\n    flex: 1,\n    paddingHorizontal: '16rem',\n    backgroundColor: 'white'\n  },\n  titleText: {\n    paddingLeft: '8rem',\n    paddingVertical: '8rem',\n    fontSize: '23rem'\n  },\n  listView: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    marginHorizontal: '2rem'\n  },\n  button: {\n    marginVertical: '24rem',\n    height: '45rem',\n    justifyContent: 'center',\n    width: '100%'\n  },\n  subtitle: {\n    fontSize: '16rem',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  selected: {\n    fontSize: '12rem',\n    alignItems: 'center',\n    justifyContent: 'center',\n    color: '#78849E'\n  },\n  buttonText: {\n    fontSize: '14rem'\n  }\n});","map":{"version":3,"sources":["/home/jmgoncalves/git/agro-x/frontend/components/04-method-selection/index-report.tsx"],"names":["React","Button","createTStyleSheet","asAliveOnlyScreenComponent","ChoosableFieldCard","ScrollView","useMainSelector","ClosableHeader","getLatestDiagnosis","confirmQuotationLeave","userHasChanged","initialState","finalState","testVal","size","key","val","get","undefined","has","MethodSelectionReport","navigation","area","state","interactionData","general","currentArea","compare","a","b","affected_area_ha","flex","styles","mainView","titleText","listView","button","buttonText","navigate","paddingHorizontal","backgroundColor","paddingLeft","paddingVertical","fontSize","flexDirection","flexWrap","marginHorizontal","marginVertical","height","justifyContent","width","subtitle","alignItems","selected","color"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { View, Text } from 'react-native';\nimport { Button } from 'react-native-paper';\nimport { createTStyleSheet } from '../../src/utils/style';\n\nimport { asAliveOnlyScreenComponent } from '../../src/utils/smart-lifecycle-components';\n\nimport { ChoosableFieldCard } from './choosable-field-card-report';\n\nimport { ScrollView } from 'react-native-gesture-handler';\nimport { dispatch, useMainSelector } from '../../redux-things';\nimport { ClosableHeader } from '../00-common';\n\nimport { AgroXScreenProps } from '../navigation-types';\nimport { Models, PulverizationMethod, PulverizationMethods } from '../../models';\nimport { getLatestDiagnosis, getLatestPrescriptionPulverizationMethod } from '../../src/utils';\nimport { asyncCancelableAlert, confirmQuotationLeave, userHasChangedSuggestedMethod } from '../../src/utils/alert-messages';\n\ntype ScreenProps = AgroXScreenProps<'MethodSelection'>;\n\nfunction userHasChanged(initialState: Map<number, PulverizationMethod | undefined>, finalState: Map<number, PulverizationMethod | undefined>) {\n\tlet testVal;\n\tif (initialState.size !== finalState.size) {\n\t\treturn true;\n\t}\n\n\tfor (const [key, val] of initialState) {\n\t\ttestVal = finalState.get(key);\n\t\t// in cases of an undefined value, make sure the key\n\t\t// actually exists on the object so there are no false positives\n\t\tif (testVal !== val || (testVal === undefined && !finalState.has(key))) {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}\n\nexport const MethodSelectionReport = asAliveOnlyScreenComponent(({ navigation }: ScreenProps) => {\n\tconst area = useMainSelector((state) => state.interactionData.general.currentArea)!;\n\t// const initialState = generateStartingMap(route.params.selectedFields);\n\t// const [fieldsWithMethods, setFieldsWithMethods] = React.useState(initialState);\n\n\tfunction compare(a: Models.field, b: Models.field) {\n\t\tif (getLatestDiagnosis(a)!.affected_area_ha > getLatestDiagnosis(b)!.affected_area_ha) return -1;\n\t\tif (getLatestDiagnosis(b)!.affected_area_ha > getLatestDiagnosis(a)!.affected_area_ha) return 1;\n\t\treturn 0;\n\t}\n\n\treturn (\n\t\t<View style={{ flex: 1 }}>\n\t\t\t<ClosableHeader\n\t\t\t\tonClose={() => {\n\t\t\t\t\tvoid confirmQuotationLeave(navigation);\n\t\t\t\t}}\n\t\t\t/>\n\n\t\t\t<View style={styles.mainView}>\n\t\t\t\t<Text style={styles.titleText}>{`Selecione os tipos relatórios que você deseja contratar`}</Text>\n\t\t\t\t<ScrollView>\n\t\t\t\t\t<View style={styles.listView}>\n\t\t\t\t\t\t<ChoosableFieldCard />\n\t\t\t\t\t</View>\n\t\t\t\t</ScrollView>\n\t\t\t\t<Button\n\t\t\t\t\tuppercase={false}\n\t\t\t\t\tmode=\"contained\"\n\t\t\t\t\tstyle={styles.button}\n\t\t\t\t\tlabelStyle={styles.buttonText}\n\t\t\t\t\tonPress={async () => {\n\t\t\t\t\t\t// if (userHasChanged(initialState, fieldsWithMethods)) {\n\t\t\t\t\t\t// \tconst response = await asyncCancelableAlert(userHasChangedSuggestedMethod);\n\t\t\t\t\t\t// \tif (response === 'CONFIRM') {\n\t\t\t\t\t\t// \t\t// dispatch({ type: 'CHANGE_FIELD_WITH_METHODS', fieldsWithMethods });\n\t\t\t\t\t\tnavigation.navigate('FieldSelectionFromServicesReport');\n\t\t\t\t\t\t// \t}\n\t\t\t\t\t\t// } else {\n\t\t\t\t\t\t// \t// dispatch({ type: 'CHANGE_FIELD_WITH_METHODS', fieldsWithMethods });\n\t\t\t\t\t\t// \tnavigation.navigate('DateSelection');\n\t\t\t\t\t\t// }\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\tContinuar\n\t\t\t\t</Button>\n\t\t\t</View>\n\t\t</View>\n\t);\n});\n\nconst styles = createTStyleSheet({\n\tmainView: {\n\t\tflex: 1,\n\t\tpaddingHorizontal: '16rem',\n\t\tbackgroundColor: 'white',\n\t},\n\ttitleText: {\n\t\tpaddingLeft: '8rem',\n\t\tpaddingVertical: '8rem',\n\t\tfontSize: '23rem',\n\t},\n\n\tlistView: {\n\t\tflexDirection: 'row',\n\t\tflexWrap: 'wrap',\n\t\tmarginHorizontal: '2rem',\n\t},\n\tbutton: {\n\t\tmarginVertical: '24rem',\n\t\theight: '45rem',\n\t\tjustifyContent: 'center',\n\t\twidth: '100%',\n\t},\n\tsubtitle: {\n\t\tfontSize: '16rem',\n\t\talignItems: 'center',\n\t\tjustifyContent: 'center',\n\t},\n\tselected: {\n\t\tfontSize: '12rem',\n\t\talignItems: 'center',\n\t\tjustifyContent: 'center',\n\t\tcolor: '#78849E',\n\t},\n\tbuttonText: {\n\t\tfontSize: '14rem',\n\t},\n});\n"]},"metadata":{},"sourceType":"module"}