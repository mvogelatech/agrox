{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport ky_ from 'ky';\nimport Constants from 'expo-constants';\nimport { getAuthDataWithoutStateUpdate } from \"../../redux-things/utils\";\nexport function getAuthorizationHeader() {\n  var _getAuthDataWithoutSt, userToken;\n\n  return _regeneratorRuntime.async(function getAuthorizationHeader$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _getAuthDataWithoutSt = getAuthDataWithoutStateUpdate(), userToken = _getAuthDataWithoutSt.userToken;\n\n          if (userToken) {\n            _context.next = 3;\n            break;\n          }\n\n          return _context.abrupt(\"return\");\n\n        case 3:\n          return _context.abrupt(\"return\", \"Bearer \" + userToken);\n\n        case 4:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction getDevIpAddress() {\n  var DEV_BACKEND_CONNECTION_PORT = 8080;\n\n  if (!Constants.isDevice) {\n    return \"http://192.168.1.8:\" + DEV_BACKEND_CONNECTION_PORT;\n  }\n\n  try {\n    var url = Constants.manifest.bundleUrl || Constants.manifest.debuggerHost;\n\n    var _split = url.split('://'),\n        _split2 = _slicedToArray(_split, 2),\n        protocol = _split2[0],\n        rest = _split2[1];\n\n    var cleanUrl = rest.replace(/[/:].*$/, '');\n    return protocol + \"://\" + cleanUrl + \":\" + DEV_BACKEND_CONNECTION_PORT;\n  } catch (_unused) {\n    throw new Error('I see you are running in DEV mode in a real device and I could not find your local IP address...');\n  }\n}\n\nexport var BACKEND_BASE_URL = __DEV__ ? getDevIpAddress() : 'https://agroxdev.rj.r.appspot.com';\nexport var kyWithoutAuth = ky_.extend({\n  prefixUrl: BACKEND_BASE_URL,\n  timeout: false,\n  hooks: {\n    beforeRequest: [function _callee(request) {\n      return _regeneratorRuntime.async(function _callee$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              console.log('request', request);\n\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }]\n  },\n  throwHttpErrors: true\n});\nexport var ky = kyWithoutAuth.extend({\n  hooks: {\n    beforeRequest: [function _callee2(request) {\n      var header;\n      return _regeneratorRuntime.async(function _callee2$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return _regeneratorRuntime.awrap(getAuthorizationHeader());\n\n            case 2:\n              header = _context3.sent;\n\n              if (header) {\n                _context3.next = 5;\n                break;\n              }\n\n              throw new Error(\"Refusing to start unauthenticated request.\");\n\n            case 5:\n              request.headers.set('Authorization', header);\n\n            case 6:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }]\n  },\n  timeout: 15000\n});","map":{"version":3,"sources":["/home/jmgoncalves/git/agro-x/frontend/src/network/ky.ts"],"names":["ky_","Constants","getAuthDataWithoutStateUpdate","getAuthorizationHeader","userToken","getDevIpAddress","DEV_BACKEND_CONNECTION_PORT","isDevice","url","manifest","bundleUrl","debuggerHost","split","protocol","rest","cleanUrl","replace","Error","BACKEND_BASE_URL","__DEV__","kyWithoutAuth","extend","prefixUrl","timeout","hooks","beforeRequest","request","console","log","throwHttpErrors","ky","header","headers","set"],"mappings":";;AAAA,OAAOA,GAAP,MAAgB,IAAhB;AACA,OAAOC,SAAP,MAAsB,gBAAtB;AACA,SAASC,6BAAT;AAEA,OAAO,SAAeC,sBAAf;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,kCACgBD,6BAA6B,EAD7C,EACEE,SADF,yBACEA,SADF;;AAAA,cAEDA,SAFC;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA,uDAGWA,SAHX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMP,SAASC,eAAT,GAA2B;AAC1B,MAAMC,2BAA2B,GAAG,IAApC;;AAEA,MAAI,CAACL,SAAS,CAACM,QAAf,EAAyB;AAExB,mCAA6BD,2BAA7B;AACA;;AAED,MAAI;AACH,QAAME,GAAG,GAAGP,SAAS,CAACQ,QAAV,CAAmBC,SAAnB,IAAgCT,SAAS,CAACQ,QAAV,CAAmBE,YAA/D;;AADG,iBAEsBH,GAAG,CAAEI,KAAL,CAAW,KAAX,CAFtB;AAAA;AAAA,QAEIC,QAFJ;AAAA,QAEcC,IAFd;;AAGH,QAAMC,QAAQ,GAAGD,IAAI,CAACE,OAAL,CAAa,SAAb,EAAwB,EAAxB,CAAjB;AACA,WAAUH,QAAV,WAAwBE,QAAxB,SAAoCT,2BAApC;AACA,GALD,CAKE,gBAAM;AACP,UAAM,IAAIW,KAAJ,CAAU,kGAAV,CAAN;AACA;AACD;;AAGD,OAAO,IAAMC,gBAAgB,GAAGC,OAAO,GAAGd,eAAe,EAAlB,GAAuB,mCAAvD;AAEP,OAAO,IAAMe,aAAa,GAAGpB,GAAG,CAACqB,MAAJ,CAAW;AACvCC,EAAAA,SAAS,EAAEJ,gBAD4B;AAEvCK,EAAAA,OAAO,EAAE,KAF8B;AAGvCC,EAAAA,KAAK,EAAE;AACNC,IAAAA,aAAa,EAAE,CACd,iBAAOC,OAAP;AAAA;AAAA;AAAA;AAAA;AAICC,cAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBF,OAAvB;;AAJD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADc;AADT,GAHgC;AAcvCG,EAAAA,eAAe,EAAE;AAdsB,CAAX,CAAtB;AAiBP,OAAO,IAAMC,EAAE,GAAGV,aAAa,CAACC,MAAd,CAAqB;AACtCG,EAAAA,KAAK,EAAE;AACNC,IAAAA,aAAa,EAAE,CACd,kBAAOC,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACsBvB,sBAAsB,EAD5C;;AAAA;AACO4B,cAAAA,MADP;;AAAA,kBAEMA,MAFN;AAAA;AAAA;AAAA;;AAAA,oBAEoB,IAAId,KAAJ,8CAFpB;;AAAA;AAGCS,cAAAA,OAAO,CAACM,OAAR,CAAgBC,GAAhB,CAAoB,eAApB,EAAqCF,MAArC;;AAHD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADc;AADT,GAD+B;AAUtCR,EAAAA,OAAO,EAAE;AAV6B,CAArB,CAAX","sourcesContent":["import ky_ from 'ky';\nimport Constants from 'expo-constants';\nimport { getAuthDataWithoutStateUpdate } from '../../redux-things/utils';\n\nexport async function getAuthorizationHeader(): Promise<string | undefined> {\n\tconst { userToken } = getAuthDataWithoutStateUpdate();\n\tif (!userToken) return;\n\treturn `Bearer ${userToken}`;\n}\n\nfunction getDevIpAddress() {\n\tconst DEV_BACKEND_CONNECTION_PORT = 8080;\n\n\tif (!Constants.isDevice) {\n\t\t// https://developer.android.com/studio/run/emulator-networking#networkaddresses\n\t\treturn `http://192.168.1.8:${DEV_BACKEND_CONNECTION_PORT}`;\n\t}\n\n\ttry {\n\t\tconst url = Constants.manifest.bundleUrl || Constants.manifest.debuggerHost;\n\t\tconst [protocol, rest] = url!.split('://');\n\t\tconst cleanUrl = rest.replace(/[/:].*$/, '');\n\t\treturn `${protocol}://${cleanUrl}:${DEV_BACKEND_CONNECTION_PORT}`;\n\t} catch {\n\t\tthrow new Error('I see you are running in DEV mode in a real device and I could not find your local IP address...');\n\t}\n}\n\n// the backend url for deploy type will be injected by CI during APK generation according to the selected environment (production or development)\nexport const BACKEND_BASE_URL = __DEV__ ? getDevIpAddress() : 'https://agroxdev.rj.r.appspot.com';\n\nexport const kyWithoutAuth = ky_.extend({\n\tprefixUrl: BACKEND_BASE_URL,\n\ttimeout: false,\n\thooks: {\n\t\tbeforeRequest: [\n\t\t\tasync (request) => {\n\t\t\t\t// const header = await getAuthorizationHeader();\n\t\t\t\t// if (!header) throw new Error(`Refusing to start unauthenticated request.`);\n\t\t\t\t// request.headers.set('Authorization', header);\n\t\t\t\tconsole.log('request', request);\n\t\t\t\t// console.log('response', response);\n\t\t\t},\n\t\t],\n\t},\n\tthrowHttpErrors: true,\n});\n\nexport const ky = kyWithoutAuth.extend({\n\thooks: {\n\t\tbeforeRequest: [\n\t\t\tasync (request) => {\n\t\t\t\tconst header = await getAuthorizationHeader();\n\t\t\t\tif (!header) throw new Error(`Refusing to start unauthenticated request.`);\n\t\t\t\trequest.headers.set('Authorization', header);\n\t\t\t},\n\t\t],\n\t},\n\ttimeout: 15000,\n});\n"]},"metadata":{},"sourceType":"module"}