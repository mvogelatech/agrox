{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { ky } from \"./ky\";\nimport { getToken } from \"../notifications/get-token\";\nimport { debug } from \"../debug\";\nvar lastKnownToken;\nvar mustTellBackend = false;\n\nfunction updateLastKnownToken() {\n  var token;\n  return _regeneratorRuntime.async(function updateLastKnownToken$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(getToken());\n\n        case 2:\n          token = _context.sent;\n\n          if (token) {\n            _context.next = 5;\n            break;\n          }\n\n          return _context.abrupt(\"return\");\n\n        case 5:\n          if (token !== lastKnownToken) {\n            lastKnownToken = token;\n            mustTellBackend = true;\n          }\n\n        case 6:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction tellBackendIfApplicable() {\n  return _regeneratorRuntime.async(function tellBackendIfApplicable$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          debug('FCM token:', lastKnownToken);\n\n          if (!(!mustTellBackend || !lastKnownToken)) {\n            _context2.next = 3;\n            break;\n          }\n\n          return _context2.abrupt(\"return\");\n\n        case 3:\n          _context2.prev = 3;\n          _context2.next = 6;\n          return _regeneratorRuntime.awrap(ky.post('register-fcm-token', {\n            json: {\n              token: lastKnownToken\n            }\n          }));\n\n        case 6:\n          mustTellBackend = false;\n          _context2.next = 12;\n          break;\n\n        case 9:\n          _context2.prev = 9;\n          _context2.t0 = _context2[\"catch\"](3);\n\n          if (__DEV__) {\n            console.warn(\"Failed to tell backend FCM token: \" + _context2.t0.message);\n          }\n\n        case 12:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, [[3, 9]], Promise);\n}\n\nfunction _tryToUpdateFcmToken() {\n  return _regeneratorRuntime.async(function _tryToUpdateFcmToken$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return _regeneratorRuntime.awrap(updateLastKnownToken());\n\n        case 3:\n          _context3.next = 5;\n          return _regeneratorRuntime.awrap(tellBackendIfApplicable());\n\n        case 5:\n          _context3.next = 9;\n          break;\n\n        case 7:\n          _context3.prev = 7;\n          _context3.t0 = _context3[\"catch\"](0);\n\n        case 9:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, [[0, 7]], Promise);\n}\n\nexport function tryToUpdateFcmToken() {\n  void _tryToUpdateFcmToken();\n}","map":{"version":3,"sources":["/home/jmgoncalves/git/agro-x/frontend/src/network/update-fcm-token.ts"],"names":["ky","getToken","debug","lastKnownToken","mustTellBackend","updateLastKnownToken","token","tellBackendIfApplicable","post","json","__DEV__","console","warn","message","_tryToUpdateFcmToken","tryToUpdateFcmToken"],"mappings":";AAAA,SAASA,EAAT;AACA,SAASC,QAAT;AAEA,SAASC,KAAT;AAEA,IAAIC,cAAJ;AACA,IAAIC,eAAe,GAAG,KAAtB;;AAEA,SAAeC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACqBJ,QAAQ,EAD7B;;AAAA;AACOK,UAAAA,KADP;;AAAA,cAGMA,KAHN;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAOC,cAAIA,KAAK,KAAKH,cAAd,EAA8B;AAC7BA,YAAAA,cAAc,GAAGG,KAAjB;AACAF,YAAAA,eAAe,GAAG,IAAlB;AACA;;AAVF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAaA,SAAeG,uBAAf;AAAA;AAAA;AAAA;AAAA;AACCL,UAAAA,KAAK,CAAC,YAAD,EAAeC,cAAf,CAAL;;AADD,gBAGK,CAACC,eAAD,IAAoB,CAACD,cAH1B;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAAA;AAAA;AAAA,2CAQQH,EAAE,CAACQ,IAAH,CAAQ,oBAAR,EAA8B;AAAEC,YAAAA,IAAI,EAAE;AAAEH,cAAAA,KAAK,EAAEH;AAAT;AAAR,WAA9B,CARR;;AAAA;AASEC,UAAAA,eAAe,GAAG,KAAlB;AATF;AAAA;;AAAA;AAAA;AAAA;;AAWE,cAAIM,OAAJ,EAAa;AACZC,YAAAA,OAAO,CAACC,IAAR,wCAAkD,aAAMC,OAAxD;AACA;;AAbH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiBA,SAAeC,oBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAGQT,oBAAoB,EAH5B;;AAAA;AAAA;AAAA,2CAIQE,uBAAuB,EAJ/B;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAQA,OAAO,SAASQ,mBAAT,GAAqC;AAC3C,OAAKD,oBAAoB,EAAzB;AACA","sourcesContent":["import { ky } from './ky';\nimport { getToken } from '../notifications/get-token';\n\nimport { debug } from '../debug';\n\nlet lastKnownToken: string | undefined;\nlet mustTellBackend = false;\n\nasync function updateLastKnownToken(): Promise<void> {\n\tconst token = await getToken();\n\n\tif (!token) {\n\t\treturn;\n\t}\n\n\tif (token !== lastKnownToken) {\n\t\tlastKnownToken = token;\n\t\tmustTellBackend = true;\n\t}\n}\n\nasync function tellBackendIfApplicable(): Promise<void> {\n\tdebug('FCM token:', lastKnownToken);\n\n\tif (!mustTellBackend || !lastKnownToken) {\n\t\treturn;\n\t}\n\n\ttry {\n\t\tawait ky.post('register-fcm-token', { json: { token: lastKnownToken } });\n\t\tmustTellBackend = false;\n\t} catch (error) {\n\t\tif (__DEV__) {\n\t\t\tconsole.warn(`Failed to tell backend FCM token: ${error.message as string}`);\n\t\t}\n\t}\n}\n\nasync function _tryToUpdateFcmToken(): Promise<void> {\n\ttry {\n\t\t// This function is called when the app becomes online or the user fetch is completed (see redux sagas)\n\t\tawait updateLastKnownToken();\n\t\tawait tellBackendIfApplicable();\n\t} catch {}\n}\n\nexport function tryToUpdateFcmToken(): void {\n\tvoid _tryToUpdateFcmToken();\n}\n"]},"metadata":{},"sourceType":"module"}