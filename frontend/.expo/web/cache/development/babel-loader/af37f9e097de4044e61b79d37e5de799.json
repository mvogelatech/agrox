{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } it = o[Symbol.iterator](); return it.next.bind(it); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport isPlainObject from 'is-plain-object';\nexport function recurseDeep(root, callback) {\n  for (var _i = 0, _Object$entries = Object.entries(root); _i < _Object$entries.length; _i++) {\n    var _ref = _Object$entries[_i];\n\n    var _ref2 = _slicedToArray(_ref, 2);\n\n    var _key = _ref2[0];\n    var _value = _ref2[1];\n    var values = Array.isArray(_value) ? _value : [_value];\n\n    for (var _iterator = _createForOfIteratorHelperLoose(values), _step; !(_step = _iterator()).done;) {\n      var _value2 = _step.value;\n\n      if (isPlainObject(_value2)) {\n        callback(_value2, _key);\n        recurseDeep(_value2, callback);\n      }\n    }\n  }\n}","map":{"version":3,"sources":["/home/jmgoncalves/git/agro-x/frontend/src/network/helpers/recurse-deep.ts"],"names":["isPlainObject","recurseDeep","root","callback","Object","entries","key","value","values","Array","isArray"],"mappings":";;;;;;;;AAAA,OAAOA,aAAP,MAA0B,iBAA1B;AAIA,OAAO,SAASC,WAAT,CAAqBC,IAArB,EAAgCC,QAAhC,EAA6E;AACnF,qCAA2BC,MAAM,CAACC,OAAP,CAAeH,IAAf,CAA3B,qCAAiD;AAAA;;AAAA;;AAAA,QAArCI,IAAqC;AAAA,QAAhCC,MAAgC;AAChD,QAAMC,MAAM,GAAGC,KAAK,CAACC,OAAN,CAAcH,MAAd,IAAuBA,MAAvB,GAA+B,CAACA,MAAD,CAA9C;;AACA,yDAAoBC,MAApB,wCAA4B;AAAA,UAAjBD,OAAiB;;AAC3B,UAAIP,aAAa,CAACO,OAAD,CAAjB,EAA0B;AACzBJ,QAAAA,QAAQ,CAACI,OAAD,EAAQD,IAAR,CAAR;AACAL,QAAAA,WAAW,CAACM,OAAD,EAAQJ,QAAR,CAAX;AACA;AACD;AACD;AACD","sourcesContent":["import isPlainObject from 'is-plain-object';\n\ntype Obj = { [key: string]: any };\n\nexport function recurseDeep(root: Obj, callback: (value: Obj, key: string) => void) {\n\tfor (const [key, value] of Object.entries(root)) {\n\t\tconst values = Array.isArray(value) ? value : [value];\n\t\tfor (const value of values) {\n\t\t\tif (isPlainObject(value)) {\n\t\t\t\tcallback(value, key);\n\t\t\t\trecurseDeep(value, callback);\n\t\t\t}\n\t\t}\n\t}\n}\n"]},"metadata":{},"sourceType":"module"}