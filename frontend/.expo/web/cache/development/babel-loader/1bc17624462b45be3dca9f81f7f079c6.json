{"ast":null,"code":"var operators = {\n  '*': function _(v1, v2) {\n    return v1 * v2;\n  },\n  '+': function _(v1, v2) {\n    return v1 + v2;\n  },\n  '-': function _(v1, v2) {\n    return v1 - v2;\n  },\n  '/': function _(v1, v2) {\n    return v1 / v2;\n  }\n};\nexport default {\n  isOperation: isOperation,\n  exec: exec\n};\n\nfunction isOperation(str) {\n  var opInfo = findOperator(str);\n\n  if (opInfo) {\n    opInfo.v1 = str.substr(0, opInfo.pos).trim();\n    opInfo.v2 = str.substr(opInfo.pos + 1).trim();\n    delete opInfo.pos;\n    return opInfo;\n  } else {\n    return false;\n  }\n}\n\nfunction exec(opInfo) {\n  assertOperator(opInfo.operator);\n  assertValue(opInfo.v1);\n  assertValue(opInfo.v2);\n\n  if (opInfo.operator === '/') {\n    assertDivisor(opInfo.v2);\n  }\n\n  var fn = operators[opInfo.operator];\n  return fn(opInfo.v1, opInfo.v2);\n}\n\nfunction findOperator(str) {\n  for (var operator in operators) {\n    var pos = str.indexOf(operator);\n\n    if (pos >= 0) {\n      return {\n        operator: operator,\n        pos: pos\n      };\n    }\n  }\n}\n\nfunction assertOperator(operator) {\n  if (!operators[operator]) {\n    throw new Error('Unknown operator: ' + operator);\n  }\n}\n\nfunction assertValue(value) {\n  if (typeof value !== 'number') {\n    throw new Error('Operation value should be number, you try: ' + String(value));\n  }\n}\n\nfunction assertDivisor(divisor) {\n  if (divisor === 0) {\n    throw new Error('Operation divisor should not be zero');\n  }\n}","map":{"version":3,"sources":["/home/jmgoncalves/git/agro-x/frontend/node_modules/react-native-extended-stylesheet/src/replacers/operation.js"],"names":["operators","v1","v2","isOperation","exec","str","opInfo","findOperator","substr","pos","trim","assertOperator","operator","assertValue","assertDivisor","fn","indexOf","Error","value","String","divisor"],"mappings":"AAKA,IAAMA,SAAS,GAAG;AAChB,OAAK,WAACC,EAAD,EAAKC,EAAL;AAAA,WAAYD,EAAE,GAAGC,EAAjB;AAAA,GADW;AAEhB,OAAK,WAACD,EAAD,EAAKC,EAAL;AAAA,WAAYD,EAAE,GAAGC,EAAjB;AAAA,GAFW;AAGhB,OAAK,WAACD,EAAD,EAAKC,EAAL;AAAA,WAAYD,EAAE,GAAGC,EAAjB;AAAA,GAHW;AAIhB,OAAK,WAACD,EAAD,EAAKC,EAAL;AAAA,WAAYD,EAAE,GAAGC,EAAjB;AAAA;AAJW,CAAlB;AAOA,eAAe;AACbC,EAAAA,WAAW,EAAXA,WADa;AAEbC,EAAAA,IAAI,EAAJA;AAFa,CAAf;;AASA,SAASD,WAAT,CAAqBE,GAArB,EAA0B;AACxB,MAAIC,MAAM,GAAGC,YAAY,CAACF,GAAD,CAAzB;;AACA,MAAIC,MAAJ,EAAY;AACVA,IAAAA,MAAM,CAACL,EAAP,GAAYI,GAAG,CAACG,MAAJ,CAAW,CAAX,EAAcF,MAAM,CAACG,GAArB,EAA0BC,IAA1B,EAAZ;AACAJ,IAAAA,MAAM,CAACJ,EAAP,GAAYG,GAAG,CAACG,MAAJ,CAAWF,MAAM,CAACG,GAAP,GAAa,CAAxB,EAA2BC,IAA3B,EAAZ;AACA,WAAOJ,MAAM,CAACG,GAAd;AACA,WAAOH,MAAP;AACD,GALD,MAKO;AACL,WAAO,KAAP;AACD;AACF;;AAMD,SAASF,IAAT,CAAcE,MAAd,EAAsB;AACpBK,EAAAA,cAAc,CAACL,MAAM,CAACM,QAAR,CAAd;AACAC,EAAAA,WAAW,CAACP,MAAM,CAACL,EAAR,CAAX;AACAY,EAAAA,WAAW,CAACP,MAAM,CAACJ,EAAR,CAAX;;AACA,MAAII,MAAM,CAACM,QAAP,KAAoB,GAAxB,EAA6B;AAC3BE,IAAAA,aAAa,CAACR,MAAM,CAACJ,EAAR,CAAb;AACD;;AACD,MAAIa,EAAE,GAAGf,SAAS,CAACM,MAAM,CAACM,QAAR,CAAlB;AACA,SAAOG,EAAE,CAACT,MAAM,CAACL,EAAR,EAAYK,MAAM,CAACJ,EAAnB,CAAT;AACD;;AAED,SAASK,YAAT,CAAsBF,GAAtB,EAA2B;AACzB,OAAK,IAAIO,QAAT,IAAqBZ,SAArB,EAAgC;AAC9B,QAAIS,GAAG,GAAGJ,GAAG,CAACW,OAAJ,CAAYJ,QAAZ,CAAV;;AACA,QAAIH,GAAG,IAAI,CAAX,EAAc;AACZ,aAAO;AAACG,QAAAA,QAAQ,EAARA,QAAD;AAAWH,QAAAA,GAAG,EAAHA;AAAX,OAAP;AACD;AACF;AACF;;AAED,SAASE,cAAT,CAAwBC,QAAxB,EAAkC;AAChC,MAAI,CAACZ,SAAS,CAACY,QAAD,CAAd,EAA0B;AACxB,UAAM,IAAIK,KAAJ,CAAU,uBAAuBL,QAAjC,CAAN;AACD;AACF;;AAED,SAASC,WAAT,CAAqBK,KAArB,EAA4B;AAC1B,MAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7B,UAAM,IAAID,KAAJ,CAAU,gDAAgDE,MAAM,CAACD,KAAD,CAAhE,CAAN;AACD;AACF;;AAED,SAASJ,aAAT,CAAuBM,OAAvB,EAAgC;AAC9B,MAAIA,OAAO,KAAK,CAAhB,EAAmB;AACjB,UAAM,IAAIH,KAAJ,CAAU,sCAAV,CAAN;AACD;AACF","sourcesContent":["/**\n * Detects operation in string\n * Supports: '*', '+', '-'\n */\n\nconst operators = {\n  '*': (v1, v2) => v1 * v2,\n  '+': (v1, v2) => v1 + v2,\n  '-': (v1, v2) => v1 - v2,\n  '/': (v1, v2) => v1 / v2,\n};\n\nexport default {\n  isOperation,\n  exec,\n};\n\n/**\n * Is operation in string: '0.25 * $abc' => {operator: '*', v1: '0.25', v2: '$abc'}\n * @param {String} str\n */\nfunction isOperation(str) {\n  let opInfo = findOperator(str);\n  if (opInfo) {\n    opInfo.v1 = str.substr(0, opInfo.pos).trim();\n    opInfo.v2 = str.substr(opInfo.pos + 1).trim();\n    delete opInfo.pos;\n    return opInfo;\n  } else {\n    return false;\n  }\n}\n\n/**\n * Executes operation\n * @param {Object} opInfo\n */\nfunction exec(opInfo) {\n  assertOperator(opInfo.operator);\n  assertValue(opInfo.v1);\n  assertValue(opInfo.v2);\n  if (opInfo.operator === '/') {\n    assertDivisor(opInfo.v2);\n  }\n  let fn = operators[opInfo.operator];\n  return fn(opInfo.v1, opInfo.v2);\n}\n\nfunction findOperator(str) {\n  for (let operator in operators) {\n    let pos = str.indexOf(operator);\n    if (pos >= 0) {\n      return {operator, pos};\n    }\n  }\n}\n\nfunction assertOperator(operator) {\n  if (!operators[operator]) {\n    throw new Error('Unknown operator: ' + operator);\n  }\n}\n\nfunction assertValue(value) {\n  if (typeof value !== 'number') {\n    throw new Error('Operation value should be number, you try: ' + String(value));\n  }\n}\n\nfunction assertDivisor(divisor) {\n  if (divisor === 0) {\n    throw new Error('Operation divisor should not be zero');\n  }\n}\n"]},"metadata":{},"sourceType":"module"}