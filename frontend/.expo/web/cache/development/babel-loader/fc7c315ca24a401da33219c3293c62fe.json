{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport mediaQuery from 'css-mediaquery';\nimport utils from \"../utils\";\nvar PREFIX = '@media';\nexport default {\n  isMediaQuery: isMediaQuery,\n  process: process\n};\n\nfunction isMediaQuery(str) {\n  return typeof str === 'string' && str.indexOf(PREFIX) === 0;\n}\n\nfunction process(obj) {\n  var mqKeys = [];\n  var res = Object.keys(obj).reduce(function (res, key) {\n    if (!isMediaQuery(key)) {\n      res[key] = obj[key];\n    } else {\n      mqKeys.push(key);\n    }\n\n    return res;\n  }, {});\n\n  if (mqKeys.length) {\n    var matchObject = getMatchObject();\n    mqKeys.forEach(function (key) {\n      var mqStr = key.replace(PREFIX, '');\n      var isMatch = mediaQuery.match(mqStr, matchObject);\n\n      if (isMatch) {\n        merge(res, obj[key]);\n      }\n    });\n  }\n\n  return res;\n}\n\nfunction getMatchObject() {\n  var win = Dimensions.get('window');\n  var isRTL = I18nManager.isRTL;\n  return {\n    width: win.width,\n    height: win.height,\n    orientation: win.width > win.height ? 'landscape' : 'portrait',\n    'aspect-ratio': win.width / win.height,\n    type: Platform.OS,\n    direction: isRTL ? 'rtl' : 'ltr'\n  };\n}\n\nfunction merge(obj, mqObj) {\n  Object.keys(mqObj).forEach(function (key) {\n    if (utils.isObject(obj[key]) && utils.isObject(mqObj[key])) {\n      _extends(obj[key], mqObj[key]);\n    } else {\n      obj[key] = mqObj[key];\n    }\n  });\n}","map":{"version":3,"sources":["/home/jmgoncalves/git/agro-x/frontend/node_modules/react-native-extended-stylesheet/src/replacers/media-queries.js"],"names":["mediaQuery","utils","PREFIX","isMediaQuery","process","str","indexOf","obj","mqKeys","res","Object","keys","reduce","key","push","length","matchObject","getMatchObject","forEach","mqStr","replace","isMatch","match","merge","win","Dimensions","get","isRTL","I18nManager","width","height","orientation","type","Platform","OS","direction","mqObj","isObject"],"mappings":";;;;AAWA,OAAOA,UAAP,MAAuB,gBAAvB;AACA,OAAOC,KAAP;AAEA,IAAMC,MAAM,GAAG,QAAf;AAEA,eAAe;AACbC,EAAAA,YAAY,EAAZA,YADa;AAEbC,EAAAA,OAAO,EAAPA;AAFa,CAAf;;AASA,SAASD,YAAT,CAAsBE,GAAtB,EAA2B;AACzB,SAAO,OAAOA,GAAP,KAAe,QAAf,IAA2BA,GAAG,CAACC,OAAJ,CAAYJ,MAAZ,MAAwB,CAA1D;AACD;;AAOD,SAASE,OAAT,CAAiBG,GAAjB,EAAsB;AACpB,MAAMC,MAAM,GAAG,EAAf;AAGA,MAAMC,GAAG,GAAGC,MAAM,CAACC,IAAP,CAAYJ,GAAZ,EAAiBK,MAAjB,CAAwB,UAACH,GAAD,EAAMI,GAAN,EAAc;AAChD,QAAI,CAACV,YAAY,CAACU,GAAD,CAAjB,EAAwB;AACtBJ,MAAAA,GAAG,CAACI,GAAD,CAAH,GAAWN,GAAG,CAACM,GAAD,CAAd;AACD,KAFD,MAEO;AACLL,MAAAA,MAAM,CAACM,IAAP,CAAYD,GAAZ;AACD;;AACD,WAAOJ,GAAP;AACD,GAPW,EAOT,EAPS,CAAZ;;AAUA,MAAID,MAAM,CAACO,MAAX,EAAmB;AACjB,QAAMC,WAAW,GAAGC,cAAc,EAAlC;AACAT,IAAAA,MAAM,CAACU,OAAP,CAAe,UAAAL,GAAG,EAAI;AACpB,UAAMM,KAAK,GAAGN,GAAG,CAACO,OAAJ,CAAYlB,MAAZ,EAAoB,EAApB,CAAd;AACA,UAAMmB,OAAO,GAAGrB,UAAU,CAACsB,KAAX,CAAiBH,KAAjB,EAAwBH,WAAxB,CAAhB;;AACA,UAAIK,OAAJ,EAAa;AACXE,QAAAA,KAAK,CAACd,GAAD,EAAMF,GAAG,CAACM,GAAD,CAAT,CAAL;AACD;AACF,KAND;AAOD;;AAED,SAAOJ,GAAP;AACD;;AAMD,SAASQ,cAAT,GAA0B;AACxB,MAAMO,GAAG,GAAGC,UAAU,CAACC,GAAX,CAAe,QAAf,CAAZ;AADwB,MAEhBC,KAFgB,GAENC,WAFM,CAEhBD,KAFgB;AAGxB,SAAO;AACLE,IAAAA,KAAK,EAAEL,GAAG,CAACK,KADN;AAELC,IAAAA,MAAM,EAAEN,GAAG,CAACM,MAFP;AAGLC,IAAAA,WAAW,EAAEP,GAAG,CAACK,KAAJ,GAAYL,GAAG,CAACM,MAAhB,GAAyB,WAAzB,GAAuC,UAH/C;AAIL,oBAAgBN,GAAG,CAACK,KAAJ,GAAYL,GAAG,CAACM,MAJ3B;AAKLE,IAAAA,IAAI,EAAEC,QAAQ,CAACC,EALV;AAMLC,IAAAA,SAAS,EAAER,KAAK,GAAG,KAAH,GAAW;AANtB,GAAP;AAQD;;AAOD,SAASJ,KAAT,CAAehB,GAAf,EAAoB6B,KAApB,EAA2B;AACzB1B,EAAAA,MAAM,CAACC,IAAP,CAAYyB,KAAZ,EAAmBlB,OAAnB,CAA2B,UAAAL,GAAG,EAAI;AAChC,QAAIZ,KAAK,CAACoC,QAAN,CAAe9B,GAAG,CAACM,GAAD,CAAlB,KAA4BZ,KAAK,CAACoC,QAAN,CAAeD,KAAK,CAACvB,GAAD,CAApB,CAAhC,EAA4D;AAC1D,eAAcN,GAAG,CAACM,GAAD,CAAjB,EAAwBuB,KAAK,CAACvB,GAAD,CAA7B;AACD,KAFD,MAEO;AACLN,MAAAA,GAAG,CAACM,GAAD,CAAH,GAAWuB,KAAK,CAACvB,GAAD,CAAhB;AACD;AACF,GAND;AAOD","sourcesContent":["/**\n * Media queries\n * Supported values:\n * - (type) ios, android\n * - height, min-height, max-height\n * - width, min-width, max-width\n * - orientation\n * - aspect-ratio\n */\n\nimport {Dimensions, Platform, I18nManager} from 'react-native';\nimport mediaQuery from 'css-mediaquery';\nimport utils from '../utils';\n      \nconst PREFIX = '@media';\n\nexport default {\n  isMediaQuery,\n  process\n};\n\n/**\n * Is string is media query\n * @param {String} str\n */\nfunction isMediaQuery(str) {\n  return typeof str === 'string' && str.indexOf(PREFIX) === 0;\n}\n\n/**\n * Process and apply media queries in object\n * @param {Object} obj\n * @returns {null|Object}\n */\nfunction process(obj) {\n  const mqKeys = [];\n\n  // copy non-media-query stuff\n  const res = Object.keys(obj).reduce((res, key) => {\n    if (!isMediaQuery(key)) {\n      res[key] = obj[key];\n    } else {\n      mqKeys.push(key);\n    }\n    return res;\n  }, {});\n\n  // apply media query stuff\n  if (mqKeys.length) {\n    const matchObject = getMatchObject();\n    mqKeys.forEach(key => {\n      const mqStr = key.replace(PREFIX, '');\n      const isMatch = mediaQuery.match(mqStr, matchObject);\n      if (isMatch) {\n        merge(res, obj[key]);\n      }\n    });\n  }\n\n  return res;\n}\n\n/**\n * Returns object to match media query\n * @returns {Object}\n */\nfunction getMatchObject() {\n  const win = Dimensions.get('window');\n  const { isRTL } = I18nManager;\n  return {\n    width: win.width,\n    height: win.height,\n    orientation: win.width > win.height ? 'landscape' : 'portrait',\n    'aspect-ratio': win.width / win.height,\n    type: Platform.OS,\n    direction: isRTL ? 'rtl' : 'ltr'\n  };\n}\n\n/**\n * Merge media query obj into parent obj\n * @param {Object} obj\n * @param {Object} mqObj\n */\nfunction merge(obj, mqObj) {\n  Object.keys(mqObj).forEach(key => {\n    if (utils.isObject(obj[key]) && utils.isObject(mqObj[key])) {\n      Object.assign(obj[key], mqObj[key]);\n    } else {\n      obj[key] = mqObj[key];\n    }\n  });\n}\n"]},"metadata":{},"sourceType":"module"}