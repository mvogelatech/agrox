{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/home/jmgoncalves/git/agro-x/frontend/src/snackbars/index.tsx\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useMemo } from 'react';\nimport { Snackbar, useTheme } from 'react-native-paper';\nimport { createTStyleSheet, overrideTStyleSheet } from \"../utils/style\";\n\nvar _showSnackbar;\n\nvar _isSnackbarShowing = false;\nexport function showSnackbar(snackbar) {\n  if (!_showSnackbar) {\n    throw new Error('Cannot use `showSnackbar` now since SnackbarProvider has not initialized yet.');\n  }\n\n  _showSnackbar(snackbar);\n}\nexport function isSnackbarShowing() {\n  return _isSnackbarShowing;\n}\nexport function SnackbarProvider(props) {\n  var _currentSnackbar$acti, _currentSnackbar$text, _currentSnackbar$dura;\n\n  var _useState = useState(undefined),\n      _useState2 = _slicedToArray(_useState, 2),\n      currentSnackbar = _useState2[0],\n      setCurrentSnackbar = _useState2[1];\n\n  _isSnackbarShowing = currentSnackbar !== undefined;\n  var styles = currentSnackbar != null && currentSnackbar.style ? overrideTStyleSheet(defaultStyleSheet, {\n    snackbar: currentSnackbar.style\n  }) : defaultStyleSheet;\n  var theme = useTheme({\n    colors: {\n      accent: (_currentSnackbar$acti = currentSnackbar == null ? void 0 : currentSnackbar.actionTextColor) != null ? _currentSnackbar$acti : 'white',\n      surface: (_currentSnackbar$text = currentSnackbar == null ? void 0 : currentSnackbar.textColor) != null ? _currentSnackbar$text : 'white'\n    }\n  });\n  useMemo(function () {\n    _showSnackbar = function _showSnackbar(snackbar) {\n      if (snackbar.duration !== undefined && snackbar.duration <= 0) {\n        throw new Error(\"Snackbar duration must be positive (or undefined, if it should not expire)\");\n      }\n\n      if ((snackbar.duration === undefined || snackbar.duration === Infinity) && snackbar.actionText === undefined) {\n        throw new Error(\"Snackbar must have a way to disappear. Either give a duration or an action text.\");\n      }\n\n      function trySet() {\n        setCurrentSnackbar(function (prevState) {\n          if (prevState !== undefined) {\n            setTimeout(trySet, 10);\n            return undefined;\n          }\n\n          return snackbar;\n        });\n      }\n\n      trySet();\n    };\n  }, []);\n  return React.createElement(React.Fragment, null, props.children, currentSnackbar !== undefined && React.createElement(Snackbar, {\n    visible: true,\n    duration: (_currentSnackbar$dura = currentSnackbar.duration) != null ? _currentSnackbar$dura : Infinity,\n    style: styles.snackbar,\n    theme: theme,\n    action: currentSnackbar.actionText ? {\n      label: currentSnackbar.actionText,\n      onPress: function onPress() {\n        return _regeneratorRuntime.async(function onPress$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!currentSnackbar.onActionClick) {\n                  _context.next = 3;\n                  break;\n                }\n\n                _context.next = 3;\n                return _regeneratorRuntime.awrap(currentSnackbar.onActionClick());\n\n              case 3:\n                setCurrentSnackbar(undefined);\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      }\n    } : undefined,\n    onDismiss: function onDismiss() {\n      setCurrentSnackbar(undefined);\n      void (currentSnackbar.onExpire == null ? void 0 : currentSnackbar.onExpire());\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 5\n    }\n  }, currentSnackbar.text));\n}\nvar defaultStyleSheet = createTStyleSheet({\n  snackbar: {\n    backgroundColor: 'blue'\n  }\n});","map":{"version":3,"sources":["/home/jmgoncalves/git/agro-x/frontend/src/snackbars/index.tsx"],"names":["React","useState","useMemo","Snackbar","useTheme","createTStyleSheet","overrideTStyleSheet","_showSnackbar","_isSnackbarShowing","showSnackbar","snackbar","Error","isSnackbarShowing","SnackbarProvider","props","undefined","currentSnackbar","setCurrentSnackbar","styles","style","defaultStyleSheet","theme","colors","accent","actionTextColor","surface","textColor","duration","Infinity","actionText","trySet","prevState","setTimeout","children","label","onPress","onActionClick","onExpire","text","backgroundColor"],"mappings":"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","sourcesContent":["import React, { useState, useMemo } from 'react';\nimport { Snackbar, useTheme } from 'react-native-paper';\nimport type { RequireAtLeastOne } from 'type-fest';\nimport { createTStyleSheet, overrideTStyleSheet, ExtendedStyle } from '../utils/style';\n\ntype SnackbarSpec_ = {\n\ttext: string;\n\ttextColor?: string;\n\tduration?: number;\n\tactionText?: string;\n\tactionTextColor?: string;\n\tstyle?: ExtendedStyle;\n\tonActionClick?: () => void | Promise<void>;\n\tonExpire?: () => void | Promise<void>;\n};\n\ntype SnackbarSpec = SnackbarSpec_ & RequireAtLeastOne<SnackbarSpec_, 'duration' | 'actionText'>;\n\ntype ShowSnackbar = (snackbar: SnackbarSpec) => void;\n\ntype SnackbarProviderProps = {\n\tchildren: React.ReactNode;\n};\n\nlet _showSnackbar: ShowSnackbar | undefined;\n\nlet _isSnackbarShowing = false;\n\nexport function showSnackbar(snackbar: SnackbarSpec) {\n\tif (!_showSnackbar) {\n\t\tthrow new Error('Cannot use `showSnackbar` now since SnackbarProvider has not initialized yet.');\n\t}\n\n\t_showSnackbar(snackbar);\n}\n\nexport function isSnackbarShowing(): boolean {\n\treturn _isSnackbarShowing;\n}\n\nexport function SnackbarProvider(props: SnackbarProviderProps) {\n\tconst [currentSnackbar, setCurrentSnackbar] = useState<SnackbarSpec | undefined>(undefined);\n\n\t_isSnackbarShowing = currentSnackbar !== undefined;\n\n\tconst styles = currentSnackbar?.style ? overrideTStyleSheet(defaultStyleSheet, { snackbar: currentSnackbar.style }) : defaultStyleSheet;\n\n\tconst theme = useTheme({\n\t\tcolors: {\n\t\t\taccent: currentSnackbar?.actionTextColor ?? 'white',\n\t\t\tsurface: currentSnackbar?.textColor ?? 'white',\n\t\t},\n\t});\n\n\tuseMemo(() => {\n\t\t_showSnackbar = (snackbar: SnackbarSpec) => {\n\t\t\tif (snackbar.duration !== undefined && snackbar.duration <= 0) {\n\t\t\t\tthrow new Error(`Snackbar duration must be positive (or undefined, if it should not expire)`);\n\t\t\t}\n\n\t\t\tif ((snackbar.duration === undefined || snackbar.duration === Infinity) && snackbar.actionText === undefined) {\n\t\t\t\tthrow new Error(`Snackbar must have a way to disappear. Either give a duration or an action text.`);\n\t\t\t}\n\n\t\t\tfunction trySet() {\n\t\t\t\tsetCurrentSnackbar((prevState) => {\n\t\t\t\t\tif (prevState !== undefined) {\n\t\t\t\t\t\t// There is already an active snackbar. Let's remove it first.\n\t\t\t\t\t\t// If 10ms are not enough, this will recurse automatically until it is enough.\n\t\t\t\t\t\tsetTimeout(trySet, 10);\n\t\t\t\t\t\treturn undefined;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn snackbar;\n\t\t\t\t});\n\t\t\t}\n\n\t\t\ttrySet();\n\t\t};\n\t}, []);\n\n\treturn (\n\t\t<>\n\t\t\t{props.children}\n\t\t\t{currentSnackbar !== undefined && (\n\t\t\t\t<Snackbar\n\t\t\t\t\tvisible\n\t\t\t\t\tduration={currentSnackbar.duration ?? Infinity}\n\t\t\t\t\tstyle={styles.snackbar}\n\t\t\t\t\ttheme={theme}\n\t\t\t\t\taction={\n\t\t\t\t\t\tcurrentSnackbar.actionText\n\t\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\t\tlabel: currentSnackbar.actionText,\n\t\t\t\t\t\t\t\t\tonPress: async () => {\n\t\t\t\t\t\t\t\t\t\tif (currentSnackbar.onActionClick) await currentSnackbar.onActionClick();\n\t\t\t\t\t\t\t\t\t\tsetCurrentSnackbar(undefined);\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t: undefined\n\t\t\t\t\t}\n\t\t\t\t\tonDismiss={() => {\n\t\t\t\t\t\tsetCurrentSnackbar(undefined);\n\t\t\t\t\t\tvoid currentSnackbar.onExpire?.();\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t{currentSnackbar.text}\n\t\t\t\t</Snackbar>\n\t\t\t)}\n\t\t</>\n\t);\n}\n\nconst defaultStyleSheet = createTStyleSheet({\n\tsnackbar: {\n\t\tbackgroundColor: 'blue',\n\t},\n});\n"]},"metadata":{},"sourceType":"module"}