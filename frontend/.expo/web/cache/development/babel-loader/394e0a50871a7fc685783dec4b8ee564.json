{"ast":null,"code":"import { useSelector } from 'react-redux';\nimport { store } from \"./store\";\nexport var dispatch = store.dispatch.bind(store);\nexport var dispatchAny = store.dispatch.bind(store);\nexport function useMainSelector(selector) {\n  return useSelector(function (rootState) {\n    return selector(rootState.mainTree);\n  });\n}\nexport function useIsOffline() {\n  return useSelector(function (rootState) {\n    return !rootState.network.isConnected;\n  });\n}\nexport function useIsLoggedIn() {\n  return useMainSelector(function (state) {\n    return state.authData.userId;\n  }) !== null;\n}\nexport function getAuthDataWithoutStateUpdate() {\n  return store.getState().mainTree.authData;\n}","map":{"version":3,"sources":["/home/jmgoncalves/git/agro-x/frontend/redux-things/utils.ts"],"names":["useSelector","store","dispatch","bind","dispatchAny","useMainSelector","selector","rootState","mainTree","useIsOffline","network","isConnected","useIsLoggedIn","state","authData","userId","getAuthDataWithoutStateUpdate","getState"],"mappings":"AAAA,SAASA,WAAT,QAA4B,aAA5B;AAEA,SAASC,KAAT;AAKA,OAAO,IAAMC,QAAQ,GAAGD,KAAK,CAACC,QAAN,CAAeC,IAAf,CAAoBF,KAApB,CAAjB;AAEP,OAAO,IAAMG,WAAW,GAAGH,KAAK,CAACC,QAAN,CAAeC,IAAf,CAAoBF,KAApB,CAApB;AAEP,OAAO,SAASI,eAAT,CAA4BC,QAA5B,EAAkE;AACxE,SAAON,WAAW,CAAC,UAACO,SAAD;AAAA,WAA+BD,QAAQ,CAACC,SAAS,CAACC,QAAX,CAAvC;AAAA,GAAD,CAAlB;AACA;AAED,OAAO,SAASC,YAAT,GAAiC;AACvC,SAAOT,WAAW,CAAC,UAACO,SAAD;AAAA,WAA+B,CAACA,SAAS,CAACG,OAAV,CAAkBC,WAAlD;AAAA,GAAD,CAAlB;AACA;AAED,OAAO,SAASC,aAAT,GAAkC;AACxC,SAAOP,eAAe,CAAC,UAACQ,KAAD;AAAA,WAAWA,KAAK,CAACC,QAAN,CAAeC,MAA1B;AAAA,GAAD,CAAf,KAAsD,IAA7D;AACA;AAED,OAAO,SAASC,6BAAT,GAAgE;AACtE,SAAOf,KAAK,CAACgB,QAAN,GAAiBT,QAAjB,CAA0BM,QAAjC;AACA","sourcesContent":["import { useSelector } from 'react-redux';\nimport { State as MainState, Actions as MainTreeActions } from './tree';\nimport { store } from './store';\nimport { RootReduxState } from './root-structure';\n\nexport type MainDispatch = (action: MainTreeActions['UNION']) => void;\n\nexport const dispatch = store.dispatch.bind(store) as MainDispatch;\n\nexport const dispatchAny = store.dispatch.bind(store);\n\nexport function useMainSelector<T>(selector: (state: MainState) => T): T {\n\treturn useSelector((rootState: RootReduxState) => selector(rootState.mainTree));\n}\n\nexport function useIsOffline(): boolean {\n\treturn useSelector((rootState: RootReduxState) => !rootState.network.isConnected);\n}\n\nexport function useIsLoggedIn(): boolean {\n\treturn useMainSelector((state) => state.authData.userId) !== null;\n}\n\nexport function getAuthDataWithoutStateUpdate(): MainState['authData'] {\n\treturn store.getState().mainTree.authData;\n}\n"]},"metadata":{},"sourceType":"module"}