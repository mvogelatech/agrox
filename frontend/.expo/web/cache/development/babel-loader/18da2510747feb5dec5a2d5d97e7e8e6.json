{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/home/jmgoncalves/git/agro-x/frontend/components/03-field-selection/from-general.tsx\";\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } it = o[Symbol.iterator](); return it.next.bind(it); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport React, { useCallback } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport { Button, Divider } from 'react-native-paper';\nimport { createTStyleSheet } from \"../../src/utils/style\";\nimport { useBackButton } from \"../../src/custom-hooks/use-back-button\";\nimport { asAliveOnlyScreenComponent } from \"../../src/utils/smart-lifecycle-components\";\nimport { SelectableFieldCard } from \"./selectable-field-card\";\nimport { ScrollView } from 'react-native-gesture-handler';\nimport { useMainSelector } from \"../../redux-things\";\nimport { ClosableHeader, CustomCheckbox, Accordion } from \"../00-common\";\nimport { PulverizationMethods } from \"../../models\";\nimport { getLatestPrescriptionPulverizationMethod } from \"../../src/utils\";\nimport { confirmQuotationLeave } from \"../../src/utils/alert-messages\";\nexport var FieldSelectionFromGeneral = asAliveOnlyScreenComponent(function (_ref) {\n  var navigation = _ref.navigation;\n\n  var _React$useState = React.useState(new Set()),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      checkedFields = _React$useState2[0],\n      setCheckedFields = _React$useState2[1];\n\n  var _React$useState3 = React.useState(new Set()),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      expandedAreas = _React$useState4[0],\n      setExpandedAreas = _React$useState4[1];\n\n  var areas = useMainSelector(function (state) {\n    return state.backendData.user.many_user_has_many_farm[0].farm.area;\n  });\n  var area = useMainSelector(function (state) {\n    return state.interactionData.general.currentArea;\n  });\n  var fields = [];\n\n  for (var _iterator = _createForOfIteratorHelperLoose(area.field), _step; !(_step = _iterator()).done;) {\n    var _field = _step.value;\n    if (getLatestPrescriptionPulverizationMethod(_field) !== PulverizationMethods.NOT_AVAILABLE) fields.push(_field);\n  }\n\n  var _onClose = useCallback(function () {\n    setCheckedFields(new Set());\n  }, []);\n\n  useBackButton(function () {\n    _onClose();\n\n    return 'PROCEED';\n  }, [_onClose]);\n\n  function countSelectedFields(area) {\n    var counter = 0;\n\n    for (var _iterator2 = _createForOfIteratorHelperLoose(area.field), _step2; !(_step2 = _iterator2()).done;) {\n      var _field2 = _step2.value;\n      if (checkedFields.has(_field2)) counter++;\n    }\n\n    return counter;\n  }\n\n  function areaFieldsList(area) {\n    var _this2 = this;\n\n    return React.createElement(View, {\n      style: styles.listView,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 4\n      }\n    }, area.field.map(function (field) {\n      return React.createElement(SelectableFieldCard, {\n        key: field.id.toString(),\n        isSelected: checkedFields.has(field),\n        field: field,\n        isDiagnosisMode: false,\n        onPress: function onPress() {\n          setCheckedFields(function (checkedFields) {\n            if (checkedFields.has(field)) checkedFields.delete(field);else checkedFields.add(field);\n            return new Set(checkedFields);\n          });\n        },\n        __self: _this2,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 6\n        }\n      });\n    }));\n  }\n\n  return React.createElement(View, {\n    style: {\n      flex: 1\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 3\n    }\n  }, React.createElement(ClosableHeader, {\n    onClose: function onClose() {\n      _onClose();\n\n      void confirmQuotationLeave(navigation);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 4\n    }\n  }), React.createElement(View, {\n    style: styles.mainView,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 4\n    }\n  }, React.createElement(Text, {\n    style: styles.titleText,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 5\n    }\n  }, \"Quais talh\\xF5es voc\\xEA\\nquer pulverizar da \" + area.name + \"?\"), React.createElement(View, {\n    style: styles.checkboxView,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 5\n    }\n  }, React.createElement(CustomCheckbox, {\n    title: React.createElement(View, {\n      style: {\n        alignItems: 'flex-start'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 8\n      }\n    }, React.createElement(Text, {\n      style: styles.subtitle,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }\n    }, \"Todos os talh\\xF5es\"), React.createElement(Text, {\n      style: styles.selected,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 9\n      }\n    }, checkedFields.size, \" Selecionados\")),\n    status: fields.length === checkedFields.size ? 'checked' : 'unchecked',\n    onPress: function onPress() {\n      setCheckedFields(fields.length === checkedFields.size ? new Set() : new Set(fields));\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 6\n    }\n  })), React.createElement(ScrollView, {\n    style: styles.scrollView,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 5\n    }\n  }, React.createElement(Accordion, {\n    key: area.id.toString(),\n    isExpanded: expandedAreas.has(area),\n    title: \"Opera\\xE7\\xE3o\",\n    subtitle: \"Drone\",\n    titleRight: React.createElement(View, {\n      style: {\n        alignItems: 'flex-end',\n        justifyContent: 'center'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 8\n      }\n    }, React.createElement(Text, {\n      style: styles.subtitle,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }\n    }, area.field.length + \" TALH\\xD5ES\"), React.createElement(Text, {\n      style: styles.selected,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }\n    }, countSelectedFields(area), \" Selecionados\")),\n    divider: React.createElement(Divider, {\n      style: {\n        width: '93%'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 16\n      }\n    }),\n    onPress: function onPress() {\n      setExpandedAreas(function (expandedAreas) {\n        if (expandedAreas.has(area)) expandedAreas.delete(area);else expandedAreas.add(area);\n        return new Set(expandedAreas);\n      });\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 6\n    }\n  }, React.createElement(View, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 7\n    }\n  }, React.createElement(CustomCheckbox, {\n    title: \"Todos os talh\\xF5es desta \\xE1rea\",\n    status: \"checked\",\n    customStyle: {\n      marginVertical: '15rem'\n    },\n    onPress: function onPress() {\n      setCheckedFields(function (checkedFields) {\n        for (var _iterator3 = _createForOfIteratorHelperLoose(area.field), _step3; !(_step3 = _iterator3()).done;) {\n          var _field3 = _step3.value;\n          if (checkedFields.has(_field3)) checkedFields.delete(_field3);else checkedFields.add(_field3);\n        }\n\n        return new Set(checkedFields);\n      });\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 8\n    }\n  }), areaFieldsList(area)))), React.createElement(Button, {\n    uppercase: false,\n    disabled: checkedFields.size === 0,\n    mode: \"contained\",\n    style: styles.button,\n    labelStyle: styles.buttonText,\n    onPress: function onPress() {\n      navigation.navigate('MethodSelection', {\n        selectedFields: _toConsumableArray(checkedFields)\n      });\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 5\n    }\n  }, \"Continuar\")));\n});\nvar styles = createTStyleSheet({\n  mainView: {\n    flex: 1,\n    backgroundColor: 'white',\n    paddingHorizontal: '24rem'\n  },\n  checkboxView: {\n    alignItems: 'center',\n    justifyContent: 'space-between',\n    marginVertical: '16rem',\n    flexDirection: 'row'\n  },\n  listView: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    marginHorizontal: '2rem'\n  },\n  button: {\n    marginVertical: '24rem',\n    height: '45rem',\n    justifyContent: 'center',\n    width: '100%'\n  },\n  subtitle: {\n    fontSize: '16rem',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  selected: {\n    fontSize: '12rem',\n    alignItems: 'center',\n    justifyContent: 'center',\n    color: '#78849E'\n  },\n  titleText: {\n    paddingLeft: '8rem',\n    fontSize: '23rem'\n  },\n  buttonText: {\n    fontSize: '14rem'\n  }\n});","map":{"version":3,"sources":["/home/jmgoncalves/git/agro-x/frontend/components/03-field-selection/from-general.tsx"],"names":["React","useCallback","Button","Divider","createTStyleSheet","useBackButton","asAliveOnlyScreenComponent","SelectableFieldCard","ScrollView","useMainSelector","ClosableHeader","CustomCheckbox","Accordion","PulverizationMethods","getLatestPrescriptionPulverizationMethod","confirmQuotationLeave","FieldSelectionFromGeneral","navigation","useState","Set","checkedFields","setCheckedFields","expandedAreas","setExpandedAreas","areas","state","backendData","user","many_user_has_many_farm","farm","area","interactionData","general","currentArea","fields","field","NOT_AVAILABLE","push","onClose","countSelectedFields","counter","has","areaFieldsList","styles","listView","map","id","toString","delete","add","flex","mainView","titleText","name","checkboxView","alignItems","subtitle","selected","size","length","scrollView","justifyContent","width","marginVertical","button","buttonText","navigate","selectedFields","backgroundColor","paddingHorizontal","flexDirection","flexWrap","marginHorizontal","height","fontSize","color","paddingLeft"],"mappings":"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","sourcesContent":["import React, { useCallback } from 'react';\nimport { View, Text } from 'react-native';\nimport { Button, Divider } from 'react-native-paper';\nimport { createTStyleSheet } from '../../src/utils/style';\n\nimport { useBackButton } from '../../src/custom-hooks/use-back-button';\nimport { asAliveOnlyScreenComponent } from '../../src/utils/smart-lifecycle-components';\n\nimport { SelectableFieldCard } from './selectable-field-card';\n\nimport { ScrollView } from 'react-native-gesture-handler';\nimport { useMainSelector } from '../../redux-things';\nimport { ClosableHeader, CustomCheckbox, Accordion } from '../00-common';\n\nimport { AgroXScreenProps } from '../navigation-types';\nimport { Models, PulverizationMethods } from '../../models';\n// import { getLatestDiagnosis, getLatestPrescriptionPulverizationMethod } from '../../src/utils';\nimport { getLatestPrescriptionPulverizationMethod } from '../../src/utils';\nimport { confirmQuotationLeave } from '../../src/utils/alert-messages';\n\ntype ScreenProps = AgroXScreenProps<'FieldSelectionFromGeneral'>;\n\nexport const FieldSelectionFromGeneral = asAliveOnlyScreenComponent(({ navigation }: ScreenProps) => {\n\tconst [checkedFields, setCheckedFields] = React.useState(new Set<Models.field>());\n\tconst [expandedAreas, setExpandedAreas] = React.useState(new Set<Models.area>());\n\tconst areas = useMainSelector((state) => state.backendData.user!.many_user_has_many_farm[0].farm.area)!;\n\n\tconst area = useMainSelector((state) => state.interactionData.general.currentArea)!;\n\tconst fields: Models.field[] = [];\n\tfor (const field of area.field) {\n\t\tif (getLatestPrescriptionPulverizationMethod(field) !== PulverizationMethods.NOT_AVAILABLE) fields.push(field);\n\t}\n\n\tconst onClose = useCallback(() => {\n\t\tsetCheckedFields(new Set<Models.field>());\n\t}, []);\n\n\tuseBackButton(() => {\n\t\tonClose();\n\t\treturn 'PROCEED';\n\t}, [onClose]);\n\n\t// function compare(a: Models.field, b: Models.field) {\n\t// \tif (getLatestDiagnosis(a)!.affected_area_ha > getLatestDiagnosis(b)!.affected_area_ha) return -1;\n\t// \tif (getLatestDiagnosis(b)!.affected_area_ha > getLatestDiagnosis(a)!.affected_area_ha) return 1;\n\t// \treturn 0;\n\t// }\n\n\tfunction countSelectedFields(area: Models.area) {\n\t\tlet counter = 0;\n\t\tfor (const field of area.field) {\n\t\t\tif (checkedFields.has(field)) counter++;\n\t\t}\n\n\t\treturn counter;\n\t}\n\n\tfunction areaFieldsList(area: Models.area) {\n\t\treturn (\n\t\t\t<View style={styles.listView}>\n\t\t\t\t{area.field.map((field) => (\n\t\t\t\t\t<SelectableFieldCard\n\t\t\t\t\t\tkey={field.id.toString()}\n\t\t\t\t\t\tisSelected={checkedFields.has(field)}\n\t\t\t\t\t\tfield={field}\n\t\t\t\t\t\tisDiagnosisMode={false}\n\t\t\t\t\t\tonPress={() => {\n\t\t\t\t\t\t\tsetCheckedFields((checkedFields) => {\n\t\t\t\t\t\t\t\tif (checkedFields.has(field)) checkedFields.delete(field);\n\t\t\t\t\t\t\t\telse checkedFields.add(field);\n\t\t\t\t\t\t\t\treturn new Set(checkedFields);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t))}\n\t\t\t</View>\n\t\t);\n\t}\n\n\ttype AreaAccordionProps = {\n\t\tarea: Models.area;\n\t};\n\n\t// function AreaAccordion(props: AreaAccordionProps) {\n\t// \tconst { area } = props;\n\t// \treturn (\n\t// \t\t<Accordion\n\t// \t\t\tkey={area.id.toString()}\n\t// \t\t\tisExpanded={expandedAreas.has(area)}\n\t// \t\t\ttitle={area.name}\n\t// \t\t\ttitleRight={\n\t// \t\t\t\t<View style={{ alignItems: 'flex-end', justifyContent: 'center' }}>\n\t// \t\t\t\t\t<Text style={styles.subtitle}>{`${area.field.length} TALHÕES`}</Text>\n\t// \t\t\t\t\t<Text style={styles.selected}>{countSelectedFields(area)} Selecionados</Text>\n\t// \t\t\t\t</View>\n\t// \t\t\t}\n\t// \t\t\tdivider={<Divider style={{ width: '93%' }} />}\n\t// \t\t\tonPress={() => {\n\t// \t\t\t\tsetExpandedAreas((expandedAreas) => {\n\t// \t\t\t\t\tif (expandedAreas.has(area)) expandedAreas.delete(area);\n\t// \t\t\t\t\telse expandedAreas.add(area);\n\t// \t\t\t\t\treturn new Set(expandedAreas);\n\t// \t\t\t\t});\n\t// \t\t\t}}\n\t// \t\t>\n\t// \t\t\t<View>\n\t// \t\t\t\t<CustomCheckbox\n\t// \t\t\t\t\ttitle=\"Todos os talhões desta área\"\n\t// \t\t\t\t\tstatus=\"checked\"\n\t// \t\t\t\t\tcustomStyle={{ marginVertical: '15rem' }}\n\t// \t\t\t\t\tonPress={() => {\n\t// \t\t\t\t\t\tsetCheckedFields((checkedFields) => {\n\t// \t\t\t\t\t\t\t// if (currentAreaAllSelected)\n\t// \t\t\t\t\t\t\tfor (const field of area.field) {\n\t// \t\t\t\t\t\t\t\tcheckedFields.delete(field);\n\t// \t\t\t\t\t\t\t}\n\t// \t\t\t\t\t\t\t// else {\n\t// \t\t\t\t\t\t\t// \tfor (const field of area.field) {\n\t// \t\t\t\t\t\t\t// \t\tcheckedFields.add(field);\n\t// \t\t\t\t\t\t\t// \t}\n\t// \t\t\t\t\t\t\t// }\n\n\t// \t\t\t\t\t\t\treturn new Set(checkedFields);\n\t// \t\t\t\t\t\t});\n\t// \t\t\t\t\t}}\n\t// \t\t\t\t/>\n\n\t// \t\t\t\t{areaFieldsList(area)}\n\t// \t\t\t</View>\n\t// \t\t</Accordion>\n\t// \t);\n\t// }\n\n\treturn (\n\t\t<View style={{ flex: 1 }}>\n\t\t\t<ClosableHeader\n\t\t\t\tonClose={() => {\n\t\t\t\t\tonClose();\n\t\t\t\t\tvoid confirmQuotationLeave(navigation);\n\t\t\t\t}}\n\t\t\t/>\n\t\t\t<View style={styles.mainView}>\n\t\t\t\t<Text style={styles.titleText}>{`Quais talhões você\\nquer pulverizar da ${area.name}?`}</Text>\n\t\t\t\t<View style={styles.checkboxView}>\n\t\t\t\t\t<CustomCheckbox\n\t\t\t\t\t\ttitle={\n\t\t\t\t\t\t\t<View style={{ alignItems: 'flex-start' }}>\n\t\t\t\t\t\t\t\t<Text style={styles.subtitle}>Todos os talhões</Text>\n\t\t\t\t\t\t\t\t<Text style={styles.selected}>{checkedFields.size} Selecionados</Text>\n\t\t\t\t\t\t\t</View>\n\t\t\t\t\t\t}\n\t\t\t\t\t\tstatus={fields.length === checkedFields.size ? 'checked' : 'unchecked'}\n\t\t\t\t\t\tonPress={() => {\n\t\t\t\t\t\t\tsetCheckedFields(fields.length === checkedFields.size ? new Set() : new Set(fields));\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t</View>\n\t\t\t\t<ScrollView style={styles.scrollView}>\n\t\t\t\t\t{/* {areas.map((area) => { */}\n\t\t\t\t\t{/* const currentAreaAllSelected = area.field.every((field) => checkedFields.has(field)); */}\n\t\t\t\t\t<Accordion\n\t\t\t\t\t\tkey={area.id.toString()}\n\t\t\t\t\t\tisExpanded={expandedAreas.has(area)}\n\t\t\t\t\t\ttitle=\"Operação\"\n\t\t\t\t\t\tsubtitle=\"Drone\"\n\t\t\t\t\t\ttitleRight={\n\t\t\t\t\t\t\t<View style={{ alignItems: 'flex-end', justifyContent: 'center' }}>\n\t\t\t\t\t\t\t\t<Text style={styles.subtitle}>{`${area.field.length} TALHÕES`}</Text>\n\t\t\t\t\t\t\t\t<Text style={styles.selected}>{countSelectedFields(area)} Selecionados</Text>\n\t\t\t\t\t\t\t</View>\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdivider={<Divider style={{ width: '93%' }} />}\n\t\t\t\t\t\tonPress={() => {\n\t\t\t\t\t\t\tsetExpandedAreas((expandedAreas) => {\n\t\t\t\t\t\t\t\tif (expandedAreas.has(area)) expandedAreas.delete(area);\n\t\t\t\t\t\t\t\telse expandedAreas.add(area);\n\t\t\t\t\t\t\t\treturn new Set(expandedAreas);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t<View>\n\t\t\t\t\t\t\t<CustomCheckbox\n\t\t\t\t\t\t\t\ttitle=\"Todos os talhões desta área\"\n\t\t\t\t\t\t\t\tstatus=\"checked\"\n\t\t\t\t\t\t\t\tcustomStyle={{ marginVertical: '15rem' }}\n\t\t\t\t\t\t\t\tonPress={() => {\n\t\t\t\t\t\t\t\t\tsetCheckedFields((checkedFields) => {\n\t\t\t\t\t\t\t\t\t\t// if (currentAreaAllSelected)\n\t\t\t\t\t\t\t\t\t\t// for (const field of area.field) {\n\t\t\t\t\t\t\t\t\t\t// \tcheckedFields.delete(field);\n\t\t\t\t\t\t\t\t\t\t// }\n\t\t\t\t\t\t\t\t\t\t// else {\n\t\t\t\t\t\t\t\t\t\tfor (const field of area.field) {\n\t\t\t\t\t\t\t\t\t\t\tif (checkedFields.has(field)) checkedFields.delete(field);\n\t\t\t\t\t\t\t\t\t\t\telse checkedFields.add(field);\n\t\t\t\t\t\t\t\t\t\t\t// setFieldsWithMethods((fieldsWithMethods) => {\n\t\t\t\t\t\t\t\t\t\t\t// \tfieldsWithMethods.set(field.id, PulverizationMethods.DRONE);\n\t\t\t\t\t\t\t\t\t\t\t// \treturn new Map(fieldsWithMethods);\n\t\t\t\t\t\t\t\t\t\t\t// });\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t// }\n\n\t\t\t\t\t\t\t\t\t\treturn new Set(checkedFields);\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t\t{areaFieldsList(area)}\n\t\t\t\t\t\t</View>\n\t\t\t\t\t</Accordion>\n\t\t\t\t</ScrollView>\n\n\t\t\t\t{/* <ScrollView> */}\n\t\t\t\t{/* <View style={styles.listView}>\n\t\t\t\t\t\t{fields\n\t\t\t\t\t\t\t.slice()\n\t\t\t\t\t\t\t.sort(compare)\n\t\t\t\t\t\t\t.map((field) => (\n\t\t\t\t\t\t\t\t<SelectableFieldCard\n\t\t\t\t\t\t\t\t\tkey={field.id.toString()}\n\t\t\t\t\t\t\t\t\tisDiagnosisMode\n\t\t\t\t\t\t\t\t\tisSelected={checkedFields.has(field)}\n\t\t\t\t\t\t\t\t\tfield={field}\n\t\t\t\t\t\t\t\t\tonPress={() => {\n\t\t\t\t\t\t\t\t\t\tsetCheckedFields((checkedFields) => {\n\t\t\t\t\t\t\t\t\t\t\tif (checkedFields.has(field)) checkedFields.delete(field);\n\t\t\t\t\t\t\t\t\t\t\telse checkedFields.add(field);\n\t\t\t\t\t\t\t\t\t\t\treturn new Set(checkedFields);\n\t\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t</View>\n\t\t\t\t</ScrollView> */}\n\t\t\t\t<Button\n\t\t\t\t\tuppercase={false}\n\t\t\t\t\tdisabled={checkedFields.size === 0}\n\t\t\t\t\tmode=\"contained\"\n\t\t\t\t\tstyle={styles.button}\n\t\t\t\t\tlabelStyle={styles.buttonText}\n\t\t\t\t\tonPress={() => {\n\t\t\t\t\t\tnavigation.navigate('MethodSelection', { selectedFields: [...checkedFields] });\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\tContinuar\n\t\t\t\t</Button>\n\t\t\t</View>\n\t\t</View>\n\t);\n});\n\nconst styles = createTStyleSheet({\n\tmainView: {\n\t\tflex: 1,\n\t\tbackgroundColor: 'white',\n\t\tpaddingHorizontal: '24rem',\n\t},\n\tcheckboxView: {\n\t\talignItems: 'center',\n\t\tjustifyContent: 'space-between',\n\t\tmarginVertical: '16rem',\n\t\tflexDirection: 'row',\n\t},\n\tlistView: {\n\t\tflexDirection: 'row',\n\t\tflexWrap: 'wrap',\n\t\tmarginHorizontal: '2rem',\n\t},\n\tbutton: {\n\t\tmarginVertical: '24rem',\n\t\theight: '45rem',\n\t\tjustifyContent: 'center',\n\t\twidth: '100%',\n\t},\n\tsubtitle: {\n\t\tfontSize: '16rem',\n\t\talignItems: 'center',\n\t\tjustifyContent: 'center',\n\t},\n\tselected: {\n\t\tfontSize: '12rem',\n\t\talignItems: 'center',\n\t\tjustifyContent: 'center',\n\t\tcolor: '#78849E',\n\t},\n\ttitleText: {\n\t\tpaddingLeft: '8rem',\n\t\tfontSize: '23rem',\n\t},\n\tbuttonText: {\n\t\tfontSize: '14rem',\n\t},\n});\n"]},"metadata":{},"sourceType":"module"}