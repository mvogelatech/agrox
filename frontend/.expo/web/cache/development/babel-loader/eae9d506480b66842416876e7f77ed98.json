{"ast":null,"code":"import { stringify } from \"./stringify\";\nvar debugTexts = [];\nvar nextDebugId = 1;\nexport function debug() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  var text = \"[#\" + nextDebugId++ + \"] \" + args.map(function (x) {\n    var str = stringify(x);\n    if (str.length <= 800) return str;\n    return str.slice(0, 750) + \"\\u22EF\" + str.slice(-50);\n  }).join(' ');\n  debugTexts.push(text);\n  return text;\n}\nexport function getDebugValue() {\n  return debugTexts.join(' §§ ');\n}\nexport function clearDebugValue() {\n  debugTexts = [];\n}","map":{"version":3,"sources":["/home/jmgoncalves/git/agro-x/frontend/src/debug/debug.ts"],"names":["stringify","debugTexts","nextDebugId","debug","args","text","map","x","str","length","slice","join","push","getDebugValue","clearDebugValue"],"mappings":"AAAA,SAASA,SAAT;AAEA,IAAIC,UAAoB,GAAG,EAA3B;AACA,IAAIC,WAAW,GAAG,CAAlB;AAEA,OAAO,SAASC,KAAT,GAA2C;AAAA,oCAAzBC,IAAyB;AAAzBA,IAAAA,IAAyB;AAAA;;AACjD,MAAMC,IAAI,UAAQH,WAAW,EAAnB,UAA0BE,IAAI,CACtCE,GADkC,CAC9B,UAACC,CAAD,EAAO;AACX,QAAMC,GAAG,GAAGR,SAAS,CAACO,CAAD,CAArB;AACA,QAAIC,GAAG,CAACC,MAAJ,IAAc,GAAlB,EAAuB,OAAOD,GAAP;AACvB,WAAUA,GAAG,CAACE,KAAJ,CAAU,CAAV,EAAa,GAAb,CAAV,cAA+BF,GAAG,CAACE,KAAJ,CAAU,CAAC,EAAX,CAA/B;AACA,GALkC,EAMlCC,IANkC,CAM7B,GAN6B,CAApC;AAQAV,EAAAA,UAAU,CAACW,IAAX,CAAgBP,IAAhB;AAEA,SAAOA,IAAP;AACA;AAED,OAAO,SAASQ,aAAT,GAAiC;AACvC,SAAOZ,UAAU,CAACU,IAAX,CAAgB,MAAhB,CAAP;AACA;AAED,OAAO,SAASG,eAAT,GAAiC;AACvCb,EAAAA,UAAU,GAAG,EAAb;AACA","sourcesContent":["import { stringify } from './stringify';\n\nlet debugTexts: string[] = [];\nlet nextDebugId = 1;\n\nexport function debug(...args: unknown[]): string {\n\tconst text = `[#${nextDebugId++}] ${args\n\t\t.map((x) => {\n\t\t\tconst str = stringify(x);\n\t\t\tif (str.length <= 800) return str;\n\t\t\treturn `${str.slice(0, 750)}⋯${str.slice(-50)}`;\n\t\t})\n\t\t.join(' ')}`;\n\n\tdebugTexts.push(text);\n\n\treturn text;\n}\n\nexport function getDebugValue(): string {\n\treturn debugTexts.join(' §§ ');\n}\n\nexport function clearDebugValue(): void {\n\tdebugTexts = [];\n}\n"]},"metadata":{},"sourceType":"module"}