{"ast":null,"code":"import { colors } from \"../assets\";\nimport { getLatestCrop, getLatestDiagnosis } from '.';\nimport { useMainSelector } from \"../../redux-things\";\nexport function useThresholds() {\n  var _ref = useMainSelector(function (state) {\n    return state.backendData.user;\n  }),\n      yellow_threshold = _ref.yellow_threshold,\n      red_threshold = _ref.red_threshold;\n\n  return {\n    yellow_threshold: yellow_threshold,\n    red_threshold: red_threshold\n  };\n}\nexport function getSemaphoreColor(infestationPercentage, thresholds) {\n  if (infestationPercentage <= thresholds.yellow_threshold) return colors.flags.green;\n  if (infestationPercentage <= thresholds.red_threshold) return colors.flags.yellow;\n  return colors.flags.red;\n}\nexport function getMapPinColor(field, thresholds, tab) {\n  if (tab === 'Overview') return colors.flags.blue;\n  var latestCrop = getLatestCrop(field);\n  if (!(latestCrop != null && latestCrop.is_diagnosis_hired)) return colors.neutral.gray_20;\n  var latestDiagnosis = getLatestDiagnosis(field);\n  if (!latestDiagnosis) return colors.flags.blue;\n  var fieldInfestationPercentage = latestDiagnosis.affected_area_ha / field.area_ha * 100;\n  return getSemaphoreColor(fieldInfestationPercentage, thresholds);\n}\nexport function getMapPinColorDate(field) {\n  var latestCrop = getLatestCrop(field);\n\n  if (field.crop[0].diagnosis[0]) {\n    var now = new Date();\n    var past = new Date(field.crop[0].diagnosis[0].report_date);\n    var diff = Math.abs(now.getTime() - past.getTime());\n    var days = Math.ceil(diff / (1000 * 60 * 60 * 24));\n\n    if (days <= 30) {\n      console.log(colors.flags.green);\n      return colors.flags.green;\n    }\n\n    if (days > 60) {\n      console.log(colors.flags.red);\n      return colors.flags.red;\n    }\n\n    if (days > 30) {\n      console.log(colors.flags.yellow);\n      return colors.flags.yellow;\n    }\n  }\n\n  if (!(latestCrop != null && latestCrop.is_diagnosis_hired)) return colors.neutral.gray_20;\n  var latestDiagnosis = getLatestDiagnosis(field);\n  if (!latestDiagnosis) return colors.flags.blue;\n}","map":{"version":3,"sources":["/home/jmgoncalves/git/agro-x/frontend/src/utils/semaphore.ts"],"names":["colors","getLatestCrop","getLatestDiagnosis","useMainSelector","useThresholds","state","backendData","user","yellow_threshold","red_threshold","getSemaphoreColor","infestationPercentage","thresholds","flags","green","yellow","red","getMapPinColor","field","tab","blue","latestCrop","is_diagnosis_hired","neutral","gray_20","latestDiagnosis","fieldInfestationPercentage","affected_area_ha","area_ha","getMapPinColorDate","crop","diagnosis","now","Date","past","report_date","diff","Math","abs","getTime","days","ceil","console","log"],"mappings":"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","sourcesContent":["import { Models } from '../../models';\nimport { colors } from '../assets';\nimport { getLatestCrop, getLatestDiagnosis } from '.';\nimport { useMainSelector } from '../../redux-things';\n\nexport type Thresholds = {\n\tyellow_threshold: number;\n\tred_threshold: number;\n};\n\nexport function useThresholds(): Thresholds {\n\tconst { yellow_threshold, red_threshold } = useMainSelector((state) => state.backendData.user)!;\n\treturn { yellow_threshold, red_threshold };\n}\n\nexport function getSemaphoreColor(infestationPercentage: number, thresholds: Thresholds) {\n\tif (infestationPercentage <= thresholds.yellow_threshold) return colors.flags.green;\n\tif (infestationPercentage <= thresholds.red_threshold) return colors.flags.yellow;\n\treturn colors.flags.red;\n}\n\nexport function getMapPinColor(field: Models.field, thresholds: Thresholds, tab: string) {\n\tif (tab === 'Overview') return colors.flags.blue;\n\n\tconst latestCrop = getLatestCrop(field);\n\tif (!latestCrop?.is_diagnosis_hired) return colors.neutral.gray_20;\n\n\tconst latestDiagnosis = getLatestDiagnosis(field);\n\tif (!latestDiagnosis) return colors.flags.blue;\n\n\tconst fieldInfestationPercentage = (latestDiagnosis.affected_area_ha / field.area_ha) * 100;\n\treturn getSemaphoreColor(fieldInfestationPercentage, thresholds);\n}\n\nexport function getMapPinColorDate(field: Models.field) {\n\tconst latestCrop = getLatestCrop(field);\n\n\tif (field.crop[0].diagnosis[0]) {\n\t\tconst now = new Date(); // Data de hoje\n\t\tconst past = new Date(field.crop[0].diagnosis[0].report_date); // Outra data no passado\n\t\tconst diff = Math.abs(now.getTime() - past.getTime()); // Subtrai uma data pela outra\n\t\tconst days = Math.ceil(diff / (1000 * 60 * 60 * 24)); // Divide o total pelo total de milisegundos correspondentes a 1 dia. (1000 milisegundos = 1 segundo).\n\n\t\t// Mostra a diferenÃ§a em dias\n\n\t\tif (days <= 30) {\n\t\t\tconsole.log(colors.flags.green);\n\t\t\treturn colors.flags.green;\n\t\t}\n\n\t\tif (days > 60) {\n\t\t\tconsole.log(colors.flags.red);\n\t\t\treturn colors.flags.red;\n\t\t}\n\n\t\tif (days > 30) {\n\t\t\tconsole.log(colors.flags.yellow);\n\t\t\treturn colors.flags.yellow;\n\t\t}\n\t}\n\n\tif (!latestCrop?.is_diagnosis_hired) return colors.neutral.gray_20;\n\n\tconst latestDiagnosis = getLatestDiagnosis(field);\n\tif (!latestDiagnosis) return colors.flags.blue;\n\n\t// const fieldInfestationPercentage = (latestDiagnosis.affected_area_ha / field.area_ha) * 100;\n\t// return getSemaphoreColor(fieldInfestationPercentage, thresholds);\n}\n"]},"metadata":{},"sourceType":"module"}