{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nvar _jsxFileName = \"/home/jmgoncalves/git/agro-x/frontend/components/02-general/bottom-cards/diagnosis-field-profile/infestation-report/pulverization.tsx\";\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport { Text, Divider } from 'react-native-paper';\nimport { createTStyleSheet } from \"../../../../../src/utils/style\";\nimport { useMainSelector } from \"../../../../../redux-things\";\nimport { getFieldAffectedAreaHA, getLatestDiagnosis, getLatestPrescriptionPulverizationMethod, getPrescriptionStatus } from \"../../../../../src/utils\";\nimport { getSemaphoreColor, useThresholds } from \"../../../../../src/utils/semaphore\";\nimport { CardButton, RoundIcon } from \"../../../../00-common\";\nimport { SuggestedMethod } from \"./common/suggested-method\";\nimport { Message } from \"../../../../00-common/message\";\nimport { PulverizationMethods } from \"../../../../../models\";\nimport { pulverizationNotInfested, pulverizationNotAvailable, dbHasNoCompanies } from \"../../../../../src/utils/alert-messages\";\nimport { colors } from \"../../../../../src/assets\";\nexport function Pulverization(props) {\n  var semaphoreThresholds = useThresholds();\n  var field = useMainSelector(function (state) {\n    return state.interactionData.general.currentField;\n  });\n  var affectedArea = getFieldAffectedAreaHA(field);\n  var fieldInfestationPercentage = (affectedArea / field.area_ha * 100).toFixed(2);\n  var latestDiagnosis = getLatestDiagnosis(field);\n  var pulverizationMethod = getLatestPrescriptionPulverizationMethod(field);\n  var status = getPrescriptionStatus(latestDiagnosis);\n  var companies = useMainSelector(function (state) {\n    return state.backendData.companies;\n  });\n  var dbHasCompanies = companies.length > 0;\n  if (status === 'not-infested') return React.createElement(Message, _extends({}, pulverizationNotInfested, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 40\n    }\n  }));\n  if (status === 'not-available') return React.createElement(Message, _extends({}, pulverizationNotAvailable, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 41\n    }\n  }));\n  console.log('aqui', props);\n  return React.createElement(View, {\n    style: styles.mainView,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 3\n    }\n  }, React.createElement(View, {\n    style: styles.contentView,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 4\n    }\n  }, React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }\n  }, React.createElement(Text, {\n    style: styles.header,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 6\n    }\n  }, \"M\\xC9TODO\", '\\n', \"SUGERIDO\"), React.createElement(SuggestedMethod, {\n    method: pulverizationMethod === null ? null : pulverizationMethod === PulverizationMethods.DRONE ? 'drone' : 'plane',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 6\n    }\n  })), React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 5\n    }\n  }, React.createElement(Text, {\n    style: styles.header,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 6\n    }\n  }, \"\\xC1REA AFETADA\", '\\n', \"TOTAL (HA)\"), React.createElement(Text, {\n    numberOfLines: 1,\n    style: styles.contentBig,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 6\n    }\n  }, affectedArea.toFixed(2))), React.createElement(View, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 5\n    }\n  }, React.createElement(Text, {\n    style: styles.header,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 6\n    }\n  }, \"INFESTA\\xC7\\xC3O\", '\\n', \"TOTAL\"), React.createElement(View, {\n    style: {\n      flexDirection: 'row',\n      alignItems: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 6\n    }\n  }, React.createElement(RoundIcon, {\n    isEnabled: true,\n    icon: \"warning\",\n    color: getSemaphoreColor(Number.parseFloat(fieldInfestationPercentage), semaphoreThresholds),\n    size: \"16rem\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }\n  }), React.createElement(Divider, {\n    style: styles.horizontalSpacer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }\n  }), React.createElement(Text, {\n    numberOfLines: 1,\n    style: styles.contentBig,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }\n  }, fieldInfestationPercentage, \"%\")))), React.createElement(View, {\n    style: styles.buttonView,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 4\n    }\n  }, React.createElement(CardButton, {\n    enabled: dbHasCompanies,\n    disabledMessage: dbHasNoCompanies,\n    text: \"Or\\xE7ar Pulveriza\\xE7\\xE3o\",\n    icon: \"pulverization\",\n    iconColor: colors.secondary.green_30,\n    customStyle: {\n      marginVertical: '16rem'\n    },\n    onPress: props.onHirePulverizationButtonPress,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 5\n    }\n  })));\n}\nvar styles = createTStyleSheet({\n  mainView: {\n    flexDirection: 'column',\n    marginHorizontal: '16rem',\n    marginVertical: '16rem',\n    backgroundColor: 'white'\n  },\n  contentView: {\n    flexDirection: 'row',\n    justifyContent: 'space-between'\n  },\n  header: {\n    fontSize: '14rem',\n    color: '#78849E',\n    fontWeight: '500'\n  },\n  contentBig: {\n    fontSize: '26rem'\n  },\n  buttonView: {\n    width: '100%',\n    marginTop: '16rem'\n  },\n  horizontalSpacer: {\n    width: 0,\n    height: 0,\n    backgroundColor: 'white',\n    margin: '2rem'\n  }\n});","map":{"version":3,"sources":["/home/jmgoncalves/git/agro-x/frontend/components/02-general/bottom-cards/diagnosis-field-profile/infestation-report/pulverization.tsx"],"names":["React","Text","Divider","createTStyleSheet","useMainSelector","getFieldAffectedAreaHA","getLatestDiagnosis","getLatestPrescriptionPulverizationMethod","getPrescriptionStatus","getSemaphoreColor","useThresholds","CardButton","RoundIcon","SuggestedMethod","Message","PulverizationMethods","pulverizationNotInfested","pulverizationNotAvailable","dbHasNoCompanies","colors","Pulverization","props","semaphoreThresholds","field","state","interactionData","general","currentField","affectedArea","fieldInfestationPercentage","area_ha","toFixed","latestDiagnosis","pulverizationMethod","status","companies","backendData","dbHasCompanies","length","console","log","styles","mainView","contentView","header","DRONE","contentBig","flexDirection","alignItems","Number","parseFloat","horizontalSpacer","buttonView","secondary","green_30","marginVertical","onHirePulverizationButtonPress","marginHorizontal","backgroundColor","justifyContent","fontSize","color","fontWeight","width","marginTop","height","margin"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { View } from 'react-native';\nimport { Text, Divider } from 'react-native-paper';\nimport { createTStyleSheet } from '../../../../../src/utils/style';\n\nimport { useMainSelector } from '../../../../../redux-things';\nimport { getFieldAffectedAreaHA, getLatestDiagnosis, getLatestPrescriptionPulverizationMethod, getPrescriptionStatus } from '../../../../../src/utils';\nimport { getSemaphoreColor, useThresholds } from '../../../../../src/utils/semaphore';\nimport { CardButton, RoundIcon } from '../../../../00-common';\nimport { SuggestedMethod } from './common/suggested-method';\nimport { Message } from '../../../../00-common/message';\nimport { PulverizationMethods } from '../../../../../models';\nimport { pulverizationNotInfested, pulverizationNotAvailable, dbHasNoCompanies } from '../../../../../src/utils/alert-messages';\nimport { colors } from '../../../../../src/assets';\n\ntype PulverizationProps = {\n\tonHirePulverizationButtonPress: () => void;\n\tonWhatsAppButtonPress: () => void;\n};\n\nexport function Pulverization(props: PulverizationProps) {\n\tconst semaphoreThresholds = useThresholds();\n\tconst field = useMainSelector((state) => state.interactionData.general.currentField)!;\n\tconst affectedArea = getFieldAffectedAreaHA(field)!;\n\tconst fieldInfestationPercentage = ((affectedArea / field.area_ha) * 100).toFixed(2);\n\tconst latestDiagnosis = getLatestDiagnosis(field)!;\n\tconst pulverizationMethod = getLatestPrescriptionPulverizationMethod(field);\n\tconst status = getPrescriptionStatus(latestDiagnosis);\n\n\tconst companies = useMainSelector((state) => state.backendData.companies)!;\n\tconst dbHasCompanies = companies.length > 0;\n\n\tif (status === 'not-infested') return <Message {...pulverizationNotInfested} />;\n\tif (status === 'not-available') return <Message {...pulverizationNotAvailable} />;\n\n\tconsole.log('aqui', props);\n\t// function dateDiagnosi(field: Models.field) {\n\n\t// \tif (field.crop[0].diagnosis[0]) {\n\t// \t\tconst now = new Date(); // Data de hoje\n\t// \t\tconst past = new Date(field.crop[0].diagnosis[0].report_date); // Outra data no passado\n\t// \t\tconst diff = Math.abs(now.getTime() - past.getTime()); // Subtrai uma data pela outra\n\t// \t\tconst days = Math.ceil(diff / (1000 * 60 * 60 * 24)); // Divide o total pelo total de milisegundos correspondentes a 1 dia. (1000 milisegundos = 1 segundo).\n\t// \t\tconsole.log('estou aqui', days);\n\n\t// \t\tif (days <= 30) {\n\t// \t\t\tnavigation.navigate('HireDiagnostic');\n\t// \t\t}\n\n\t// \t\tif (days > 60) {\n\t// \t\t\tdisplayAlert(alertDatePrescription);\n\t// \t\t\tnavigation.navigate('HireDiagnostic');\n\t// \t\t}\n\n\t// \t\tif (days > 30) {\n\t// \t\t\tdisplayAlert(alertDatePrescription);\n\t// \t\t\tnavigation.navigate('HireDiagnostic');\n\t// \t\t}\n\t// \t}\n\t// }\n\n\treturn (\n\t\t<View style={styles.mainView}>\n\t\t\t<View style={styles.contentView}>\n\t\t\t\t<View>\n\t\t\t\t\t<Text style={styles.header}>MÉTODO{'\\n'}SUGERIDO</Text>\n\t\t\t\t\t<SuggestedMethod method={pulverizationMethod === null ? null : pulverizationMethod === PulverizationMethods.DRONE ? 'drone' : 'plane'} />\n\t\t\t\t</View>\n\n\t\t\t\t<View>\n\t\t\t\t\t<Text style={styles.header}>ÁREA AFETADA{'\\n'}TOTAL (HA)</Text>\n\t\t\t\t\t<Text numberOfLines={1} style={styles.contentBig}>\n\t\t\t\t\t\t{affectedArea.toFixed(2)}\n\t\t\t\t\t</Text>\n\t\t\t\t</View>\n\n\t\t\t\t<View>\n\t\t\t\t\t<Text style={styles.header}>INFESTAÇÃO{'\\n'}TOTAL</Text>\n\t\t\t\t\t<View style={{ flexDirection: 'row', alignItems: 'center' }}>\n\t\t\t\t\t\t<RoundIcon\n\t\t\t\t\t\t\tisEnabled\n\t\t\t\t\t\t\ticon=\"warning\"\n\t\t\t\t\t\t\tcolor={getSemaphoreColor(Number.parseFloat(fieldInfestationPercentage), semaphoreThresholds)}\n\t\t\t\t\t\t\tsize=\"16rem\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<Divider style={styles.horizontalSpacer} />\n\t\t\t\t\t\t<Text numberOfLines={1} style={styles.contentBig}>\n\t\t\t\t\t\t\t{fieldInfestationPercentage}%\n\t\t\t\t\t\t</Text>\n\t\t\t\t\t</View>\n\t\t\t\t</View>\n\t\t\t</View>\n\t\t\t<View style={styles.buttonView}>\n\t\t\t\t<CardButton\n\t\t\t\t\tenabled={dbHasCompanies}\n\t\t\t\t\tdisabledMessage={dbHasNoCompanies}\n\t\t\t\t\ttext=\"Orçar Pulverização\"\n\t\t\t\t\ticon=\"pulverization\"\n\t\t\t\t\ticonColor={colors.secondary.green_30}\n\t\t\t\t\tcustomStyle={{ marginVertical: '16rem' }}\n\t\t\t\t\tonPress={props.onHirePulverizationButtonPress}\n\t\t\t\t/>\n\t\t\t</View>\n\t\t</View>\n\t);\n}\n\nconst styles = createTStyleSheet({\n\tmainView: {\n\t\tflexDirection: 'column',\n\t\tmarginHorizontal: '16rem',\n\t\tmarginVertical: '16rem',\n\t\tbackgroundColor: 'white',\n\t},\n\tcontentView: {\n\t\tflexDirection: 'row',\n\t\tjustifyContent: 'space-between',\n\t},\n\theader: {\n\t\tfontSize: '14rem',\n\t\tcolor: '#78849E',\n\t\tfontWeight: '500',\n\t},\n\tcontentBig: {\n\t\tfontSize: '26rem',\n\t},\n\tbuttonView: {\n\t\twidth: '100%',\n\t\tmarginTop: '16rem',\n\t},\n\thorizontalSpacer: {\n\t\twidth: 0,\n\t\theight: 0,\n\t\tbackgroundColor: 'white',\n\t\tmargin: '2rem',\n\t},\n});\n"]},"metadata":{},"sourceType":"module"}