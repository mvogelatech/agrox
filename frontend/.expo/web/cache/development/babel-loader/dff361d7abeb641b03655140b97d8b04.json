{"ast":null,"code":"var _jsxFileName = \"/home/jmgoncalves/git/agro-x/frontend/components/00-common/share-button.tsx\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React from 'react';\nimport { Text } from 'react-native-paper';\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport { createTStyleSheet, overrideTStyleSheet } from \"../../src/utils/style\";\nimport { Entypo } from '@expo/vector-icons';\nimport * as Print from 'expo-print';\nimport * as Sharing from 'expo-sharing';\nimport { useMainSelector } from \"../../redux-things\";\nimport * as FileSystem from 'expo-file-system';\nimport { BACKEND_BASE_URL } from \"../../src/network\";\nimport { reportTemplate } from \"./report-template\";\nimport { getLatestDiagnosis } from \"../../src/utils\";\nvar BASE_64_VALIDATION_TOKEN = 'WDl5NDhVV2ZlRTAsSlo3JWJYfUdJe3ZvLlsmayFILWs4XXVldDg7WA==';\nvar ZOOM_LEVEL = 17;\nexport function ShareButton(props) {\n  var _props$customStyle;\n\n  var styles = overrideTStyleSheet(defaultStyleSheet, {\n    mainView: (_props$customStyle = props.customStyle) != null ? _props$customStyle : {}\n  });\n  var area = useMainSelector(function (state) {\n    return state.interactionData.general.currentArea;\n  });\n  var farm = useMainSelector(function (state) {\n    return state.backendData.user.many_user_has_many_farm[0].farm;\n  });\n  return React.createElement(TouchableOpacity, {\n    activeOpacity: 0.5,\n    style: styles.mainView,\n    onPress: function _callee() {\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              props.onBusy(true);\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(generateReport(props.field, farm, area, props.plagues));\n\n            case 3:\n              props.onBusy(false);\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 3\n    }\n  }, React.createElement(Entypo, {\n    name: \"share\",\n    style: styles.icon,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 4\n    }\n  }), React.createElement(Text, {\n    style: styles.text,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 4\n    }\n  }, props.text));\n}\n\nfunction generateReport(field, farm, area, plagueDataList) {\n  var diagnosis, remoteUri, localUri, result, _field$area_ha, _diagnosis$affected_a, _trepadeiras$percenta, _mamona$percentage, _gpa$percentage, _gpb$percentage, _ofl$percentage, _undef$percentage, imageBase64, farmName, areaName, fieldName, cropType, cropAreaHa, cropTypeVariety, sowingDate, harvestDate, reportDate, mamona, gpa, gpb, ofl, undef, trepadeiras, totalArea, affectedArea, infestationPercentage, trepadeirasPercentage, mamonaPercentage, gpaPercentage, gpbPercentage, oflPercentage, undefinedPercentage, html, _await$Print$printToF, uri;\n\n  return _regeneratorRuntime.async(function generateReport$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          diagnosis = getLatestDiagnosis(field);\n          remoteUri = BACKEND_BASE_URL + \"/diagnosis/\" + diagnosis.id + \"/\" + farm.imaging[0].directory + \"/\" + ZOOM_LEVEL + \"/\" + BASE_64_VALIDATION_TOKEN;\n          localUri = FileSystem.documentDirectory + 'temp' + \".png\";\n          _context2.next = 5;\n          return _regeneratorRuntime.awrap(FileSystem.downloadAsync(remoteUri, localUri));\n\n        case 5:\n          result = _context2.sent;\n\n          if (!(result.status === 200)) {\n            _context2.next = 41;\n            break;\n          }\n\n          imageBase64 = localUri;\n          farmName = farm.fantasy_name;\n          areaName = area.name;\n          fieldName = field.name;\n          cropType = field.crop[0].crop_type;\n          cropAreaHa = field.area_ha.toFixed(2);\n          cropTypeVariety = field.crop[0].variety;\n          sowingDate = field.crop[0].sowing_date.split('T')[0];\n          harvestDate = field.crop[0].expected_harvest_date.split('T')[0];\n          reportDate = diagnosis.report_date.split('T')[0];\n          mamona = plagueDataList.find(function (item) {\n            return item.plague.name === 'mamona';\n          });\n          gpa = plagueDataList.find(function (item) {\n            return item.plague.name === 'gpa';\n          });\n          gpb = plagueDataList.find(function (item) {\n            return item.plague.name === 'gpb';\n          });\n          ofl = plagueDataList.find(function (item) {\n            return item.plague.name === 'ofl';\n          });\n          undef = plagueDataList.find(function (item) {\n            return item.plague.name === 'indefinida';\n          });\n          trepadeiras = plagueDataList.find(function (item) {\n            return item.plague.name === 'trepadeira';\n          });\n          totalArea = (_field$area_ha = field.area_ha) != null ? _field$area_ha : 0;\n          affectedArea = (_diagnosis$affected_a = diagnosis.affected_area_ha) != null ? _diagnosis$affected_a : 0;\n          infestationPercentage = (totalArea === 0 ? 0 : affectedArea / totalArea * 100).toFixed(2);\n          trepadeirasPercentage = ((_trepadeiras$percenta = trepadeiras == null ? void 0 : trepadeiras.percentage) != null ? _trepadeiras$percenta : 0).toFixed(2);\n          mamonaPercentage = ((_mamona$percentage = mamona == null ? void 0 : mamona.percentage) != null ? _mamona$percentage : 0).toFixed(2);\n          gpaPercentage = ((_gpa$percentage = gpa == null ? void 0 : gpa.percentage) != null ? _gpa$percentage : 0).toFixed(2);\n          gpbPercentage = ((_gpb$percentage = gpb == null ? void 0 : gpb.percentage) != null ? _gpb$percentage : 0).toFixed(2);\n          oflPercentage = ((_ofl$percentage = ofl == null ? void 0 : ofl.percentage) != null ? _ofl$percentage : 0).toFixed(2);\n          undefinedPercentage = ((_undef$percentage = undef == null ? void 0 : undef.percentage) != null ? _undef$percentage : 0).toFixed(2);\n          html = reportTemplate(imageBase64, farmName, areaName, fieldName, cropType, cropAreaHa, cropTypeVariety, sowingDate, harvestDate, reportDate, totalArea.toFixed(2), affectedArea.toFixed(2), infestationPercentage, trepadeirasPercentage, mamonaPercentage, gpaPercentage, gpbPercentage, oflPercentage, undefinedPercentage);\n          _context2.next = 35;\n          return _regeneratorRuntime.awrap(Print.printToFileAsync({\n            html: html\n          }));\n\n        case 35:\n          _await$Print$printToF = _context2.sent;\n          uri = _await$Print$printToF.uri;\n          _context2.next = 39;\n          return _regeneratorRuntime.awrap(Sharing.shareAsync(uri));\n\n        case 39:\n          _context2.next = 41;\n          return _regeneratorRuntime.awrap(FileSystem.deleteAsync(localUri));\n\n        case 41:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nvar defaultStyleSheet = createTStyleSheet({\n  mainView: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center',\n    width: '100%',\n    height: '30rem'\n  },\n  icon: {\n    marginHorizontal: '7rem',\n    fontSize: '20rem',\n    color: '#469BA2'\n  },\n  text: {\n    fontSize: '14rem',\n    alignItems: 'center',\n    justifyContent: 'center',\n    fontWeight: '500',\n    color: '#469BA2'\n  }\n});","map":{"version":3,"sources":["/home/jmgoncalves/git/agro-x/frontend/components/00-common/share-button.tsx"],"names":["React","Text","createTStyleSheet","overrideTStyleSheet","Entypo","Print","Sharing","useMainSelector","FileSystem","BACKEND_BASE_URL","reportTemplate","getLatestDiagnosis","BASE_64_VALIDATION_TOKEN","ZOOM_LEVEL","ShareButton","props","styles","defaultStyleSheet","mainView","customStyle","area","state","interactionData","general","currentArea","farm","backendData","user","many_user_has_many_farm","onBusy","generateReport","field","plagues","icon","text","plagueDataList","diagnosis","remoteUri","id","imaging","directory","localUri","documentDirectory","downloadAsync","result","status","imageBase64","farmName","fantasy_name","areaName","name","fieldName","cropType","crop","crop_type","cropAreaHa","area_ha","toFixed","cropTypeVariety","variety","sowingDate","sowing_date","split","harvestDate","expected_harvest_date","reportDate","report_date","mamona","find","item","plague","gpa","gpb","ofl","undef","trepadeiras","totalArea","affectedArea","affected_area_ha","infestationPercentage","trepadeirasPercentage","percentage","mamonaPercentage","gpaPercentage","gpbPercentage","oflPercentage","undefinedPercentage","html","printToFileAsync","uri","shareAsync","deleteAsync","flexDirection","alignItems","justifyContent","width","height","marginHorizontal","fontSize","color","fontWeight"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { Text } from 'react-native-paper';\nimport { TouchableOpacity } from 'react-native';\nimport { createTStyleSheet, overrideTStyleSheet, ExtendedStyle } from '../../src/utils/style';\nimport { Entypo } from '@expo/vector-icons';\nimport * as Print from 'expo-print';\nimport * as Sharing from 'expo-sharing';\nimport { Models } from '../../models';\nimport { useMainSelector } from '../../redux-things';\nimport * as FileSystem from 'expo-file-system';\nimport { BACKEND_BASE_URL } from '../../src/network';\nimport { reportTemplate } from './report-template';\nimport { getLatestDiagnosis } from '../../src/utils';\n\nconst BASE_64_VALIDATION_TOKEN = 'WDl5NDhVV2ZlRTAsSlo3JWJYfUdJe3ZvLlsmayFILWs4XXVldDg7WA==';\nconst ZOOM_LEVEL = 17;\n\nexport type PlagueData = { plague: Models.plague; percentage: number };\n\ntype ShareButtonProps = {\n\ttext: string;\n\tfield: Models.field;\n\tplagues: PlagueData[];\n\tcustomStyle?: ExtendedStyle;\n\tonBusy: (toggle: boolean) => void;\n};\n\nexport function ShareButton(props: ShareButtonProps) {\n\tconst styles = overrideTStyleSheet(defaultStyleSheet, {\n\t\tmainView: props.customStyle ?? {},\n\t});\n\n\tconst area = useMainSelector((state) => state.interactionData.general.currentArea)!;\n\tconst farm = useMainSelector((state) => state.backendData.user!.many_user_has_many_farm[0].farm)!;\n\n\treturn (\n\t\t<TouchableOpacity\n\t\t\tactiveOpacity={0.5}\n\t\t\tstyle={styles.mainView}\n\t\t\tonPress={async () => {\n\t\t\t\tprops.onBusy(true);\n\t\t\t\tawait generateReport(props.field, farm, area, props.plagues);\n\t\t\t\tprops.onBusy(false);\n\t\t\t}}\n\t\t>\n\t\t\t<Entypo name=\"share\" style={styles.icon} />\n\t\t\t<Text style={styles.text}>{props.text}</Text>\n\t\t</TouchableOpacity>\n\t);\n}\n\nasync function generateReport(field: Models.field, farm: Models.farm, area: Models.area, plagueDataList: PlagueData[]) {\n\tconst diagnosis = getLatestDiagnosis(field)!;\n\tconst remoteUri = `${BACKEND_BASE_URL}/diagnosis/${diagnosis.id}/${farm.imaging[0].directory}/${ZOOM_LEVEL}/${BASE_64_VALIDATION_TOKEN}`;\n\tconst localUri = `${FileSystem.documentDirectory!}${'temp'}.png`;\n\tconst result = await FileSystem.downloadAsync(remoteUri, localUri);\n\tif (result.status === 200) {\n\t\tconst imageBase64 = localUri;\n\t\tconst farmName = farm.fantasy_name;\n\t\tconst areaName = area.name;\n\t\tconst fieldName = field.name;\n\t\tconst cropType = field.crop[0].crop_type;\n\t\tconst cropAreaHa = field.area_ha.toFixed(2);\n\t\tconst cropTypeVariety = field.crop[0].variety;\n\t\tconst sowingDate = field.crop[0].sowing_date.split('T')[0];\n\t\tconst harvestDate = field.crop[0].expected_harvest_date.split('T')[0];\n\t\tconst reportDate = diagnosis.report_date.split('T')[0];\n\n\t\tconst mamona = plagueDataList.find((item) => item.plague.name === 'mamona');\n\t\tconst gpa = plagueDataList.find((item) => item.plague.name === 'gpa');\n\t\tconst gpb = plagueDataList.find((item) => item.plague.name === 'gpb');\n\t\tconst ofl = plagueDataList.find((item) => item.plague.name === 'ofl');\n\t\tconst undef = plagueDataList.find((item) => item.plague.name === 'indefinida');\n\t\tconst trepadeiras = plagueDataList.find((item) => item.plague.name === 'trepadeira');\n\n\t\tconst totalArea = field.area_ha ?? 0;\n\t\tconst affectedArea = diagnosis.affected_area_ha ?? 0;\n\t\tconst infestationPercentage = (totalArea === 0 ? 0 : (affectedArea / totalArea) * 100).toFixed(2);\n\n\t\tconst trepadeirasPercentage = (trepadeiras?.percentage ?? 0).toFixed(2);\n\t\tconst mamonaPercentage = (mamona?.percentage ?? 0).toFixed(2);\n\t\tconst gpaPercentage = (gpa?.percentage ?? 0).toFixed(2);\n\t\tconst gpbPercentage = (gpb?.percentage ?? 0).toFixed(2);\n\t\tconst oflPercentage = (ofl?.percentage ?? 0).toFixed(2);\n\t\tconst undefinedPercentage = (undef?.percentage ?? 0).toFixed(2);\n\n\t\tconst html = reportTemplate(\n\t\t\timageBase64,\n\t\t\tfarmName,\n\t\t\tareaName,\n\t\t\tfieldName,\n\t\t\tcropType,\n\t\t\tcropAreaHa,\n\t\t\tcropTypeVariety,\n\t\t\tsowingDate,\n\t\t\tharvestDate,\n\t\t\treportDate,\n\t\t\ttotalArea.toFixed(2),\n\t\t\taffectedArea.toFixed(2),\n\t\t\tinfestationPercentage,\n\t\t\ttrepadeirasPercentage,\n\t\t\tmamonaPercentage,\n\t\t\tgpaPercentage,\n\t\t\tgpbPercentage,\n\t\t\toflPercentage,\n\t\t\tundefinedPercentage,\n\t\t);\n\n\t\tconst { uri } = await Print.printToFileAsync({ html });\n\n\t\tawait Sharing.shareAsync(uri);\n\n\t\tawait FileSystem.deleteAsync(localUri);\n\t}\n}\n\nconst defaultStyleSheet = createTStyleSheet({\n\tmainView: {\n\t\tflexDirection: 'row',\n\t\talignItems: 'center',\n\t\tjustifyContent: 'center',\n\t\twidth: '100%',\n\t\theight: '30rem',\n\t},\n\ticon: {\n\t\tmarginHorizontal: '7rem',\n\t\tfontSize: '20rem',\n\t\tcolor: '#469BA2',\n\t},\n\ttext: {\n\t\tfontSize: '14rem',\n\t\talignItems: 'center',\n\t\tjustifyContent: 'center',\n\t\tfontWeight: '500',\n\t\tcolor: '#469BA2',\n\t},\n});\n"]},"metadata":{},"sourceType":"module"}