{"ast":null,"code":"function _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } it = o[Symbol.iterator](); return it.next.bind(it); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport { toLoggableString } from \"./to-loggable-string\";\n\nfunction logsAreEqual(log1, log2) {\n  return log1.date === log2.date && toLoggableString(log1.action) === toLoggableString(log2.action) && toLoggableString(log1.prevState) === toLoggableString(log2.prevState) && toLoggableString(log1.nextState) === toLoggableString(log2.nextState);\n}\n\nfunction insertLog(log, set) {\n  for (var _iterator = _createForOfIteratorHelperLoose(set), _step; !(_step = _iterator()).done;) {\n    var x = _step.value;\n\n    if (logsAreEqual(x.log, log)) {\n      x.count++;\n      return;\n    }\n  }\n\n  set.push({\n    log: log,\n    count: 1\n  });\n}\n\nexport function deduplicateLogs(logs) {\n  var result = [];\n  logs.forEach(function (log) {\n    return insertLog(log, result);\n  });\n  return result;\n}","map":{"version":3,"sources":["/home/jmgoncalves/git/agro-x/frontend/redux-things/custom-logger-middleware/deduplicate-logs.ts"],"names":["toLoggableString","logsAreEqual","log1","log2","date","action","prevState","nextState","insertLog","log","set","x","count","push","deduplicateLogs","logs","result","forEach"],"mappings":";;;;;;AAAA,SAASA,gBAAT;;AAQA,SAASC,YAAT,CAAsBC,IAAtB,EAAiCC,IAAjC,EAAqD;AACpD,SACCD,IAAI,CAACE,IAAL,KAAcD,IAAI,CAACC,IAAnB,IACAJ,gBAAgB,CAACE,IAAI,CAACG,MAAN,CAAhB,KAAkCL,gBAAgB,CAACG,IAAI,CAACE,MAAN,CADlD,IAEAL,gBAAgB,CAACE,IAAI,CAACI,SAAN,CAAhB,KAAqCN,gBAAgB,CAACG,IAAI,CAACG,SAAN,CAFrD,IAGAN,gBAAgB,CAACE,IAAI,CAACK,SAAN,CAAhB,KAAqCP,gBAAgB,CAACG,IAAI,CAACI,SAAN,CAJtD;AAMA;;AAED,SAASC,SAAT,CAAmBC,GAAnB,EAA6BC,GAA7B,EAAwD;AACvD,uDAAgBA,GAAhB,wCAAqB;AAAA,QAAVC,CAAU;;AACpB,QAAIV,YAAY,CAACU,CAAC,CAACF,GAAH,EAAQA,GAAR,CAAhB,EAA8B;AAC7BE,MAAAA,CAAC,CAACC,KAAF;AACA;AACA;AACD;;AAEDF,EAAAA,GAAG,CAACG,IAAJ,CAAS;AAAEJ,IAAAA,GAAG,EAAHA,GAAF;AAAOG,IAAAA,KAAK,EAAE;AAAd,GAAT;AACA;;AAED,OAAO,SAASE,eAAT,CAAyBC,IAAzB,EAAsD;AAC5D,MAAMC,MAAsB,GAAG,EAA/B;AACAD,EAAAA,IAAI,CAACE,OAAL,CAAa,UAACR,GAAD;AAAA,WAASD,SAAS,CAACC,GAAD,EAAMO,MAAN,CAAlB;AAAA,GAAb;AACA,SAAOA,MAAP;AACA","sourcesContent":["import { toLoggableString } from './to-loggable-string';\nimport type { Log } from './log';\n\nexport type LogWithCount = {\n\tlog: Log;\n\tcount: number;\n};\n\nfunction logsAreEqual(log1: Log, log2: Log): boolean {\n\treturn (\n\t\tlog1.date === log2.date &&\n\t\ttoLoggableString(log1.action) === toLoggableString(log2.action) &&\n\t\ttoLoggableString(log1.prevState) === toLoggableString(log2.prevState) &&\n\t\ttoLoggableString(log1.nextState) === toLoggableString(log2.nextState)\n\t);\n}\n\nfunction insertLog(log: Log, set: LogWithCount[]): void {\n\tfor (const x of set) {\n\t\tif (logsAreEqual(x.log, log)) {\n\t\t\tx.count++;\n\t\t\treturn;\n\t\t}\n\t}\n\n\tset.push({ log, count: 1 });\n}\n\nexport function deduplicateLogs(logs: Log[]): LogWithCount[] {\n\tconst result: LogWithCount[] = [];\n\tlogs.forEach((log) => insertLog(log, result));\n\treturn result;\n}\n"]},"metadata":{},"sourceType":"module"}