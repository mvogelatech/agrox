{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it; if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } it = o[Symbol.iterator](); return it.next.bind(it); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { ky } from \"./ky\";\nimport { getAuthenticatedUserId } from \"./auth\";\nimport { dispatch } from \"../../redux-things/utils\";\nimport { enableShorterLogsForModel } from \"./helpers/shorter-logs-for-model\";\nimport { showSnackbar } from \"../snackbars\";\nimport * as FileSystem from 'expo-file-system';\nexport { BACKEND_BASE_URL } from \"./ky\";\nvar backendDataFetchOngoing = false;\nexport function getBackendDataFetchStatus() {\n  return backendDataFetchOngoing;\n}\nvar ACCESS_TOKEN_FOR_AGROEXPLORE_DEVS = 'X9y48UWfeE0,JZ7%bX}GI{vo.[&k!H-k8]uet8;X';\nvar VISIONA_DEV_AUTH_TOKEN = 'YW50b25pby5mZXJuYW5kb0BlbWJyYWVyLmNvbS5icjpBZ3JvZXhwbG9yZTFA=';\n\nfunction fetchUser() {\n  var id, user;\n  return _regeneratorRuntime.async(function fetchUser$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(getAuthenticatedUserId());\n\n        case 2:\n          id = _context.sent;\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(ky.get(\"userdata/\" + id).json());\n\n        case 5:\n          user = _context.sent;\n          enableShorterLogsForModel(user, 'user');\n          return _context.abrupt(\"return\", user);\n\n        case 8:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction fetchCompanies() {\n  var companies, _iterator, _step, _company;\n\n  return _regeneratorRuntime.async(function fetchCompanies$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap(ky.get('company').json());\n\n        case 2:\n          companies = _context2.sent;\n\n          for (_iterator = _createForOfIteratorHelperLoose(companies); !(_step = _iterator()).done;) {\n            _company = _step.value;\n            enableShorterLogsForModel(_company, 'company');\n          }\n\n          return _context2.abrupt(\"return\", companies);\n\n        case 5:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction fetchQuotationPackages() {\n  var packages, _iterator2, _step2, quotation;\n\n  return _regeneratorRuntime.async(function fetchQuotationPackages$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return _regeneratorRuntime.awrap(ky.get('quotation').json());\n\n        case 2:\n          packages = _context3.sent;\n\n          for (_iterator2 = _createForOfIteratorHelperLoose(packages); !(_step2 = _iterator2()).done;) {\n            quotation = _step2.value;\n            enableShorterLogsForModel(quotation, 'quotation_package');\n          }\n\n          return _context3.abrupt(\"return\", packages);\n\n        case 5:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction fetchQuotationCheckouts() {\n  var checkoutGroups, _iterator3, _step3, group, _iterator4, _step4, checkout;\n\n  return _regeneratorRuntime.async(function fetchQuotationCheckouts$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return _regeneratorRuntime.awrap(ky.get('checkout').json());\n\n        case 2:\n          checkoutGroups = _context4.sent;\n\n          for (_iterator3 = _createForOfIteratorHelperLoose(checkoutGroups); !(_step3 = _iterator3()).done;) {\n            group = _step3.value;\n\n            for (_iterator4 = _createForOfIteratorHelperLoose(group); !(_step4 = _iterator4()).done;) {\n              checkout = _step4.value;\n              enableShorterLogsForModel(checkout, 'quotation_checkout');\n            }\n          }\n\n          return _context4.abrupt(\"return\", checkoutGroups);\n\n        case 5:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction fetchTermsAndConditions() {\n  var termsAndConditions, _iterator5, _step5, term;\n\n  return _regeneratorRuntime.async(function fetchTermsAndConditions$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return _regeneratorRuntime.awrap(ky.get('terms-and-conditions').json());\n\n        case 2:\n          termsAndConditions = _context5.sent;\n\n          for (_iterator5 = _createForOfIteratorHelperLoose(termsAndConditions); !(_step5 = _iterator5()).done;) {\n            term = _step5.value;\n            enableShorterLogsForModel(term, 'terms-and-conditions');\n          }\n\n          return _context5.abrupt(\"return\", termsAndConditions);\n\n        case 5:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction fetchPrivacyPolicy() {\n  var privacyPolicy, _iterator6, _step6, term;\n\n  return _regeneratorRuntime.async(function fetchPrivacyPolicy$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return _regeneratorRuntime.awrap(ky.get('privacy-policy').json());\n\n        case 2:\n          privacyPolicy = _context6.sent;\n\n          for (_iterator6 = _createForOfIteratorHelperLoose(privacyPolicy); !(_step6 = _iterator6()).done;) {\n            term = _step6.value;\n            enableShorterLogsForModel(term, 'privacy-policy');\n          }\n\n          return _context6.abrupt(\"return\", privacyPolicy);\n\n        case 5:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction fetchPlagues() {\n  var plagues, _iterator7, _step7, _plague;\n\n  return _regeneratorRuntime.async(function fetchPlagues$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return _regeneratorRuntime.awrap(ky.get('plague').json());\n\n        case 2:\n          plagues = _context7.sent;\n\n          for (_iterator7 = _createForOfIteratorHelperLoose(plagues); !(_step7 = _iterator7()).done;) {\n            _plague = _step7.value;\n            enableShorterLogsForModel(_plague, 'plague');\n          }\n\n          return _context7.abrupt(\"return\", plagues);\n\n        case 5:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexport function fetchBackendData() {\n  var _await$Promise$all, _await$Promise$all2, user, companies, packages, groups, terms, privacyPolicy, plagues;\n\n  return _regeneratorRuntime.async(function fetchBackendData$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          if (!backendDataFetchOngoing) {\n            _context8.next = 2;\n            break;\n          }\n\n          return _context8.abrupt(\"return\");\n\n        case 2:\n          _context8.prev = 2;\n          backendDataFetchOngoing = true;\n          _context8.next = 6;\n          return _regeneratorRuntime.awrap(Promise.all([fetchUser(), fetchCompanies(), fetchQuotationPackages(), fetchQuotationCheckouts(), fetchTermsAndConditions(), fetchPrivacyPolicy(), fetchPlagues()]));\n\n        case 6:\n          _await$Promise$all = _context8.sent;\n          _await$Promise$all2 = _slicedToArray(_await$Promise$all, 7);\n          user = _await$Promise$all2[0];\n          companies = _await$Promise$all2[1];\n          packages = _await$Promise$all2[2];\n          groups = _await$Promise$all2[3];\n          terms = _await$Promise$all2[4];\n          privacyPolicy = _await$Promise$all2[5];\n          plagues = _await$Promise$all2[6];\n          _context8.next = 17;\n          return _regeneratorRuntime.awrap(fetchIndices(user.many_user_has_many_farm.flatMap(function (x) {\n            return x.farm.area;\n          })));\n\n        case 17:\n          dispatch({\n            type: 'BACKEND_DATA_RECEIVED__USER',\n            user: user\n          });\n          dispatch({\n            type: 'BACKEND_DATA_RECEIVED__COMPANIES',\n            companies: companies\n          });\n          dispatch({\n            type: 'BACKEND_DATA_RECEIVED__QUOTATION_PACKAGES',\n            packages: packages\n          });\n          dispatch({\n            type: 'BACKEND_DATA_RECEIVED__CHECKOUT_GROUPS',\n            groups: groups\n          });\n          dispatch({\n            type: 'BACKEND_DATA_RECEIVED__TERMS_AND_CONDITIONS',\n            terms: terms\n          });\n          dispatch({\n            type: 'BACKEND_DATA_RECEIVED__PRIVACY_POLICY',\n            privacyPolicy: privacyPolicy\n          });\n          dispatch({\n            type: 'BACKEND_DATA_RECEIVED__PLAGUES',\n            plagues: plagues\n          });\n          _context8.next = 30;\n          break;\n\n        case 26:\n          _context8.prev = 26;\n          _context8.t0 = _context8[\"catch\"](2);\n          showSnackbar({\n            text: 'Ops! Um erro inesperado ocorreu.\\nPor favor, verifique sua conexão\\ncom a internet e reinicie o aplicativo.',\n            textColor: '#70171F',\n            actionText: 'OK, ENTENDI',\n            actionTextColor: '#70171F',\n            style: {\n              backgroundColor: '#F6C0C5'\n            }\n          });\n          console.log('APP_FIRST_FETCH_ERROR', _context8.t0);\n\n        case 30:\n          _context8.prev = 30;\n          backendDataFetchOngoing = false;\n          return _context8.finish(30);\n\n        case 33:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, null, null, [[2, 26, 30, 33]], Promise);\n}\nexport function fetchUserUnreadNotificationCount() {\n  var id, count;\n  return _regeneratorRuntime.async(function fetchUserUnreadNotificationCount$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.next = 2;\n          return _regeneratorRuntime.awrap(getAuthenticatedUserId());\n\n        case 2:\n          id = _context9.sent;\n          _context9.next = 5;\n          return _regeneratorRuntime.awrap(ky.get(\"userdata/\" + id + \"/unread-notification-count\").json());\n\n        case 5:\n          count = _context9.sent;\n          return _context9.abrupt(\"return\", count);\n\n        case 7:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction fetchIndices(areas) {\n  var _iterator8, _step8, _area, _iterator9, _step9, field;\n\n  return _regeneratorRuntime.async(function fetchIndices$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          _iterator8 = _createForOfIteratorHelperLoose(areas);\n\n        case 1:\n          if ((_step8 = _iterator8()).done) {\n            _context10.next = 14;\n            break;\n          }\n\n          _area = _step8.value;\n          _iterator9 = _createForOfIteratorHelperLoose(_area.field);\n\n        case 4:\n          if ((_step9 = _iterator9()).done) {\n            _context10.next = 12;\n            break;\n          }\n\n          field = _step9.value;\n          _context10.next = 8;\n          return _regeneratorRuntime.awrap(fetchIndicesForField(field.id));\n\n        case 8:\n          field.visiona = _context10.sent;\n          console.log('o que eu quero agora', field.visiona);\n\n        case 10:\n          _context10.next = 4;\n          break;\n\n        case 12:\n          _context10.next = 1;\n          break;\n\n        case 14:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction fetchIndicesForField(fieldId) {\n  var response;\n  return _regeneratorRuntime.async(function fetchIndicesForField$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          _context11.next = 2;\n          return _regeneratorRuntime.awrap(ky.post(\"visiona/list-area\", {\n            json: {\n              accessToken: ACCESS_TOKEN_FOR_AGROEXPLORE_DEVS,\n              id: fieldId\n            }\n          }).json());\n\n        case 2:\n          response = _context11.sent;\n          return _context11.abrupt(\"return\", response);\n\n        case 4:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nexport function downloadIndexImage(remoteUri, localUri) {\n  var VISIONA_API_AUTH_TOKEN_TEXT, options;\n  return _regeneratorRuntime.async(function downloadIndexImage$(_context12) {\n    while (1) {\n      switch (_context12.prev = _context12.next) {\n        case 0:\n          VISIONA_API_AUTH_TOKEN_TEXT = __DEV__ ? VISIONA_DEV_AUTH_TOKEN : '___VISIONA_API_AUTH_TOKEN_TYPE___';\n          options = {\n            headers: {\n              Authorization: \"Basic \" + VISIONA_API_AUTH_TOKEN_TEXT\n            }\n          };\n          return _context12.abrupt(\"return\", FileSystem.downloadAsync(remoteUri, localUri, options));\n\n        case 3:\n        case \"end\":\n          return _context12.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function fetchDiagnosisImage(fieldId) {\n  var image;\n  return _regeneratorRuntime.async(function fetchDiagnosisImage$(_context13) {\n    while (1) {\n      switch (_context13.prev = _context13.next) {\n        case 0:\n          _context13.next = 2;\n          return _regeneratorRuntime.awrap(ky.get(\"diag/\" + fieldId));\n\n        case 2:\n          image = _context13.sent;\n          return _context13.abrupt(\"return\", image.body);\n\n        case 4:\n        case \"end\":\n          return _context13.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["/home/jmgoncalves/git/agro-x/frontend/src/network/index.ts"],"names":["ky","getAuthenticatedUserId","dispatch","enableShorterLogsForModel","showSnackbar","FileSystem","BACKEND_BASE_URL","backendDataFetchOngoing","getBackendDataFetchStatus","ACCESS_TOKEN_FOR_AGROEXPLORE_DEVS","VISIONA_DEV_AUTH_TOKEN","fetchUser","id","get","json","user","fetchCompanies","companies","company","fetchQuotationPackages","packages","quotation","fetchQuotationCheckouts","checkoutGroups","group","checkout","fetchTermsAndConditions","termsAndConditions","term","fetchPrivacyPolicy","privacyPolicy","fetchPlagues","plagues","plague","fetchBackendData","Promise","all","groups","terms","fetchIndices","many_user_has_many_farm","flatMap","x","farm","area","type","text","textColor","actionText","actionTextColor","style","backgroundColor","console","log","fetchUserUnreadNotificationCount","count","areas","field","fetchIndicesForField","visiona","fieldId","post","accessToken","response","downloadIndexImage","remoteUri","localUri","VISIONA_API_AUTH_TOKEN_TEXT","__DEV__","options","headers","Authorization","downloadAsync","fetchDiagnosisImage","image","body"],"mappings":"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","sourcesContent":["import { ky } from './ky';\nimport { getAuthenticatedUserId } from './auth';\nimport { Models } from '../../models';\nimport { dispatch } from '../../redux-things/utils';\n// import { cacheFieldIconImagesForAreas } from './cache-field-icons';\nimport { enableShorterLogsForModel } from './helpers/shorter-logs-for-model';\nimport { showSnackbar } from '../snackbars';\nimport * as FileSystem from 'expo-file-system';\nexport { BACKEND_BASE_URL } from './ky';\n\nlet backendDataFetchOngoing = false;\n\nexport function getBackendDataFetchStatus() {\n\treturn backendDataFetchOngoing;\n}\n\nconst ACCESS_TOKEN_FOR_AGROEXPLORE_DEVS = 'X9y48UWfeE0,JZ7%bX}GI{vo.[&k!H-k8]uet8;X';\nconst VISIONA_DEV_AUTH_TOKEN = 'YW50b25pby5mZXJuYW5kb0BlbWJyYWVyLmNvbS5icjpBZ3JvZXhwbG9yZTFA=';\n\nasync function fetchUser(): Promise<Models.user> {\n\tconst id = (await getAuthenticatedUserId())!;\n\tconst user = await ky.get(`userdata/${id}`).json<Models.user>();\n\tenableShorterLogsForModel(user, 'user');\n\treturn user;\n}\n\nasync function fetchCompanies(): Promise<Models.company[]> {\n\tconst companies = await ky.get('company').json<Models.company[]>();\n\tfor (const company of companies) enableShorterLogsForModel(company, 'company');\n\treturn companies;\n}\n\nasync function fetchQuotationPackages(): Promise<Models.quotation_package[]> {\n\tconst packages = await ky.get('quotation').json<Models.quotation_package[]>();\n\tfor (const quotation of packages) enableShorterLogsForModel(quotation, 'quotation_package');\n\treturn packages;\n}\n\nasync function fetchQuotationCheckouts(): Promise<Models.quotation_checkout_group[]> {\n\tconst checkoutGroups = await ky.get('checkout').json<Models.quotation_checkout_group[]>();\n\tfor (const group of checkoutGroups) {\n\t\tfor (const checkout of group) enableShorterLogsForModel(checkout, 'quotation_checkout');\n\t}\n\n\treturn checkoutGroups;\n}\n\nasync function fetchTermsAndConditions(): Promise<Models.terms_and_conditions[]> {\n\tconst termsAndConditions = await ky.get('terms-and-conditions').json<Models.terms_and_conditions[]>();\n\tfor (const term of termsAndConditions) enableShorterLogsForModel(term, 'terms-and-conditions');\n\treturn termsAndConditions;\n}\n\nasync function fetchPrivacyPolicy(): Promise<Models.privacy_policy[]> {\n\tconst privacyPolicy = await ky.get('privacy-policy').json<Models.privacy_policy[]>();\n\tfor (const term of privacyPolicy) enableShorterLogsForModel(term, 'privacy-policy');\n\treturn privacyPolicy;\n}\n\nasync function fetchPlagues(): Promise<Models.plague[]> {\n\tconst plagues = await ky.get('plague').json<Models.plague[]>();\n\tfor (const plague of plagues) enableShorterLogsForModel(plague, 'plague');\n\treturn plagues;\n}\n\nexport async function fetchBackendData(): Promise<void> {\n\tif (backendDataFetchOngoing) {\n\t\t// throw new Error(`Fetch already in progress. Refusing to make a duplicate request.`);\n\t\treturn;\n\t}\n\n\ttry {\n\t\tbackendDataFetchOngoing = true;\n\n\t\tconst [user, companies, packages, groups, terms, privacyPolicy, plagues] = await Promise.all([\n\t\t\tfetchUser(),\n\t\t\tfetchCompanies(),\n\t\t\tfetchQuotationPackages(),\n\t\t\tfetchQuotationCheckouts(),\n\t\t\tfetchTermsAndConditions(),\n\t\t\tfetchPrivacyPolicy(),\n\t\t\tfetchPlagues(),\n\t\t]);\n\n\t\t// fetch index data from backend and visiona api service\n\t\tawait fetchIndices(user.many_user_has_many_farm.flatMap((x) => x.farm.area));\n\n\t\t// void cacheFieldIconImagesForAreas(\n\t\t// \tuser.many_user_has_many_farm.flatMap((x) => x.farm.area),\n\t\t// \t30,\n\t\t// );\n\n\t\t// TODO decide what to do about map tiles\n\t\t// TODO decide what to do about map tiles (offline mode)\n\t\t// void cacheMapTilesForAreas(user.producer.farm.area, 20);\n\n\t\tdispatch({ type: 'BACKEND_DATA_RECEIVED__USER', user });\n\t\tdispatch({ type: 'BACKEND_DATA_RECEIVED__COMPANIES', companies });\n\t\tdispatch({ type: 'BACKEND_DATA_RECEIVED__QUOTATION_PACKAGES', packages });\n\t\tdispatch({ type: 'BACKEND_DATA_RECEIVED__CHECKOUT_GROUPS', groups });\n\t\tdispatch({ type: 'BACKEND_DATA_RECEIVED__TERMS_AND_CONDITIONS', terms });\n\t\tdispatch({ type: 'BACKEND_DATA_RECEIVED__PRIVACY_POLICY', privacyPolicy });\n\t\tdispatch({ type: 'BACKEND_DATA_RECEIVED__PLAGUES', plagues });\n\t} catch (error) {\n\t\tshowSnackbar({\n\t\t\ttext: 'Ops! Um erro inesperado ocorreu.\\nPor favor, verifique sua conexão\\ncom a internet e reinicie o aplicativo.',\n\t\t\ttextColor: '#70171F',\n\t\t\tactionText: 'OK, ENTENDI',\n\t\t\tactionTextColor: '#70171F',\n\t\t\tstyle: {\n\t\t\t\tbackgroundColor: '#F6C0C5',\n\t\t\t},\n\t\t});\n\t\tconsole.log('APP_FIRST_FETCH_ERROR', error);\n\t} finally {\n\t\tbackendDataFetchOngoing = false;\n\t}\n}\n\nexport async function fetchUserUnreadNotificationCount(): Promise<number> {\n\tconst id = (await getAuthenticatedUserId())!;\n\tconst count = await ky.get(`userdata/${id}/unread-notification-count`).json<number>();\n\treturn count;\n}\n\nasync function fetchIndices(areas: Models.area[]) {\n\tfor (const area of areas) {\n\t\tfor (const field of area.field) {\n\t\t\tfield.visiona = await fetchIndicesForField(field.id);\n\t\t\tconsole.log('o que eu quero agora', field.visiona);\n\t\t}\n\t}\n}\n\nasync function fetchIndicesForField(fieldId: number) {\n\tconst response = await ky\n\t\t.post(`visiona/list-area`, {\n\t\t\tjson: {\n\t\t\t\taccessToken: ACCESS_TOKEN_FOR_AGROEXPLORE_DEVS,\n\t\t\t\tid: fieldId,\n\t\t\t},\n\t\t})\n\t\t.json<Models.VisionaObservation[]>();\n\treturn response;\n}\n\nexport async function downloadIndexImage(remoteUri: string, localUri: string) {\n\tconst VISIONA_API_AUTH_TOKEN_TEXT = __DEV__ ? VISIONA_DEV_AUTH_TOKEN : '___VISIONA_API_AUTH_TOKEN_TYPE___';\n\tconst options: FileSystem.DownloadOptions = { headers: { Authorization: `Basic ${VISIONA_API_AUTH_TOKEN_TEXT}` } };\n\treturn FileSystem.downloadAsync(remoteUri, localUri, options);\n}\n\nexport async function fetchDiagnosisImage(fieldId: number) {\n\tconst image = await ky.get(`diag/${fieldId}`);\n\treturn image.body;\n}\n"]},"metadata":{},"sourceType":"module"}