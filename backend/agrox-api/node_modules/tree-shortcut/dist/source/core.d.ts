import { AnyPlainObject } from './is-plain-object';
declare type AnyArray = readonly any[];
declare type PropOrNever<O, Prop> = Prop extends string | number ? (O extends Record<Prop, any> ? O[Prop] : never) : never;
declare type PropOrUndef<O, Prop extends string> = O extends Record<Prop, any> ? O[Prop] : undefined;
declare type PropOrUndefEnteringArrayIfNeeded<O, Prop extends string> = O extends AnyArray ? {
    [K in keyof O]: PropOrUndefEnteringArrayIfNeeded<O[K], Prop>;
} : PropOrUndef<O, Prop>;
declare type ReplaceInUnion<U, OldType, NewType> = OldType extends U ? Exclude<U, OldType> | NewType : U;
export declare type TreeShortcut<T, PropName extends string, InnerPropName extends string, ShortcutName extends string> = T extends any ? PropName extends keyof T ? {
    [K in ReplaceInUnion<keyof T, PropName, ShortcutName>]: K extends ShortcutName ? PropOrUndefEnteringArrayIfNeeded<T[PropName], InnerPropName> : TreeShortcut<PropOrNever<T, K>, PropName, InnerPropName, ShortcutName>;
} : T extends AnyArray | AnyPlainObject ? {
    [K in keyof T]: TreeShortcut<T[K], PropName, InnerPropName, ShortcutName>;
} : T : never;
export declare function treeShortcut<Tree, ShortcutTriggerProp extends string, ShortcutTargetProp extends string, ShortcutName extends string>(tree: Tree, shortcutTriggerProp: ShortcutTriggerProp, shortcutTargetProp: ShortcutTargetProp, shortcutName: ShortcutName): TreeShortcut<Tree, ShortcutTriggerProp, ShortcutTargetProp, ShortcutName>;
export {};
