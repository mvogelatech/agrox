
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 2.13.1
 * Query Engine version: fcbc4bb2d306c86c28014f596b1e8c7980af8bd4
 */
Prisma.prismaVersion = {
  client: "2.13.1",
  engine: "fcbc4bb2d306c86c28014f596b1e8c7980af8bd4"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */

Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.AddressScalarFieldEnum = makeEnum({
  id: 'id',
  street: 'street',
  city: 'city',
  number: 'number',
  km: 'km',
  postal_code: 'postal_code',
  complement: 'complement',
  neighborhood: 'neighborhood',
  phone_number: 'phone_number',
  contact_name: 'contact_name',
  state_id: 'state_id',
  mobile_number: 'mobile_number',
  email: 'email'
});

exports.Prisma.AreaScalarFieldEnum = makeEnum({
  id: 'id',
  code: 'code',
  lat: 'lat',
  long: 'long',
  coordinates: 'coordinates',
  name: 'name',
  zone: 'zone',
  state_initials: 'state_initials',
  city: 'city',
  farm_id: 'farm_id',
  demand: 'demand'
});

exports.Prisma.CompanyScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  works_with_drone: 'works_with_drone',
  works_with_plane: 'works_with_plane',
  works_with_tractor: 'works_with_tractor',
  lat: 'lat',
  long: 'long',
  address_id: 'address_id'
});

exports.Prisma.CropScalarFieldEnum = makeEnum({
  id: 'id',
  crop_type: 'crop_type',
  variety: 'variety',
  sowing_date: 'sowing_date',
  expected_harvest_date: 'expected_harvest_date',
  number: 'number',
  is_diagnosis_hired: 'is_diagnosis_hired',
  field_id: 'field_id'
});

exports.Prisma.DiagnosisScalarFieldEnum = makeEnum({
  id: 'id',
  report_date: 'report_date',
  affected_area_ha: 'affected_area_ha',
  crop_id: 'crop_id'
});

exports.Prisma.EmailScalarFieldEnum = makeEnum({
  id: 'id',
  email: 'email'
});

exports.Prisma.FarmScalarFieldEnum = makeEnum({
  id: 'id',
  cnpj: 'cnpj',
  social_name: 'social_name',
  fantasy_name: 'fantasy_name',
  lat: 'lat',
  long: 'long',
  address_id: 'address_id'
});

exports.Prisma.FieldScalarFieldEnum = makeEnum({
  id: 'id',
  code: 'code',
  area_ha: 'area_ha',
  lat: 'lat',
  long: 'long',
  coordinates: 'coordinates',
  name: 'name',
  image_uri: 'image_uri',
  area_id: 'area_id',
  visiona_area_id: 'visiona_area_id',
  event: 'event'
});

exports.Prisma.ImagingScalarFieldEnum = makeEnum({
  id: 'id',
  directory: 'directory',
  processing_timestamp: 'processing_timestamp',
  imaging_date: 'imaging_date',
  farm_id: 'farm_id'
});

exports.Prisma.InfestationScalarFieldEnum = makeEnum({
  id: 'id',
  area_ha: 'area_ha',
  points: 'points',
  diagnosis_id: 'diagnosis_id',
  plague_id: 'plague_id'
});

exports.Prisma.Many_quotation_modal_package_has_many_fieldScalarFieldEnum = makeEnum({
  id_quotation_modal_package: 'id_quotation_modal_package',
  id_field: 'id_field'
});

exports.Prisma.Many_user_has_many_farmScalarFieldEnum = makeEnum({
  user_id: 'user_id',
  farm_id: 'farm_id'
});

exports.Prisma.NotificationScalarFieldEnum = makeEnum({
  id: 'id',
  type: 'type',
  body: 'body',
  sent_date: 'sent_date',
  read_date: 'read_date',
  delivered_date: 'delivered_date',
  user_id: 'user_id'
});

exports.Prisma.PlagueScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name',
  display_name: 'display_name',
  color: 'color',
  in_use: 'in_use',
  relevance_order: 'relevance_order'
});

exports.Prisma.PrescriptionScalarFieldEnum = makeEnum({
  id: 'id',
  date: 'date',
  content: 'content',
  pulverization_method: 'pulverization_method',
  author: 'author',
  phone_number: 'phone_number',
  diagnosis_id: 'diagnosis_id'
});

exports.Prisma.Privacy_policyScalarFieldEnum = makeEnum({
  id: 'id',
  content: 'content',
  publish_date: 'publish_date'
});

exports.Prisma.QuotationScalarFieldEnum = makeEnum({
  id: 'id',
  response_date: 'response_date',
  expiration_date: 'expiration_date',
  antecipated_price: 'antecipated_price',
  cash_price: 'cash_price',
  delayed_price: 'delayed_price',
  company_id: 'company_id',
  quotation_modal_package_id: 'quotation_modal_package_id'
});

exports.Prisma.Quotation_checkoutScalarFieldEnum = makeEnum({
  id: 'id',
  checkout_date: 'checkout_date',
  selected_price: 'selected_price',
  quotation_id: 'quotation_id'
});

exports.Prisma.Quotation_modal_packageScalarFieldEnum = makeEnum({
  id: 'id',
  pulverization_method: 'pulverization_method',
  quotation_package_id: 'quotation_package_id'
});

exports.Prisma.Quotation_packageScalarFieldEnum = makeEnum({
  id: 'id',
  code: 'code',
  request_date: 'request_date',
  pulverization_start_date: 'pulverization_start_date',
  pulverization_end_date: 'pulverization_end_date'
});

exports.Prisma.RoleScalarFieldEnum = makeEnum({
  id: 'id',
  name: 'name'
});

exports.Prisma.Seed_revisionScalarFieldEnum = makeEnum({
  id: 'id',
  revision: 'revision',
  seeding_timestamp: 'seeding_timestamp',
  version_major: 'version_major',
  version_minor: 'version_minor',
  version_patch: 'version_patch'
});

exports.Prisma.StateScalarFieldEnum = makeEnum({
  id: 'id',
  initials: 'initials',
  name: 'name',
  ibge_code: 'ibge_code',
  country_code: 'country_code',
  area_code: 'area_code'
});

exports.Prisma.Terms_and_conditionsScalarFieldEnum = makeEnum({
  id: 'id',
  content: 'content',
  publish_date: 'publish_date'
});

exports.Prisma.UserScalarFieldEnum = makeEnum({
  id: 'id',
  first_name: 'first_name',
  last_name: 'last_name',
  username: 'username',
  password: 'password',
  cpf: 'cpf',
  phone_number: 'phone_number',
  email: 'email',
  active: 'active',
  creation_date: 'creation_date',
  access_date: 'access_date',
  update_date: 'update_date',
  yellow_threshold: 'yellow_threshold',
  red_threshold: 'red_threshold',
  fcm_token: 'fcm_token',
  avatar: 'avatar'
});

exports.Prisma.User_accepted_privacy_policyScalarFieldEnum = makeEnum({
  id: 'id',
  accepted_date: 'accepted_date',
  id_privacy_policy: 'id_privacy_policy',
  id_user: 'id_user'
});

exports.Prisma.User_accepted_termsScalarFieldEnum = makeEnum({
  id: 'id',
  accepted_date: 'accepted_date',
  id_user: 'id_user',
  id_terms_and_conditions: 'id_terms_and_conditions'
});

exports.Prisma.User_roleScalarFieldEnum = makeEnum({
  id: 'id',
  user_id: 'user_id',
  role_id: 'role_id'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});

exports.Prisma.QueryMode = makeEnum({
  default: 'default',
  insensitive: 'insensitive'
});


exports.Prisma.ModelName = makeEnum({
  address: 'address',
  area: 'area',
  company: 'company',
  crop: 'crop',
  diagnosis: 'diagnosis',
  email: 'email',
  farm: 'farm',
  field: 'field',
  imaging: 'imaging',
  infestation: 'infestation',
  many_quotation_modal_package_has_many_field: 'many_quotation_modal_package_has_many_field',
  many_user_has_many_farm: 'many_user_has_many_farm',
  notification: 'notification',
  plague: 'plague',
  prescription: 'prescription',
  privacy_policy: 'privacy_policy',
  quotation: 'quotation',
  quotation_checkout: 'quotation_checkout',
  quotation_modal_package: 'quotation_modal_package',
  quotation_package: 'quotation_package',
  role: 'role',
  seed_revision: 'seed_revision',
  state: 'state',
  terms_and_conditions: 'terms_and_conditions',
  user: 'user',
  user_accepted_privacy_policy: 'user_accepted_privacy_policy',
  user_accepted_terms: 'user_accepted_terms',
  user_role: 'user_role'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma-client-js/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
